0.sol
function() notLock payable public{
require(msg.sender == VAR1.VAR2, "");
require(FUN1(msg.sender),"");
require(msg.value == VAR3.VAR4,"");
VAR5 = VAR5 + msg.value;
VAR6.FUN2(msg.sender);
emit FUN3(VAR7,msg.sender);
if(VAR6.VAR8 >= VAR3.VAR9) {
FUN4();
FUN5();
}
}
}

0
---------------------------------
10103.sol
function FUN1() public payable {
address VAR1 = msg.sender;
require( !VAR2[VAR1] && VAR3.VAR4 == VAR1);
require(VAR5.FUN2(VAR1, address(this), VAR6));
VAR7 = VAR8.FUN3(VAR7, 1);
VAR2[VAR1] = true;
VAR9[VAR1] = 0;
VAR10.FUN4(VAR1);
require(VAR2[VAR1]);
VAR11 = VAR11.FUN5(VAR12);
VAR13 = VAR13.FUN5(VAR14);
VAR15 = VAR15.FUN5(VAR14);
emit FUN6(VAR1);
}

0
---------------------------------
10121.sol
function FUN1( bytes VAR1, bytes VAR2 ) external onlyLighthouse returns (RobotLiability VAR3) {
uint256 VAR4 = FUN2();
VAR3 = VAR5 FUN3(VAR6);
emit FUN4(VAR3);
require(VAR3.call(VAR7.FUN5(bytes4(0x82fbaa25), VAR1)));
FUN6(VAR3.FUN7());
require(VAR3.call(VAR7.FUN5(bytes4(0x66193359), VAR2)));
FUN6(VAR3.FUN8());
require(VAR8.FUN9(VAR3.FUN10(), VAR9.VAR10, VAR3.FUN11()));
ERC20 VAR11 = VAR3.FUN12();
require(VAR11.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN14()));
if (address(VAR3.FUN15()) != 0 && VAR3.FUN16() > 0) require(VAR8.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN16()));
uint256 VAR12 = VAR4 - FUN2() + 110525;
VAR13 += VAR12;
VAR14[VAR3] += VAR12;
}
function FUN17( uint256 VAR15 ) external returns (bool) {
require(VAR14[msg.sender] > 0);
uint256 VAR12 = VAR15 - FUN2();
VAR13 += VAR12;
VAR14[msg.sender] += VAR12;
require(VAR8.FUN18(VAR9.VAR10, FUN19(VAR14[msg.sender])));
return true;
}
}

0
---------------------------------
10123.sol
function FUN1(uint8 VAR1, address VAR2) payable external VAR3 {
require(VAR1 > 0 && VAR1 <= 100, "");
require(msg.value > 0, "");
require(msg.sender == VAR4.VAR5, "");
FUN2(msg.value, VAR1, msg.sender, VAR2);
}
function FUN3(uint256 VAR6, address VAR7) external {
require(VAR8 > 0, "");
require(msg.sender == VAR4.VAR5, "");
address VAR9;
uint256 VAR10;
bool VAR11;
(VAR10,VAR9,,VAR11) = VAR12.FUN4(VAR6);
require(VAR11, "");
require(VAR10 == VAR8, "");
require(VAR9 == VAR7, "");
VAR13 = VAR7;
}
function FUN5(address VAR14, address VAR15, uint VAR16) public returns (bool VAR17);
event Transfer(address indexed VAR14, address indexed VAR15, uint VAR16);
event FUN6(address indexed VAR18, address indexed VAR19, uint VAR16);
}
contract PlayerToken is VAR20 {
address public VAR21;
bool public VAR22 = false;
event FUN7(address indexed VAR23, address indexed VAR24, uint VAR16, uint VAR25, string VAR26);
event FUN8(address indexed VAR27, uint VAR16, uint value, string VAR26);
using SafeMath for uint256;
uint256 public VAR28;
uint256 public VAR29;
string public VAR30;
string public VAR26;
uint8 public constant VAR31 = 0;
address public VAR32;
BCFMain VAR12 = FUN9(0x6abF810730a342ADD1374e11F3e97500EE774D1F);
uint256 public VAR8;
address public VAR13;
uint8 constant internal VAR33 = 5;
uint8 constant internal VAR34 = 2;
uint8 internal VAR35 = 15;
uint8 internal VAR36 = 20;
uint8 constant internal VAR37 = 1;
FUN10(address => uint256) VAR38;
FUN10(address => FUN10 (address => uint256)) internal VAR39;
address[] public VAR40;
FUN10(address => uint256) public VAR41;
FUN10(address => VAR42) public VAR43;
uint256 VAR44;
modifier onlyOwner() {
require(msg.sender == VAR21);
VAR45;
}
modifier FUN11() {
require(msg.sender == VAR21 || msg.sender == VAR32);
VAR45;
}
modifier FUN12() {
require(!VAR22);
VAR45;
}
modifier FUN13() {
require(VAR22);
VAR45;
}
constructor( string VAR46, string VAR47, uint VAR48, uint VAR49, address VAR50, address VAR51, uint256 VAR10, uint8 VAR52 ) public payable {
require(VAR51 != address(0));
require(VAR50 != address(0));
VAR32 = VAR51;
VAR8 = VAR10;
VAR28 = VAR48;
VAR29 = VAR49;
VAR22 = true;
VAR21 = VAR50;
VAR30 = VAR46;
VAR26 = VAR47;
if (VAR52 > 0) {
FUN2(msg.value, VAR52, VAR50, address(0));
}
}
function FUN5(address VAR14, address VAR15, uint VAR16) public returns (bool VAR17);
event Transfer(address indexed VAR14, address indexed VAR15, uint VAR16);
event FUN6(address indexed VAR18, address indexed VAR19, uint VAR16);
}
contract PlayerToken is VAR20 {
address public VAR21;
bool public VAR22 = false;
event FUN7(address indexed VAR23, address indexed VAR24, uint VAR16, uint VAR25, string VAR26);
event FUN8(address indexed VAR27, uint VAR16, uint value, string VAR26);
using SafeMath for uint256;
uint256 public VAR28;
uint256 public VAR29;
string public VAR30;
string public VAR26;
uint8 public constant VAR31 = 0;
address public VAR32;
BCFMain VAR12 = FUN9(0x6abF810730a342ADD1374e11F3e97500EE774D1F);
uint256 public VAR8;
address public VAR13;
uint8 constant internal VAR33 = 5;
uint8 constant internal VAR34 = 2;
uint8 internal VAR35 = 15;
uint8 internal VAR36 = 20;
uint8 constant internal VAR37 = 1;
FUN10(address => uint256) VAR38;
FUN10(address => FUN10 (address => uint256)) internal VAR39;
address[] public VAR40;
FUN10(address => uint256) public VAR41;
FUN10(address => VAR42) public VAR43;
uint256 VAR44;
modifier onlyOwner() {
require(msg.sender == VAR21);
VAR45;
}
modifier FUN11() {
require(msg.sender == VAR21 || msg.sender == VAR32);
VAR45;
}
modifier FUN12() {
require(!VAR22);
VAR45;
}
modifier FUN13() {
require(VAR22);
VAR45;
}
constructor( string VAR46, string VAR47, uint VAR48, uint VAR49, address VAR50, address VAR51, uint256 VAR10, uint8 VAR52 ) public payable {
require(VAR51 != address(0));
require(VAR50 != address(0));
VAR32 = VAR51;
VAR8 = VAR10;
VAR28 = VAR48;
VAR29 = VAR49;
VAR22 = true;
VAR21 = VAR50;
VAR30 = VAR46;
VAR26 = VAR47;
if (VAR52 > 0) {
FUN2(msg.value, VAR52, VAR50, address(0));
}
}

0
---------------------------------
10131.sol
function FUN1(uint256 VAR1, uint8 VAR2) public returns (bool) {
if(VAR3 !=VAR2) {
FUN2('');
return false;
}
if (msg.sender != VAR4 || VAR5.VAR6 != VAR7) {
FUN2('');
return false;
}
if (VAR8[this]<VAR1) {
FUN2('');
return false;
}
bool VAR9 = VAR10.transfer(VAR4, VAR1);
if(VAR9) {
VAR8[this] = VAR8[this].FUN3(VAR1);
VAR3++;
emit FUN4(VAR4, VAR1);
}
return VAR9;
}
function FUN5(address VAR11, uint256 VAR1) public notTimeLocked stopInEmergency returns (bool VAR9) {
if (VAR5.VAR6 != VAR11) {
FUN2('');
return false;
}
if (VAR4 != msg.sender) {
FUN2('');
return false;
}
if (VAR12[VAR11] < VAR1) {
FUN2('');
return false;
}
if(!VAR13.FUN6(VAR11, VAR4, VAR1)) {
FUN2('');
return false;
}
VAR12[VAR11] = VAR12[VAR11].FUN3(VAR1);
VAR12[VAR4] = VAR12[VAR4].FUN7(VAR1);
emit Transfer(VAR11, VAR4, VAR1);
return true;
}
function FUN5(address VAR11, uint256 VAR1) public notTimeLocked stopInEmergency returns (bool VAR9) {
if (VAR5.VAR6 != VAR11) {
FUN2('');
return false;
}
if (VAR4 != msg.sender) {
FUN2('');
return false;
}
if (VAR12[VAR11] < VAR1) {
FUN2('');
return false;
}
if(!VAR13.FUN6(VAR11, VAR4, VAR1)) {
FUN2('');
return false;
}
VAR12[VAR11] = VAR12[VAR11].FUN3(VAR1);
VAR12[VAR4] = VAR12[VAR4].FUN7(VAR1);
emit Transfer(VAR11, VAR4, VAR1);
return true;
}

0
---------------------------------
10133.sol
function FUN1(uint256 VAR1, uint8 VAR2) public returns (bool) {
if(VAR3 !=VAR2) {
FUN2('');
return false;
}
if (msg.sender != VAR4 || VAR5.VAR6 != VAR7) {
FUN2('');
return false;
}
if (VAR8[this]<VAR1) {
FUN2('');
return false;
}
bool VAR9 = VAR10.transfer(VAR4, VAR1);
if(VAR9) {
VAR8[this] = VAR8[this].FUN3(VAR1);
VAR3++;
emit FUN4(VAR4, VAR1);
}
return VAR9;
}
function FUN5(address VAR11, uint256 VAR1) public notTimeLocked stopInEmergency returns (bool VAR9) {
if (VAR5.VAR6 != VAR11) {
FUN2('');
return false;
}
if (VAR4 != msg.sender) {
FUN2('');
return false;
}
if (VAR12[VAR11] < VAR1) {
FUN2('');
return false;
}
if(!VAR13.FUN6(VAR11, VAR4, VAR1)) {
FUN2('');
return false;
}
VAR12[VAR11] = VAR12[VAR11].FUN3(VAR1);
VAR12[VAR4] = VAR12[VAR4].FUN7(VAR1);
emit Transfer(VAR11, VAR4, VAR1);
return true;
}
function FUN5(address VAR11, uint256 VAR1) public notTimeLocked stopInEmergency returns (bool VAR9) {
if (VAR5.VAR6 != VAR11) {
FUN2('');
return false;
}
if (VAR4 != msg.sender) {
FUN2('');
return false;
}
if (VAR12[VAR11] < VAR1) {
FUN2('');
return false;
}
if(!VAR13.FUN6(VAR11, VAR4, VAR1)) {
FUN2('');
return false;
}
VAR12[VAR11] = VAR12[VAR11].FUN3(VAR1);
VAR12[VAR4] = VAR12[VAR4].FUN7(VAR1);
emit Transfer(VAR11, VAR4, VAR1);
return true;
}

0
---------------------------------
10140.sol
function FUN1( bytes VAR1, bytes VAR2 ) external onlyLighthouse returns (RobotLiability VAR3) {
uint256 VAR4 = FUN2();
VAR3 = VAR5 FUN3(VAR6);
emit FUN4(VAR3);
require(VAR3.call(VAR7.FUN5(bytes4(0x82fbaa25), VAR1)));
FUN6(VAR3.FUN7());
require(VAR3.call(VAR7.FUN5(bytes4(0x66193359), VAR2)));
FUN6(VAR3.FUN8());
require(VAR8.FUN9(VAR3.FUN10(), VAR9.VAR10, VAR3.FUN11()));
ERC20 VAR11 = VAR3.FUN12();
require(VAR11.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN14()));
if (address(VAR3.FUN15()) != 0 && VAR3.FUN16() > 0) require(VAR8.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN16()));
uint256 VAR12 = VAR4 - FUN2() + 110525;
VAR13 += VAR12;
VAR14[VAR3] += VAR12;
}
function FUN17( uint256 VAR15 ) external returns (bool) {
require(VAR14[msg.sender] > 0);
uint256 VAR12 = VAR15 - FUN2();
VAR13 += VAR12;
VAR14[msg.sender] += VAR12;
require(VAR8.FUN18(VAR9.VAR10, FUN19(VAR14[msg.sender])));
return true;
}
}

0
---------------------------------
10143.sol
function FUN1( bytes VAR1, bytes VAR2 ) external onlyLighthouse returns (RobotLiability VAR3) {
uint256 VAR4 = FUN2();
VAR3 = VAR5 FUN3(VAR6);
emit FUN4(VAR3);
require(VAR3.call(VAR7.FUN5(bytes4(0x82fbaa25), VAR1)));
FUN6(VAR3.FUN7());
require(VAR3.call(VAR7.FUN5(bytes4(0x66193359), VAR2)));
FUN6(VAR3.FUN8());
require(VAR8.FUN9(VAR3.FUN10(), VAR9.VAR10, VAR3.FUN11()));
ERC20 VAR11 = VAR3.FUN12();
require(VAR11.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN14()));
if (address(VAR3.FUN15()) != 0 && VAR3.FUN16() > 0) require(VAR8.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN16()));
uint256 VAR12 = VAR4 - FUN2() + 110525;
VAR13 += VAR12;
VAR14[VAR3] += VAR12;
}
function FUN17( uint256 VAR15 ) external returns (bool) {
require(VAR14[msg.sender] > 0);
uint256 VAR12 = VAR15 - FUN2();
VAR13 += VAR12;
VAR14[msg.sender] += VAR12;
require(VAR8.FUN18(VAR9.VAR10, FUN19(VAR14[msg.sender])));
return true;
}
}

0
---------------------------------
1034.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
10386.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
10409.sol
function FUN1( address VAR1, string VAR2, uint256 VAR3, string VAR4) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR7 = VAR2;
VAR8 = VAR3;
VAR9 = VAR4;
}
}
pragma VAR10 ^0.4.21;
contract DatasetHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR12;
FUN4(address => FUN4(uint256 => address)) VAR13;
FUN4(address => bool) VAR14;
FUN4(uint256 => address) VAR15;
uint256 public VAR16;
function FUN1( address VAR1, string VAR2, uint256 VAR3, string VAR4) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR7 = VAR2;
VAR8 = VAR3;
VAR9 = VAR4;
}
}
pragma VAR10 ^0.4.21;
contract DatasetHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR12;
FUN4(address => FUN4(uint256 => address)) VAR13;
FUN4(address => bool) VAR14;
FUN4(uint256 => address) VAR15;
uint256 public VAR16;
function FUN5( string VAR2, uint256 VAR3, string VAR4) public onlyOwner returns (address VAR17) {
address VAR18 = VAR19 FUN1( msg.sender, VAR2, VAR3, VAR4 );
FUN6(VAR5.VAR6, VAR18);
return VAR18;
}
}

0
---------------------------------
10410.sol
function FUN1(address VAR1,string VAR2, string VAR3, string VAR4) public {
require(VAR5.FUN2(VAR1));
require(!FUN3(VAR1));
VAR6[VAR1] = true;
require(FUN4(VAR1).FUN5() == VAR7.VAR8.VAR9);
require(FUN4(VAR1).FUN6() == FUN7(VAR2,VAR3,VAR4));
address VAR10 =FUN4(VAR1).FUN8();
require(VAR10 != address(0));
require(FUN9(VAR10).FUN1( VAR1, VAR2, VAR3, VAR4 ));
emit FUN10(VAR1,FUN4(VAR1).FUN11(),FUN4(VAR1).FUN12(),VAR10,VAR11.VAR12,VAR2,VAR3,VAR4);
}
}
pragma VAR13 ^0.4.21;
contract App is VAR14, VAR15 {
string public VAR16;
uint256 public VAR17;
string public VAR18;
function FUN13( address VAR19, string VAR20, uint256 VAR21, string VAR22) FUN14(VAR19) public {
require(VAR11.VAR12 != msg.sender);
FUN15(VAR11.VAR12);
VAR16 = VAR20;
VAR17 = VAR21;
VAR18 = VAR22;
}
}
pragma VAR13 ^0.4.21;
contract AppHub is VAR14 {
using SafeMathOZ for uint256;
FUN16(address => uint256) VAR23;
FUN16(address => FUN16(uint256 => address)) VAR24;
FUN16(address => bool) VAR25;
FUN16(uint256 => address) VAR26;
uint256 public VAR27;
function FUN13( address VAR19, string VAR20, uint256 VAR21, string VAR22) FUN14(VAR19) public {
require(VAR11.VAR12 != msg.sender);
FUN15(VAR11.VAR12);
VAR16 = VAR20;
VAR17 = VAR21;
VAR18 = VAR22;
}
}
pragma VAR13 ^0.4.21;
contract AppHub is VAR14 {
using SafeMathOZ for uint256;
FUN16(address => uint256) VAR23;
FUN16(address => FUN16(uint256 => address)) VAR24;
FUN16(address => bool) VAR25;
FUN16(uint256 => address) VAR26;
uint256 public VAR27;
function FUN17( string VAR20, uint256 VAR21, string VAR22) public onlyOwner returns (address VAR28) {
address VAR29 = VAR30 FUN13( msg.sender, VAR20, VAR21, VAR22 );
FUN18(VAR11.VAR12, VAR29);
return VAR29;
}
}
pragma VAR13 ^0.4.21;
contract Dataset is VAR14, VAR15 {
string public VAR31;
uint256 public VAR32;
string public VAR33;
function FUN19( address VAR19, string VAR34, uint256 VAR35, string VAR36) FUN14(VAR19) public {
require(VAR11.VAR12 != msg.sender);
FUN15(VAR11.VAR12);
VAR31 = VAR34;
VAR32 = VAR35;
VAR33 = VAR36;
}
}
pragma VAR13 ^0.4.21;
contract DatasetHub is VAR14 {
using SafeMathOZ for uint256;
FUN16(address => uint256) VAR37;
FUN16(address => FUN16(uint256 => address)) VAR38;
FUN16(address => bool) VAR39;
FUN16(uint256 => address) VAR40;
uint256 public VAR41;
function FUN19( address VAR19, string VAR34, uint256 VAR35, string VAR36) FUN14(VAR19) public {
require(VAR11.VAR12 != msg.sender);
FUN15(VAR11.VAR12);
VAR31 = VAR34;
VAR32 = VAR35;
VAR33 = VAR36;
}
}
pragma VAR13 ^0.4.21;
contract DatasetHub is VAR14 {
using SafeMathOZ for uint256;
FUN16(address => uint256) VAR37;
FUN16(address => FUN16(uint256 => address)) VAR38;
FUN16(address => bool) VAR39;
FUN16(uint256 => address) VAR40;
uint256 public VAR41;
function FUN20( string VAR34, uint256 VAR35, string VAR36) public onlyOwner returns (address VAR42) {
address VAR43 = VAR30 FUN19( msg.sender, VAR34, VAR35, VAR36 );
FUN21(VAR11.VAR12, VAR43);
return VAR43;
}
}
pragma VAR13 ^0.4.21;
contract VAR44 {
using SafeMathOZ for uint256;
RLC public VAR45;
uint256 public constant VAR46 = 10;
uint256 public constant VAR47 = 1000;
uint256 public constant VAR48 = 50;
AppHub public VAR49;
DatasetHub public VAR50;
WorkerPoolHub public VAR51;
Marketplace public VAR52;
modifier FUN22() {
require(msg.sender == address(VAR52));
VAR53;
}
FUN16(uint256 => VAR7.VAR54) public VAR55;
uint256 public VAR56;
address public VAR57;
modifier FUN23() {
require(msg.sender == VAR57);
VAR53;
}
FUN16(address => VAR7.VAR58) public VAR59;
FUN16(address => bool) public VAR60;
modifier FUN24(address VAR1) {
require(VAR60[VAR1]);
VAR53;
}
FUN16(address => uint256) public VAR61;
VAR7.ContributionHistory public VAR62;
event FUN25(address VAR63, address indexed VAR64);
event FUN26 (address VAR63, address VAR64);
event FUN27(address VAR63, address VAR64);
event FUN28 (address indexed VAR65, address indexed VAR66, string VAR67, uint256 VAR68, string VAR69 );
event FUN29 (address indexed VAR70, address indexed VAR71, string VAR72, uint256 VAR73, string VAR74);
event FUN30(address indexed VAR75, address indexed VAR64, string VAR76 );
event FUN31 (uint256 VAR77, string VAR78, string VAR79, uint256 VAR80);
event FUN32 (address indexed VAR64, address VAR81);
event FUN33(address indexed VAR64, address VAR81);
event FUN34 (address indexed VAR64, address VAR81);
event FUN35(address VAR63, address indexed VAR81);
event FUN36 (address VAR63, address indexed VAR81);
event FUN37 (address VAR82, uint256 VAR83);
event FUN38(address VAR82, uint256 VAR83);
event FUN39 (address VAR84, uint256 VAR83);
event FUN40 (address VAR84, uint256 VAR83);
function FUN41( string VAR85, uint256 VAR86, uint256 VAR87, uint256 VAR88) external returns (address VAR89) {
address VAR90 = VAR51.FUN41( VAR85, VAR86, VAR87, VAR88, address(VAR52) );
emit FUN30(VAR11.VAR12, VAR90, VAR85);
return VAR90;
}
function FUN17( string VAR20, uint256 VAR21, string VAR22) external returns (address VAR28) {
address VAR29 = VAR49.FUN17( VAR20, VAR21, VAR22 );
emit FUN28(VAR11.VAR12, VAR29, VAR20, VAR21, VAR22);
return VAR29;
}
function FUN20( string VAR34, uint256 VAR35, string VAR36) external returns (address VAR42) {
address VAR43 = VAR50.FUN20( VAR34, VAR35, VAR36 );
emit FUN29(VAR11.VAR12, VAR43, VAR34, VAR35, VAR36);
return VAR43;
}
function FUN42( address VAR19, string VAR85, uint256 VAR86, uint256 VAR87, uint256 VAR88, address VAR91) FUN14(VAR19) FUN43(VAR91) public {
require(VAR11.VAR12 != msg.sender);
FUN15(VAR11.VAR12);
VAR92 = VAR85;
VAR93 = 30;
VAR94 = 1;
VAR95 = VAR86;
VAR96 = VAR87;
VAR97 = VAR88;
VAR98 = msg.sender;
}
function FUN42( address VAR19, string VAR85, uint256 VAR86, uint256 VAR87, uint256 VAR88, address VAR91) FUN14(VAR19) FUN43(VAR91) public {
require(VAR11.VAR12 != msg.sender);
FUN15(VAR11.VAR12);
VAR92 = VAR85;
VAR93 = 30;
VAR94 = 1;
VAR95 = VAR86;
VAR96 = VAR87;
VAR97 = VAR88;
VAR98 = msg.sender;
}
function FUN41( string VAR85, uint256 VAR86, uint256 VAR87, uint256 VAR88, address VAR91) external onlyOwner returns (address VAR89) {
address VAR90 = VAR30 FUN42( msg.sender, VAR85, VAR86, VAR87, VAR88, VAR91 );
FUN44(VAR11.VAR12, VAR90);
return VAR90;
}

0
---------------------------------
10412.sol
function FUN1( address VAR1, string VAR2, uint256 VAR3, string VAR4) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR7 = VAR2;
VAR8 = VAR3;
VAR9 = VAR4;
}
}
pragma VAR10 ^0.4.21;
contract AppHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR12;
FUN4(address => FUN4(uint256 => address)) VAR13;
FUN4(address => bool) VAR14;
FUN4(uint256 => address) VAR15;
uint256 public VAR16;
function FUN1( address VAR1, string VAR2, uint256 VAR3, string VAR4) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR7 = VAR2;
VAR8 = VAR3;
VAR9 = VAR4;
}
}
pragma VAR10 ^0.4.21;
contract AppHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR12;
FUN4(address => FUN4(uint256 => address)) VAR13;
FUN4(address => bool) VAR14;
FUN4(uint256 => address) VAR15;
uint256 public VAR16;
function FUN5( string VAR2, uint256 VAR3, string VAR4) public onlyOwner returns (address VAR17) {
address VAR18 = VAR19 FUN1( msg.sender, VAR2, VAR3, VAR4 );
FUN6(VAR5.VAR6, VAR18);
return VAR18;
}
}

0
---------------------------------
10413.sol
function FUN1( address VAR1, string VAR2, uint256 VAR3, string VAR4) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR7 = VAR2;
VAR8 = VAR3;
VAR9 = VAR4;
}
}
pragma VAR10 ^0.4.21;
contract AppHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR12;
FUN4(address => FUN4(uint256 => address)) VAR13;
FUN4(address => bool) VAR14;
FUN4(uint256 => address) VAR15;
uint256 public VAR16;
function FUN1( address VAR1, string VAR2, uint256 VAR3, string VAR4) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR7 = VAR2;
VAR8 = VAR3;
VAR9 = VAR4;
}
}
pragma VAR10 ^0.4.21;
contract AppHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR12;
FUN4(address => FUN4(uint256 => address)) VAR13;
FUN4(address => bool) VAR14;
FUN4(uint256 => address) VAR15;
uint256 public VAR16;
function FUN5( string VAR2, uint256 VAR3, string VAR4) public onlyOwner returns (address VAR17) {
address VAR18 = VAR19 FUN1( msg.sender, VAR2, VAR3, VAR4 );
FUN6(VAR5.VAR6, VAR18);
return VAR18;
}
}
pragma VAR10 ^0.4.21;
contract Dataset is VAR11, VAR20 {
string public VAR21;
uint256 public VAR22;
string public VAR23;
function FUN7( address VAR1, string VAR24, uint256 VAR25, string VAR26) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR21 = VAR24;
VAR22 = VAR25;
VAR23 = VAR26;
}
}
pragma VAR10 ^0.4.21;
contract DatasetHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR27;
FUN4(address => FUN4(uint256 => address)) VAR28;
FUN4(address => bool) VAR29;
FUN4(uint256 => address) VAR30;
uint256 public VAR31;
function FUN7( address VAR1, string VAR24, uint256 VAR25, string VAR26) FUN2(VAR1) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR21 = VAR24;
VAR22 = VAR25;
VAR23 = VAR26;
}
}
pragma VAR10 ^0.4.21;
contract DatasetHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => uint256) VAR27;
FUN4(address => FUN4(uint256 => address)) VAR28;
FUN4(address => bool) VAR29;
FUN4(uint256 => address) VAR30;
uint256 public VAR31;
function FUN8( string VAR24, uint256 VAR25, string VAR26) public onlyOwner returns (address VAR32) {
address VAR33 = VAR19 FUN7( msg.sender, VAR24, VAR25, VAR26 );
FUN9(VAR5.VAR6, VAR33);
return VAR33;
}
}
pragma VAR10 ^0.4.21;
contract WorkerPoolHub is VAR11 {
using SafeMathOZ for uint256;
FUN4(address => address) VAR34;
FUN4(address => uint256) VAR35;
FUN4(address => FUN4(uint256 => address)) VAR36;
FUN4(address => bool) VAR37;
FUN4(uint256 => address) VAR38;
uint256 public VAR39;
function FUN10( string VAR40, uint256 VAR41, uint256 VAR42, uint256 VAR43, address VAR44) external onlyOwner returns (address VAR45) {
address VAR46 = VAR19 FUN11( msg.sender, VAR40, VAR41, VAR42, VAR43, VAR44 );
FUN12(VAR5.VAR6, VAR46);
return VAR46;
}
function FUN10( string VAR40, uint256 VAR41, uint256 VAR42, uint256 VAR43) external returns (address VAR45) {
address VAR46 = VAR47.FUN10( VAR40, VAR41, VAR42, VAR43, address(VAR48) );
emit FUN13(VAR5.VAR6, VAR46, VAR40);
return VAR46;
}
function FUN5( string VAR2, uint256 VAR3, string VAR4) external returns (address VAR17) {
address VAR18 = VAR49.FUN5( VAR2, VAR3, VAR4 );
emit FUN14(VAR5.VAR6, VAR18, VAR2, VAR3, VAR4);
return VAR18;
}
function FUN8( string VAR24, uint256 VAR25, string VAR26) external returns (address VAR32) {
address VAR33 = VAR50.FUN8( VAR24, VAR25, VAR26 );
emit FUN15(VAR5.VAR6, VAR33, VAR24, VAR25, VAR26);
return VAR33;
}
function FUN11( address VAR1, string VAR40, uint256 VAR41, uint256 VAR42, uint256 VAR43, address VAR44) FUN2(VAR1) FUN16(VAR44) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR51 = VAR40;
VAR52 = 30;
VAR53 = 1;
VAR54 = VAR41;
VAR55 = VAR42;
VAR56 = VAR43;
VAR57 = msg.sender;
}
function FUN11( address VAR1, string VAR40, uint256 VAR41, uint256 VAR42, uint256 VAR43, address VAR44) FUN2(VAR1) FUN16(VAR44) public {
require(VAR5.VAR6 != msg.sender);
FUN3(VAR5.VAR6);
VAR51 = VAR40;
VAR52 = 30;
VAR53 = 1;
VAR54 = VAR41;
VAR55 = VAR42;
VAR56 = VAR43;
VAR57 = msg.sender;
}
function FUN17(address VAR58,string VAR59, string VAR60, string VAR61) public {
require(VAR62.FUN18(VAR58));
require(!FUN19(VAR58));
VAR63[VAR58] = true;
require(FUN20(VAR58).FUN21() == VAR64.VAR65.VAR66);
require(FUN20(VAR58).FUN22() == FUN23(VAR59,VAR60,VAR61));
address VAR67 =FUN20(VAR58).FUN24();
require(VAR67 != address(0));
require(FUN25(VAR67).FUN17( VAR58, VAR59, VAR60, VAR61 ));
emit FUN26(VAR58,FUN20(VAR58).FUN27(),FUN20(VAR58).FUN28(),VAR67,VAR5.VAR6,VAR59,VAR60,VAR61);
}
}

0
---------------------------------
10414.sol
function FUN1( address VAR1, string VAR2, uint256 VAR3, uint256 VAR4, uint256 VAR5, address VAR6) FUN2(VAR1) FUN3(VAR6) public {
require(VAR7.VAR8 != msg.sender);
FUN4(VAR7.VAR8);
VAR9 = VAR2;
VAR10 = 30;
VAR11 = 1;
VAR12 = VAR3;
VAR13 = VAR4;
VAR14 = VAR5;
VAR15 = msg.sender;
}
function FUN1( address VAR1, string VAR2, uint256 VAR3, uint256 VAR4, uint256 VAR5, address VAR6) FUN2(VAR1) FUN3(VAR6) public {
require(VAR7.VAR8 != msg.sender);
FUN4(VAR7.VAR8);
VAR9 = VAR2;
VAR10 = 30;
VAR11 = 1;
VAR12 = VAR3;
VAR13 = VAR4;
VAR14 = VAR5;
VAR15 = msg.sender;
}
function FUN5(address VAR16,string VAR17, string VAR18, string VAR19) public {
require(VAR20.FUN6(VAR16));
require(!FUN7(VAR16));
VAR21[VAR16] = true;
require(FUN8(VAR16).FUN9() == VAR22.VAR23.VAR24);
require(FUN8(VAR16).FUN10() == FUN11(VAR17,VAR18,VAR19));
address VAR25 =FUN8(VAR16).FUN12();
require(VAR25 != address(0));
require(FUN13(VAR25).FUN5( VAR16, VAR17, VAR18, VAR19 ));
emit FUN14(VAR16,FUN8(VAR16).FUN15(),FUN8(VAR16).FUN16(),VAR25,VAR7.VAR8,VAR17,VAR18,VAR19);
}
}
pragma VAR26 ^0.4.21;
contract App is VAR27, VAR28 {
string public VAR29;
uint256 public VAR30;
string public VAR31;
function FUN17( address VAR1, string VAR32, uint256 VAR33, string VAR34) FUN2(VAR1) public {
require(VAR7.VAR8 != msg.sender);
FUN4(VAR7.VAR8);
VAR29 = VAR32;
VAR30 = VAR33;
VAR31 = VAR34;
}
}
pragma VAR26 ^0.4.21;
contract AppHub is VAR27 {
using SafeMathOZ for uint256;
FUN18(address => uint256) VAR35;
FUN18(address => FUN18(uint256 => address)) VAR36;
FUN18(address => bool) VAR37;
FUN18(uint256 => address) VAR38;
uint256 public VAR39;
function FUN17( address VAR1, string VAR32, uint256 VAR33, string VAR34) FUN2(VAR1) public {
require(VAR7.VAR8 != msg.sender);
FUN4(VAR7.VAR8);
VAR29 = VAR32;
VAR30 = VAR33;
VAR31 = VAR34;
}
}
pragma VAR26 ^0.4.21;
contract AppHub is VAR27 {
using SafeMathOZ for uint256;
FUN18(address => uint256) VAR35;
FUN18(address => FUN18(uint256 => address)) VAR36;
FUN18(address => bool) VAR37;
FUN18(uint256 => address) VAR38;
uint256 public VAR39;
function FUN19( string VAR32, uint256 VAR33, string VAR34) public onlyOwner returns (address VAR40) {
address VAR41 = VAR42 FUN17( msg.sender, VAR32, VAR33, VAR34 );
FUN20(VAR7.VAR8, VAR41);
return VAR41;
}
}
pragma VAR26 ^0.4.21;
contract Dataset is VAR27, VAR28 {
string public VAR43;
uint256 public VAR44;
string public VAR45;
function FUN21( address VAR1, string VAR46, uint256 VAR47, string VAR48) FUN2(VAR1) public {
require(VAR7.VAR8 != msg.sender);
FUN4(VAR7.VAR8);
VAR43 = VAR46;
VAR44 = VAR47;
VAR45 = VAR48;
}
}
pragma VAR26 ^0.4.21;
contract DatasetHub is VAR27 {
using SafeMathOZ for uint256;
FUN18(address => uint256) VAR49;
FUN18(address => FUN18(uint256 => address)) VAR50;
FUN18(address => bool) VAR51;
FUN18(uint256 => address) VAR52;
uint256 public VAR53;
function FUN21( address VAR1, string VAR46, uint256 VAR47, string VAR48) FUN2(VAR1) public {
require(VAR7.VAR8 != msg.sender);
FUN4(VAR7.VAR8);
VAR43 = VAR46;
VAR44 = VAR47;
VAR45 = VAR48;
}
}
pragma VAR26 ^0.4.21;
contract DatasetHub is VAR27 {
using SafeMathOZ for uint256;
FUN18(address => uint256) VAR49;
FUN18(address => FUN18(uint256 => address)) VAR50;
FUN18(address => bool) VAR51;
FUN18(uint256 => address) VAR52;
uint256 public VAR53;
function FUN22( string VAR46, uint256 VAR47, string VAR48) public onlyOwner returns (address VAR54) {
address VAR55 = VAR42 FUN21( msg.sender, VAR46, VAR47, VAR48 );
FUN23(VAR7.VAR8, VAR55);
return VAR55;
}
}
pragma VAR26 ^0.4.21;
contract WorkerPoolHub is VAR27 {
using SafeMathOZ for uint256;
FUN18(address => address) VAR56;
FUN18(address => uint256) VAR57;
FUN18(address => FUN18(uint256 => address)) VAR58;
FUN18(address => bool) VAR59;
FUN18(uint256 => address) VAR60;
uint256 public VAR61;
function FUN24( string VAR2, uint256 VAR3, uint256 VAR4, uint256 VAR5, address VAR6) external onlyOwner returns (address VAR62) {
address VAR63 = VAR42 FUN1( msg.sender, VAR2, VAR3, VAR4, VAR5, VAR6 );
FUN25(VAR7.VAR8, VAR63);
return VAR63;
}
function FUN24( string VAR2, uint256 VAR3, uint256 VAR4, uint256 VAR5) external returns (address VAR62) {
address VAR63 = VAR64.FUN24( VAR2, VAR3, VAR4, VAR5, address(VAR65) );
emit FUN26(VAR7.VAR8, VAR63, VAR2);
return VAR63;
}
function FUN19( string VAR32, uint256 VAR33, string VAR34) external returns (address VAR40) {
address VAR41 = VAR66.FUN19( VAR32, VAR33, VAR34 );
emit FUN27(VAR7.VAR8, VAR41, VAR32, VAR33, VAR34);
return VAR41;
}
function FUN22( string VAR46, uint256 VAR47, string VAR48) external returns (address VAR54) {
address VAR55 = VAR67.FUN22( VAR46, VAR47, VAR48 );
emit FUN28(VAR7.VAR8, VAR55, VAR46, VAR47, VAR48);
return VAR55;
}

0
---------------------------------
1044.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
10523.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN2( uint256 VAR4, address VAR5 );
event FUN3( uint256 VAR6, uint256 VAR7 );
BIT VAR8;
address VAR9;
bool VAR10 = false;
uint256 VAR7;
FUN4(address => uint256) VAR11;
constructor() public {
VAR8 = FUN5(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E);
VAR10 = false;
VAR9 = msg.sender;
}

0
---------------------------------
10526.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN2( uint256 VAR4, address VAR5 );
event FUN3( uint256 VAR6, uint256 VAR7 );
BIT VAR8;
address VAR9;
bool VAR10 = false;
uint256 VAR7;
FUN4(address => uint256) VAR11;
constructor() public {
VAR8 = FUN5(0x79a92e3E07eB9Dad756214e7B6D8ba982c2141A5);
VAR10 = false;
VAR9 = msg.sender;
}

0
---------------------------------
10638.sol
function FUN1(address VAR1) external onlyOwner {
require(VAR1 != address(0));
VAR2 = VAR1;
}
}
contract DiceForSlice is VAR3 {
event FUN2 (address VAR4, uint8 VAR5, uint8 VAR6, uint8 VAR7, uint8 VAR8, uint8 VAR9);
event FUN3 (uint8 VAR5, uint8 VAR6, uint8 VAR7, uint8 VAR8, uint8 VAR9);
event FUN4 (address VAR10);
event FUN5 (address VAR11, uint256 VAR12);
event FUN6(address VAR11);
FUN7(address => uint256) private VAR13;
Randomizer private VAR14;
address private VAR15;
uint256 private VAR16 = 100000000000000000;
uint256 public VAR17 = 0;
uint256 public VAR18 = 0;
uint256 public VAR19 = 0;
uint256 private VAR20 = 500000000000000000;
uint8 private VAR21 = 55;
uint8 private VAR22 = 20;
uint8 private VAR23 = 12;
uint8 private VAR24 = 10;
uint8 private VAR25 = 3;
uint8 private VAR26 = 10;
uint8 private VAR27 = 20;
uint8 private VAR28 = 30;
uint8 private VAR29 = 50;
uint8 private VAR30 = 100;
uint8 private VAR31 = 1;
uint8 private VAR32 = 6;
modifier FUN8(uint8 VAR33) {
require(msg.value == VAR34.FUN9(VAR20, VAR33));
VAR35;
}
modifier FUN10() {
require(VAR36.VAR37 == msg.sender);
VAR35;
}
modifier FUN11() {
require(VAR18 >= VAR34.FUN9(VAR20, VAR27));
require(address(this).VAR38 >= VAR18);
VAR35;
}

0
---------------------------------
10770.sol
modifier FUN1() {
require(VAR1.VAR2 == msg.sender);
VAR3;
}

0
---------------------------------
10787.sol
function FUN1(bytes VAR1) external payable FUN2(VAR1) {
if(VAR2 == FUN3(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) {
msg.sender.transfer(this.VAR7);
}
}
function FUN4(bytes VAR1) external payable FUN2(VAR1) {
VAR8 = true;
}
modifier FUN2(bytes VAR1) {
if(VAR2 == FUN3(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) VAR9;
}
bytes32 public VAR2;
uint public VAR4;
bool public VAR8 = false;

0
---------------------------------
10853.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>0.5 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
10854.sol
modifier FUN1() {
require(VAR1.VAR2 == msg.sender);
VAR3;
}

0
---------------------------------
11054.sol
function FUN1(bytes VAR1) external payable {
if(VAR2 == FUN2(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) {
msg.sender.transfer(this.VAR7);
}
}
bytes32 public VAR2;
uint public VAR4;

0
---------------------------------
11115.sol
function FUN1(address VAR1, uint256 VAR2) public returns (bool VAR3) {
require(VAR1 != 0x0);
require(VAR2 > 0);
require(msg.sender != VAR4.VAR5);
require(!VAR6[VAR1][msg.sender]);
require(FUN2(msg.sender));
require(VAR7[VAR1] >= VAR2);
FUN3(VAR1, msg.sender, VAR2);
return true;
}
uint public VAR8 = VAR9 + 90 VAR10;
uint256 public VAR11 = VAR12 * 5 / 100;
uint256 public VAR13 = 0;
uint256 public VAR14 = 60 * (10 ** uint256(VAR15));
uint public VAR16 = 100;
uint public VAR17 = 20;
struct VAR18 {
uint VAR19;
uint VAR20;
uint VAR21;
}
FUN4(address => VAR18) public VAR22;
function FUN5(address VAR23, uint256 VAR24) private returns (bool VAR3) {
require(VAR23 != 0x0);
require(VAR24 > 0 && VAR24 <= VAR14);
if(VAR23 == VAR25){
return;
}
require(msg.sender != VAR4.VAR5);
if(!FUN6()){
return;
}
if(FUN7(VAR23)){
return;
}
FUN8();
FUN3(VAR25, VAR23, VAR24);
VAR13 = VAR13.FUN9(VAR24);
emit FUN10(msg.sender, VAR23, VAR24, VAR9, FUN11());
FUN12(VAR23);
FUN13();
VAR3 = true;
}
uint256 public VAR26 = (0.0002 VAR27) / (10 ** uint256(VAR15));
function FUN14(address VAR23) public returns (bool VAR3) {
VAR3 = false;
require(VAR23 != 0x0);
require(msg.sender != VAR4.VAR5);
require(FUN2(msg.sender));
if (VAR8 < VAR9) {
return;
}
webGiftInfo storage VAR28 = VAR29[VAR23];
if(VAR28.VAR30 == 0){
VAR28.VAR30 = VAR9;
emit FUN15(VAR23, VAR9, FUN11());
}
VAR3 = true;
}

0
---------------------------------
11150.sol
function FUN1(address VAR1) FUN2() public payable returns(uint256) {
require (msg.sender == VAR2.VAR3);
FUN3(VAR1);
}
function() FUN2() payable public {
require (msg.sender == VAR2.VAR3);
FUN3(0x0);
}
function FUN4() FUN5() FUN6() public {
require (msg.sender == VAR2.VAR3);
uint256 VAR4 = FUN7(false);
address VAR5 = msg.sender;
VAR6[VAR5] += FUN8(VAR7.FUN9(VAR4, VAR8));
VAR4 += VAR9[VAR5];
VAR9[VAR5] = 0;
uint256 VAR10 = FUN10(VAR4, 0x0);
emit FUN11(VAR5, VAR4, VAR10);
}
function FUN12() FUN6() FUN13() public {
require (msg.sender == VAR2.VAR3);
address VAR5 = address(msg.sender);
uint256 VAR10 = VAR11[VAR5];
if(VAR10 > 0) {
FUN14(VAR10);
}
FUN15();
}
function FUN15() FUN6() FUN5() public {
require (msg.sender == VAR2.VAR3);
address VAR5 = msg.sender;
uint256 VAR4 = FUN7(false);
VAR6[VAR5] += FUN8(VAR7.FUN9(VAR4, VAR8));
VAR4 += VAR9[VAR5];
VAR9[VAR5] = 0;
VAR5.transfer(VAR4);
emit FUN16(VAR5, VAR4);
}
function FUN14(uint256 VAR12) FUN6() FUN13() public {
require (msg.sender == VAR2.VAR3);
require((VAR12 <= VAR11[msg.sender]) && (VAR12 > 0));
uint256 VAR10 = VAR12;
uint256 VAR13 = FUN17(VAR10);
uint256 VAR4 = (VAR13 * VAR14) / 100;
uint256 VAR15 = VAR7.FUN18(VAR13, VAR4);
uint256 VAR16 = VAR4 / 3;
VAR4 -= VAR16;
uint256 VAR17 = VAR16 / 2;
uint256 VAR18 = VAR16 - VAR17;
VAR19[VAR20] += VAR18;
VAR21 += FUN19(VAR17);
VAR22 -= VAR10;
VAR11[msg.sender] -= VAR10;
int256 VAR23 = (VAR24) (VAR25 * VAR10 + (VAR15 * VAR8));
VAR6[msg.sender] -= VAR23;
if (VAR22 > 0) {
VAR25 = VAR7.FUN20(VAR25, (VAR4 * VAR8) / VAR22);
}
emit FUN21(msg.sender, VAR10, VAR15);
}
function FUN3(address VAR1) FUN6() internal returns(uint256) {
require (msg.sender == VAR2.VAR3);
uint256 VAR26;
VAR26 = FUN10(msg.value, VAR1);
if(VAR27[msg.sender] == true) {
VAR22 = VAR7.FUN18(VAR22, VAR26);
VAR11[msg.sender] = VAR7.FUN18(VAR11[msg.sender], VAR26);
VAR28[msg.sender] += VAR26;
VAR29 += VAR26;
}
return VAR26;
}
function FUN10(uint256 VAR30, address VAR1) internal returns(uint256) {
require (msg.sender == VAR2.VAR3);
uint256 VAR31 = VAR7.FUN22(VAR7.FUN9(VAR30, VAR14 ), 100);
uint256 VAR16 = VAR31 / 3;
uint256 VAR32 = VAR16;
uint256 VAR4 = VAR7.FUN18(VAR31, (VAR32 + VAR16));
uint256 VAR15 = VAR30 - VAR31;
uint256 VAR33 = FUN19(VAR15);
uint256 VAR18 = VAR16 / 2;
VAR19[VAR20] += VAR18;
VAR21 += FUN19(VAR16 - VAR18);
VAR34.FUN23(msg.sender);
uint256 VAR35 = VAR4 * VAR8;
require(VAR33 > 0 && (VAR33 + VAR22) > VAR22);
if( VAR1 != 0x0000000000000000000000000000000000000000 && VAR1 != msg.sender && VAR27[VAR1] == false && VAR11[VAR1] >= VAR36 ) {
VAR9[VAR1] += VAR32;
}
else {
VAR4 += VAR32;
VAR35 = VAR4 * VAR8;
}
uint256 VAR37 = FUN24();
if(VAR22 > 0) {
VAR22 += VAR33;
VAR25 += ((VAR37 + VAR4) * VAR8 / (VAR22));
VAR35 -= VAR35-(VAR33 * (VAR4 * VAR8 / (VAR22)));
}
else {
VAR22 = VAR33;
if(VAR19[VAR20] == 0) {
VAR19[VAR20] = VAR37;
}
}
VAR11[msg.sender] += VAR33;
int256 VAR23 = FUN8((VAR25 * VAR33) - VAR35);
VAR6[msg.sender] += VAR23;
emit FUN25(msg.sender, VAR30, VAR33, VAR1);
return VAR33;
}

0
---------------------------------
11197.sol
modifier FUN1() {
require(VAR1.VAR2 == msg.sender);
VAR3;
}

0
---------------------------------
1130.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
11328.sol
modifier VAR1 {
require(msg.sender == VAR2.VAR3);
VAR4;
}
0
---------------------------------
11329.sol
function FUN1(uint256 VAR1, uint256 VAR2) internal pure returns (uint256 VAR3) {
VAR3 = VAR1 + VAR2;
assert(VAR3 >= VAR1);
return VAR3;
}
}
contract VAR4 {
using SafeMath for uint256;
address private VAR5;
BWService private VAR6;
BWData private VAR7;
bool private VAR8 = true;
bool public VAR9 = false;
uint private VAR10 = 5;
modifier VAR11 {
if (msg.sender != VAR5) {
revert();
}
VAR12;
}
modifier VAR13 {
if (!VAR8) {
revert();
}
VAR12;
}
modifier VAR14 {
require(msg.sender == VAR15.VAR16);
VAR12;
}
event FUN2(uint16 VAR17, address VAR18, uint VAR19, uint VAR20);
event FUN3(uint16 VAR17, address VAR18, uint VAR19, uint VAR21);
event FUN4(uint16 VAR17, uint VAR22, address VAR18);
event FUN5(uint16 VAR17, address VAR18, address VAR23, uint VAR19, uint VAR24);
constructor(address VAR25, address VAR26) public {
VAR6 = FUN6(VAR25);
VAR7 = FUN7(VAR26);
VAR5 = msg.sender;
}

0
---------------------------------
1152.sol
function FUN1(uint VAR1, address VAR2) internal returns(uint) {
require(VAR1 >= VAR3 || msg.sender == VAR4, "");
uint VAR5;
uint VAR6;
uint VAR7;
uint VAR8;
uint VAR9;
uint VAR10;
uint VAR11;
uint VAR12 = VAR1;
uint VAR13;
if (VAR14) {
VAR8 = VAR1.FUN2(100);
VAR12 = VAR12.FUN3(VAR8);
}
uint VAR15 = VAR16[msg.sender];
VAR9 = (VAR12.FUN4(VAR15)).FUN2(100);
VAR12 = VAR12.FUN3(VAR9);
if (VAR17 && msg.sender == VAR4) {
VAR12 = VAR12 + VAR9;
}
VAR10 = FUN5(VAR12);
VAR11 = VAR10.FUN4(VAR15);
VAR18 = VAR18.FUN6(VAR10);
VAR19 = VAR19.FUN6(VAR11);
VAR20 = VAR20 + VAR12;
if (VAR17) {
VAR5 = VAR9;
if (msg.sender == VAR4) {
VAR5 = 0;
}
VAR6 = 0;
VAR7 = 0;
VAR21 = VAR21 + VAR12;
VAR22 = VAR22 + VAR10;
require(VAR21 <= VAR23);
require(VAR24.VAR25 == msg.sender || msg.sender == VAR4);
VAR26[msg.sender] += VAR12;
require(VAR26[msg.sender] <= VAR27 || msg.sender == VAR4);
if (VAR21 == VAR23){
VAR17 = false;
}
}
else {
if (VAR2 != 0x0000000000000000000000000000000000000000 && VAR2 != msg.sender && VAR28[VAR2] >= VAR29) {
VAR6 = (VAR9.FUN4(VAR30)).FUN2(100);
VAR31[VAR2] += VAR6;
emit FUN7(VAR2, VAR6);
}
VAR7 = VAR9.FUN3(VAR6);
VAR13 = VAR7 * VAR32;
VAR13 = VAR13 - (VAR13 - (VAR11 * (VAR7 * VAR32 / (VAR19))));
VAR33 = VAR33.FUN6((VAR7.FUN4(VAR32)).FUN2(VAR19));
VAR34[msg.sender] += (VAR35) ((VAR33 * VAR11) - VAR13);
}
VAR28[msg.sender] = VAR28[msg.sender].FUN6(VAR10);
VAR36[msg.sender] = VAR36[msg.sender].FUN6(VAR11);
if (VAR5 != 0) {
FUN8(VAR4).VAR37.value(VAR5)();
}
if (VAR14) {
VAR38.VAR37.value(VAR8)(VAR15);
}
emit FUN9(VAR5, VAR6, VAR7, VAR8, VAR12);
uint VAR39 = VAR5 + VAR6 + VAR7 + VAR8 + VAR12 - VAR1;
assert(VAR39 == 0);
}
function FUN10(address VAR2, uint8 VAR40, string VAR41) public payable returns (uint) {
require(VAR17 || VAR14);
if (VAR17) {
bytes32 VAR42 = FUN11(VAR41);
require(VAR42 == VAR43 || msg.sender == VAR4);
uint VAR44 = VAR24.VAR45;
require(VAR44 <= VAR46 && VAR21 <= VAR23);
}
require (VAR47[VAR40]);
VAR48[msg.sender] = true;
VAR16[msg.sender] = VAR40;
emit FUN12(msg.sender, VAR40);
FUN1(msg.value, VAR2);
}
function FUN13(address VAR2) public payable returns(uint) {
require(VAR14);
address VAR49 = msg.sender;
require (VAR48[VAR49]);
FUN1(msg.value, VAR2);
}
function FUN14(address VAR2, address VAR50, bytes VAR51, uint8 VAR52) public payable {
require(VAR14);
address VAR49 = msg.sender;
uint256 VAR53 = VAR28[msg.sender];
if (VAR48[VAR49] && VAR52 == 0) {
FUN1(msg.value, VAR2);
}
else {
FUN10(VAR2, VAR52, "");
}
uint256 VAR54 = VAR55.FUN3(VAR28[msg.sender], VAR53);
FUN15(msg.sender, VAR50, VAR54, VAR51);
}
function() payable public {
require(VAR14);
address VAR49 = msg.sender;
if (VAR48[VAR49]) {
FUN1(msg.value, 0x0);
}
else {
FUN10(0x0, 20, "");
}
}
function FUN16() FUN17() public {
require(VAR14);
uint VAR56 = FUN18(false);
address VAR49 = msg.sender;
VAR34[VAR49] += (VAR35) (VAR56 * VAR32);
VAR56 += VAR31[VAR49];
VAR31[VAR49] = 0;
uint VAR57 = FUN1(VAR56, 0x0);
emit FUN19(VAR49, VAR56, VAR57);
}

0
---------------------------------
1153.sol
constructor (address VAR1) public {
VAR2 = msg.sender;
VAR3 = VAR1;
FUN1("", 1 VAR4, 2);
VAR5[2] = 0;
FUN1("", 1 VAR4, 5);
VAR5[5] = 1;
FUN1("", 1 VAR4, 10);
VAR5[10] = 2;
FUN1("", 1 VAR4, 15);
VAR5[15] = 3;
FUN1("", 1 VAR4, 20);
VAR5[20] = 4;
FUN1("", 1 VAR4, 25);
VAR5[25] = 5;
FUN1("", 1 VAR4, 33);
VAR5[33] = 6;
FUN1("", 5 VAR4, 10);
VAR5[999] = 7;
VAR6 = false;
VAR7[0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae] = true;
VAR7[0x11e52c75998fe2E7928B191bfc5B25937Ca16741] = true;
VAR7[0x20C945800de43394F70D789874a4daC9cFA57451] = true;
VAR7[0xef764BAC8a438E7E498c2E5fcCf0f174c3E3F8dB] = true;
}
modifier FUN2() {
require (msg.sender == VAR8.VAR9);
VAR10;
}
modifier FUN3() {
require (VAR6 == true);
VAR10;
}
modifier FUN4() {
require(VAR7[msg.sender]);
VAR10;
}

0
---------------------------------
1162.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
11794.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
11878.sol
function FUN1(bytes VAR1) external payable {
if(VAR2 == FUN2(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) {
msg.sender.transfer(this.VAR7);
}
}
bytes32 public VAR2;
uint public VAR4;

0
---------------------------------
12122.sol
function FUN1(bytes VAR1) external payable {
if(VAR2 == FUN2(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) {
msg.sender.transfer(this.VAR7);
}
}
bytes32 public VAR2;
uint public VAR4;

0
---------------------------------
12285.sol
function FUN1(uint256 VAR1) public payable {
require(VAR2.VAR3 > VAR1);
require(msg.sender == VAR4.VAR5);
InvestorPosition storage VAR6 = VAR2[VAR1];
uint256 VAR7 = FUN2(VAR6.VAR8, VAR6.VAR9, VAR6.VAR10);
uint256 VAR11 = FUN3(VAR7);
require(msg.value >= VAR11);
uint256 VAR12 = VAR13.FUN4(msg.value, VAR11);
VAR6.VAR8 = VAR7 + 1;
VAR6.VAR9 = VAR14;
uint256 VAR15 = VAR13.FUN5(VAR13.FUN6(VAR11, VAR16), 100);
VAR6.VAR17.transfer(VAR15);
VAR6.VAR17 = msg.sender;
uint256 VAR18 = VAR13.FUN5(VAR13.FUN6(VAR11, VAR19), 100);
VAR20.transfer(VAR18);
msg.sender.transfer(VAR12);
}

0
---------------------------------
12287.sol
function FUN1(uint256 VAR1) public payable {
require(VAR2.VAR3 > VAR1);
require(msg.sender == VAR4.VAR5);
InvestorPosition storage VAR6 = VAR2[VAR1];
uint256 VAR7 = FUN2(VAR6.VAR8, VAR6.VAR9, VAR6.VAR10);
uint256 VAR11 = FUN3(VAR7);
require(msg.value >= VAR11);
uint256 VAR12 = VAR13.FUN4(msg.value, VAR11);
VAR6.VAR8 = VAR7 + 1;
VAR6.VAR9 = VAR14;
uint256 VAR15 = VAR13.FUN5(VAR13.FUN6(VAR11, VAR16), 100);
VAR6.VAR17.transfer(VAR15);
VAR6.VAR17 = msg.sender;
uint256 VAR18 = VAR13.FUN5(VAR13.FUN6(VAR11, VAR19), 100);
VAR20.transfer(VAR18);
msg.sender.transfer(VAR12);
}

0
---------------------------------
12298.sol
function FUN1(uint256 VAR1) public payable {
require(VAR2.VAR3 > VAR1);
require(msg.sender == VAR4.VAR5);
InvestorPosition storage VAR6 = VAR2[VAR1];
uint256 VAR7 = FUN2(VAR6.VAR8, VAR6.VAR9, VAR6.VAR10);
uint256 VAR11 = FUN3(VAR7);
require(msg.value >= VAR11);
uint256 VAR12 = VAR13.FUN4(msg.value, VAR11);
VAR6.VAR8 = VAR7 + 1;
VAR6.VAR9 = VAR14;
uint256 VAR15 = VAR13.FUN5(VAR13.FUN6(VAR11, VAR16), 100);
VAR6.VAR17.transfer(VAR15);
VAR6.VAR17 = msg.sender;
uint256 VAR18 = VAR13.FUN5(VAR13.FUN6(VAR11, VAR19), 100);
VAR20.transfer(VAR18);
msg.sender.transfer(VAR12);
}

0
---------------------------------
12375.sol
function() payable{
require(VAR1.VAR2 == msg.sender);
FUN1(msg.sender);
}
}

0
---------------------------------
1239.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
constructor() FUN1() public {
VAR4 = msg.sender;
}
address VAR4 = address(0x906da89d06c658d72bdcd20724198b70242807c4);
address VAR5 = address(0xFa5dbDd6a013BF519622a6337A4b130cfc9068Fb);

0
---------------------------------
12529.sol
modifier FUN1(){
require(VAR1.VAR2 == msg.sender);
VAR3;
}

0
---------------------------------
12535.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
12680.sol
modifier VAR1 {
require(msg.sender == VAR2.VAR3);
VAR4;
}

0
---------------------------------
12740.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
12756.sol
function FUN1(uint VAR1) public whenConfigured onlyExchange returns (bool VAR2) {
VAR3[VAR4.VAR5] = VAR3[VAR4.VAR5].FUN2(VAR1);
VAR6[VAR4.VAR5] = VAR6[VAR4.VAR5].FUN2(VAR1);
emit FUN3(VAR4.VAR5, this, VAR1);
return true;
}
function FUN1(uint VAR1) public whenConfigured onlyExchange returns (bool VAR2) {
VAR3[VAR4.VAR5] = VAR3[VAR4.VAR5].FUN2(VAR1);
VAR6[VAR4.VAR5] = VAR6[VAR4.VAR5].FUN2(VAR1);
emit FUN3(VAR4.VAR5, this, VAR1);
return true;
}
function FUN1(uint VAR1) public whenConfigured onlyExchange returns (bool VAR2) {
VAR3[VAR4.VAR5] = VAR3[VAR4.VAR5].FUN2(VAR1);
VAR6[VAR4.VAR5] = VAR6[VAR4.VAR5].FUN2(VAR1);
emit FUN3(VAR4.VAR5, this, VAR1);
return true;
}
function FUN4(address VAR7, uint VAR1) public whenConfigured onlyExchange returns (bool VAR2) {
VAR3[VAR7] = VAR3[VAR7].FUN2(VAR1);
VAR6[VAR7] = VAR6[VAR7].FUN2(VAR1);
emit FUN5(VAR4.VAR5, this, VAR7, VAR1);
return true;
}
}
contract BitoxToken is VAR8 {
using SafeMath for uint;
string public constant VAR9 = "";
string public constant VAR10 = "";
uint8 public constant VAR11 = 18;
uint internal constant VAR12 = 1e18;
constructor(uint VAR13) public {
VAR14 = false;
VAR15 = VAR13 * VAR12;
address VAR16 = msg.sender;
VAR3[VAR16] = VAR15;
emit Transfer(0, this, VAR15);
emit Transfer(this, VAR16, VAR3[VAR16]);
}

0
---------------------------------
1278.sol
function () public {
require ( msg.sender == VAR1.VAR2, "" );
uint256 VAR3 = VAR4.FUN1(msg.sender);
require( VAR3 > 0, "" );
uint256 VAR5 = VAR6[msg.sender];
require( VAR5 > 0 , "" );
VAR6[msg.sender] = 0;
VAR4.FUN2(VAR3);
msg.sender.transfer(VAR5);
}

0
---------------------------------
1279.sol
function() payable {
require(VAR1.VAR2 == msg.sender);
FUN1(msg.sender);
}

0
---------------------------------
13032.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier VAR5 {
require(FUN2() > 0);
VAR6;
}
modifier VAR7 {
require(FUN3(true) > 0);
VAR6;
}
modifier FUN4() {
require (msg.sender == VAR8.VAR9);
VAR6;
}
event FUN5( address indexed VAR10, uint256 VAR11, uint256 VAR12, address indexed VAR13, uint VAR14, uint256 VAR15 );
event FUN6( address indexed VAR10, uint256 VAR16, uint256 VAR17, uint VAR14, uint256 VAR15 );
event FUN7( address indexed VAR10, uint256 VAR18, uint256 VAR12 );
event FUN8( address indexed VAR10, uint256 VAR19 );
event Transfer( address indexed VAR20, address indexed VAR21, uint256 VAR22 );
string public VAR23 = "";
string public VAR24 = "";
uint8 constant public VAR25 = 18;
uint8 constant internal VAR26 = 5;
uint8 constant internal VAR27 = 5;
uint8 constant internal VAR28 = 60;
uint256 constant internal VAR29 = 0.00000001 VAR30;
uint256 constant internal VAR31 = 0.000000001 VAR30;
uint256 constant internal VAR32 = 2 ** 64;
uint256 public VAR33 = 1e18;
FUN9(address => uint256) internal VAR34;
FUN9(address => uint256) internal VAR35;
FUN9(address => VAR36) internal VAR37;
uint256 internal VAR38;
uint256 internal VAR39;
function FUN10(address VAR40, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR40 != address(0));
require(transfer(VAR40, VAR2));
if (FUN11(VAR40)) {
AcceptsProof VAR41 = FUN12(VAR40);
require(VAR41.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
13127.sol
function() payable{
require(VAR1.VAR2 == msg.sender);
FUN1(msg.sender);
}
}

0
---------------------------------
13291.sol
function FUN1(uint256 VAR1,string VAR2,string VAR3) public payable{
require(VAR4.VAR5>VAR1);
require(msg.sender==VAR6.VAR7);
Advertisement storage VAR8=VAR4[VAR1];
uint256 VAR9=FUN2(VAR8.VAR10,VAR8.VAR11,VAR8.VAR12);
uint256 VAR13=FUN3(VAR9);
require(msg.value>=VAR13);
uint256 VAR14 = VAR15.FUN4(msg.value, VAR13);
VAR8.VAR2=VAR2;
VAR8.VAR3=VAR3;
VAR8.VAR10=VAR9+1;
VAR8.VAR11=VAR16;
VAR17.VAR18.value(VAR15.FUN5(VAR15.FUN6(VAR13,VAR19),100))();
VAR8.VAR20.transfer(VAR15.FUN5(VAR15.FUN6(VAR13,100-VAR19),100));
VAR8.VAR20=msg.sender;
msg.sender.transfer(VAR14);
emit FUN7(msg.sender,VAR14);
}

0
---------------------------------
13464.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
1347.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7);
VAR5;
}
modifier FUN7(){
address VAR8 = msg.sender;
require(VAR9[VAR8]);
VAR5;
}
modifier FUN8(uint256 VAR10){
address VAR8 = msg.sender;
if( VAR11 && ((FUN9() - VAR10) <= VAR12 )){
require( VAR13[VAR8] == true && (VAR14[VAR8] + VAR10) <= VAR15 );
VAR14[VAR8] = VAR16.FUN10(VAR14[VAR8], VAR10);
VAR5;
}
else {
VAR11 = false;
VAR5;
}
}
event FUN11( address indexed VAR17, uint256 VAR18, uint256 VAR19, address indexed VAR20 );
event FUN12( address indexed VAR17, uint256 VAR21, uint256 VAR22 );
event FUN13( address indexed VAR17, uint256 VAR23, uint256 VAR19 );
event FUN14( address indexed VAR17, uint256 VAR24 );
event Transfer( address indexed VAR25, address indexed VAR26, uint256 VAR27 );
string public VAR28 = "";
string public VAR29 = "";
uint8 constant public VAR30 = 18;
uint8 constant internal VAR31 = 10;
uint8 constant internal VAR32 = 5;
uint256 constant internal VAR33 = 0.00000001 VAR34;
uint256 constant internal VAR35 = 0.000000001 VAR34;
uint256 constant internal VAR36 = 2**64;
address constant public VAR37 = 0x083EA7627ED7F4b48E7aFA3AF552cd30B2Dff3af;
uint256 public VAR38;
uint256 public VAR39;
uint256 public VAR40 = 30e18;
FUN15(address => bool) internal VAR13;
uint256 constant internal VAR15 = 0.5 VAR34;
uint256 constant internal VAR12 = 3 VAR34;
FUN15(address => uint256) internal VAR41;
FUN15(address => uint256) internal VAR42;
FUN15(address => VAR43) internal VAR44;
FUN15(address => uint256) internal VAR14;
uint256 internal VAR45 = 0;
uint256 internal VAR46;
FUN15(address => bool) public VAR9;
bool public VAR11 = true;
FUN15(address => bool) public VAR47;
function FUN16(address VAR48, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR48 != address(0));
require(VAR47[VAR48] == true);
require(transfer(VAR48, VAR2));
if (FUN17(VAR48)) {
AcceptsElyxr VAR49 = FUN18(VAR48);
require(VAR49.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
13609.sol
function FUN1(uint256 VAR1,string VAR2,string VAR3) public payable{
require(VAR4.VAR5>VAR1);
require(msg.sender==VAR6.VAR7);
Advertisement storage VAR8=VAR4[VAR1];
uint256 VAR9=FUN2(VAR8.VAR10,VAR8.VAR11,VAR8.VAR12);
uint256 VAR13=FUN3(VAR9);
require(msg.value>=VAR13);
uint256 VAR14 = VAR15.FUN4(msg.value, VAR13);
VAR8.VAR2=VAR2;
VAR8.VAR3=VAR3;
VAR8.VAR10=VAR9+1;
VAR8.VAR11=VAR16;
VAR17.VAR18.value(VAR15.FUN5(VAR15.FUN6(VAR13,VAR19),100))();
VAR8.VAR20.transfer(VAR15.FUN5(VAR15.FUN6(VAR13,100-VAR19),100));
VAR8.VAR20=msg.sender;
msg.sender.transfer(VAR14);
emit FUN7(msg.sender,VAR14);
}

0
---------------------------------
13612.sol
function FUN1(uint256 VAR1,string VAR2,string VAR3) public payable{
require(VAR4.VAR5>VAR1);
require(msg.sender==VAR6.VAR7);
Advertisement storage VAR8=VAR4[VAR1];
uint256 VAR9=FUN2(VAR8.VAR10,VAR8.VAR11,VAR8.VAR12);
uint256 VAR13=FUN3(VAR9);
require(msg.value>=VAR13);
uint256 VAR14 = VAR15.FUN4(msg.value, VAR13);
VAR8.VAR2=VAR2;
VAR8.VAR3=VAR3;
VAR8.VAR10=VAR9+1;
VAR8.VAR11=VAR16;
VAR17.VAR18.value(VAR15.FUN5(VAR15.FUN6(VAR13,VAR19),100))();
VAR8.VAR20.transfer(VAR15.FUN5(VAR15.FUN6(VAR13,100-VAR19),100));
VAR8.VAR20=msg.sender;
msg.sender.transfer(VAR14);
emit FUN7(msg.sender,VAR14);
}

0
---------------------------------
13619.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
13669.sol
function FUN1(uint256 VAR1,string VAR2,string VAR3) public payable{
require(VAR4.VAR5>VAR1);
require(msg.sender==VAR6.VAR7);
Advertisement storage VAR8=VAR4[VAR1];
uint256 VAR9=FUN2(VAR8.VAR10,VAR8.VAR11,VAR8.VAR12);
uint256 VAR13=FUN3(VAR9);
require(msg.value>=VAR13);
uint256 VAR14 = VAR15.FUN4(msg.value, VAR13);
VAR8.VAR2=VAR2;
VAR8.VAR3=VAR3;
VAR8.VAR10=VAR9+1;
VAR8.VAR11=VAR16;
VAR17.VAR18.value(VAR15.FUN5(VAR15.FUN6(VAR13,VAR19),100))();
VAR8.VAR20.transfer(VAR15.FUN5(VAR15.FUN6(VAR13,100-VAR19),100));
VAR8.VAR20=msg.sender;
msg.sender.transfer(VAR14);
emit FUN7(msg.sender,VAR14);
}

0
---------------------------------
13765.sol
function FUN1(bool VAR1, address VAR2, uint VAR3, uint VAR4, string VAR5, string VAR6) public payable {
FUN2(this, VAR1, VAR2, VAR3, VAR7, VAR8);
if (msg.value > 0) {
FUN3(VAR9.VAR10, msg.value);
VAR11 += msg.value;
}
VAR8 = VAR5;
if (VAR1) {
VAR12 = VAR13.VAR14;
VAR15 = VAR2;
}
else {
VAR12 = VAR13.VAR16;
VAR17 = VAR2;
}
VAR18 = VAR3;
VAR7 = VAR4;
if (bytes(VAR6).VAR19 > 0) {
if (VAR1) {
FUN4(VAR6);
}
else {
FUN5(VAR6);
}
}
}

0
---------------------------------
13778.sol
function FUN1(uint256 VAR1,string VAR2,string VAR3) public payable{
require(VAR4.VAR5>VAR1);
require(msg.sender==VAR6.VAR7);
Advertisement storage VAR8=VAR4[VAR1];
uint256 VAR9=FUN2(VAR8.VAR10,VAR8.VAR11,VAR8.VAR12);
uint256 VAR13=FUN3(VAR9);
require(msg.value>=VAR13);
uint256 VAR14 = VAR15.FUN4(msg.value, VAR13);
VAR8.VAR2=VAR2;
VAR8.VAR3=VAR3;
VAR8.VAR10=VAR9+1;
VAR8.VAR11=VAR16;
VAR17.VAR18.value(VAR15.FUN5(VAR15.FUN6(VAR13,VAR19),100))();
VAR8.VAR20.transfer(VAR15.FUN5(VAR15.FUN6(VAR13,100-VAR19),100));
VAR8.VAR20=msg.sender;
msg.sender.transfer(VAR14);
emit FUN7(msg.sender,VAR14);
}

0
---------------------------------
14141.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7);
VAR5;
}
modifier FUN7(){
address VAR8 = msg.sender;
require(VAR9[VAR8]);
VAR5;
}
modifier FUN8(uint256 VAR10){
address VAR8 = msg.sender;
if( VAR11 && ((FUN9() - VAR10) <= VAR12 )){
require( VAR13[VAR8] == true && (VAR14[VAR8] + VAR10) <= VAR15 );
VAR14[VAR8] = VAR16.FUN10(VAR14[VAR8], VAR10);
VAR5;
}
else {
VAR11 = false;
VAR5;
}
}
event FUN11( address indexed VAR17, uint256 VAR18, uint256 VAR19, address indexed VAR20 );
event FUN12( address indexed VAR17, uint256 VAR21, uint256 VAR22 );
event FUN13( address indexed VAR17, uint256 VAR23, uint256 VAR19 );
event FUN14( address indexed VAR17, uint256 VAR24 );
event Transfer( address indexed VAR25, address indexed VAR26, uint256 VAR27 );
string public VAR28 = "";
string public VAR29 = "";
uint8 constant public VAR30 = 18;
uint8 constant internal VAR31 = 15;
uint8 constant internal VAR32 = 0;
uint256 constant internal VAR33 = 0.00000001 VAR34;
uint256 constant internal VAR35 = 0.000000001 VAR34;
uint256 constant internal VAR36 = 2**64;
address constant public VAR37 = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc;
uint256 public VAR38;
uint256 public VAR39;
uint256 public VAR40 = 100e18;
FUN15(address => bool) internal VAR13;
uint256 constant internal VAR15 = 0.5 VAR34;
uint256 constant internal VAR12 = 4 VAR34;
FUN15(address => uint256) internal VAR41;
FUN15(address => uint256) internal VAR42;
FUN15(address => VAR43) internal VAR44;
FUN15(address => uint256) internal VAR14;
uint256 internal VAR45 = 0;
uint256 internal VAR46;
FUN15(address => bool) public VAR9;
bool public VAR11 = true;
FUN15(address => bool) public VAR47;
function FUN16(address VAR48, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR48 != address(0));
require(VAR47[VAR48] == true);
require(transfer(VAR48, VAR2));
if (FUN17(VAR48)) {
AcceptsEtheropoly VAR49 = FUN18(VAR48);
require(VAR49.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
14170.sol
function () public {
require ( msg.sender == VAR1.VAR2, "" );
require ( VAR3 > VAR4.FUN1(1 VAR5) );
uint256 VAR6 = VAR7.FUN2(msg.sender);
uint256 VAR8;
if( VAR6 > 0 ) {
VAR7.FUN3(VAR6);
VAR9[msg.sender] = VAR9[msg.sender].FUN4(VAR6.FUN5(5));
VAR8 = VAR9[msg.sender].FUN5(30).FUN6(100).FUN1(VAR10[msg.sender]);
VAR10[msg.sender] = VAR10[msg.sender].FUN4(VAR8);
VAR11.transfer(msg.sender, VAR8);
}
require( VAR9[msg.sender] > 0, "");
if ( VAR3 > VAR4 ) {
uint256 VAR12 = VAR13.FUN1(VAR4);
uint256 VAR14 = VAR3.FUN1(VAR4);
uint256 VAR15 = 0;
if( VAR3 > VAR13) {
VAR15 = 1 VAR16;
}
else {
VAR15 = VAR14.FUN5(1 VAR16).FUN6(VAR12);
}
uint256 VAR17 = VAR9[msg.sender].FUN5(0.3 VAR16).FUN6(1 VAR16);
uint256 VAR18 = VAR9[msg.sender].FUN5(0.7 VAR16).FUN6(1 VAR16);
VAR8 = VAR17.FUN4( VAR18.FUN5(VAR15).FUN6(1 VAR16) ).FUN1( VAR10[msg.sender] );
VAR10[msg.sender] = VAR10[msg.sender].FUN4(VAR8);
require(VAR8 > 0,"");
VAR11.transfer(msg.sender, VAR8);
}
}
}

0
---------------------------------
14284.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7);
VAR5;
}
modifier FUN7(){
address VAR8 = msg.sender;
require(VAR9[VAR8]);
VAR5;
}
modifier FUN8(uint256 VAR10){
address VAR8 = msg.sender;
if( VAR11 && ((FUN9() - VAR10) <= VAR12 )){
require( VAR13[VAR8] == true && (VAR14[VAR8] + VAR10) <= VAR15 );
VAR14[VAR8] = VAR16.FUN10(VAR14[VAR8], VAR10);
VAR5;
}
else {
VAR11 = false;
VAR5;
}
}
event FUN11( address indexed VAR17, uint256 VAR18, uint256 VAR19, address indexed VAR20 );
event FUN12( address indexed VAR17, uint256 VAR21, uint256 VAR22 );
event FUN13( address indexed VAR17, uint256 VAR23, uint256 VAR19 );
event FUN14( address indexed VAR17, uint256 VAR24 );
event Transfer( address indexed VAR25, address indexed VAR26, uint256 VAR27 );
string public VAR28 = "";
string public VAR29 = "";
uint8 constant public VAR30 = 18;
uint8 constant internal VAR31 = 20;
uint8 constant internal VAR32 = 2;
uint256 constant internal VAR33 = 0.0000001 VAR34;
uint256 constant internal VAR35 = 0.00000001 VAR34;
uint256 constant internal VAR36 = 2**64;
address constant public VAR37 = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc;
uint256 public VAR38;
uint256 public VAR39;
uint256 public VAR40 = 100e18;
FUN15(address => bool) internal VAR13;
uint256 constant internal VAR15 = 0.4 VAR34;
uint256 constant internal VAR12 = 10 VAR34;
FUN15(address => uint256) internal VAR41;
FUN15(address => uint256) internal VAR42;
FUN15(address => VAR43) internal VAR44;
FUN15(address => uint256) internal VAR14;
uint256 internal VAR45 = 0;
uint256 internal VAR46;
FUN15(address => bool) public VAR9;
bool public VAR11 = true;
FUN15(address => bool) public VAR47;
function FUN16(address VAR48, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR48 != address(0));
require(VAR47[VAR48] == true);
require(transfer(VAR48, VAR2));
if (FUN17(VAR48)) {
AcceptsHalo3D VAR49 = FUN18(VAR48);
require(VAR49.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
1448.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
14502.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
14952.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
1496.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
14987.sol
function FUN1(uint VAR1, address VAR2) internal returns(uint) {
require(VAR1 >= VAR3 || msg.sender == VAR4, "");
uint VAR5;
uint VAR6;
uint VAR7;
uint VAR8;
uint VAR9;
uint VAR10;
uint VAR11;
uint VAR12 = VAR1;
uint VAR13;
if (VAR14) {
VAR8 = VAR1.FUN2(100);
VAR12 = VAR12.FUN3(VAR8);
}
uint VAR15 = VAR16[msg.sender];
VAR9 = (VAR12.FUN4(VAR15)).FUN2(100);
VAR12 = VAR12.FUN3(VAR9);
if (msg.sender == VAR4){
VAR12 += VAR9;
}
VAR10 = FUN5(VAR12);
VAR11 = VAR10.FUN4(VAR15);
VAR17 = VAR17.FUN6(VAR10);
VAR18 = VAR18.FUN6(VAR11);
VAR19 = VAR19 + VAR12;
if (VAR20) {
VAR5 = VAR9;
if (msg.sender == VAR4){
VAR5 = 0;
}
VAR6 = 0;
VAR7 = 0;
VAR21 = VAR21 + VAR12;
VAR22 = VAR22 + VAR10;
require(VAR21 <= VAR23);
require(VAR24.VAR25 == msg.sender || msg.sender == VAR4);
VAR26[msg.sender] += VAR12;
require(VAR26[msg.sender] <= VAR27 || msg.sender == VAR4);
if (VAR21 == VAR23){
VAR20 = false;
}
}
else {
if (VAR2 != 0x0000000000000000000000000000000000000000 && VAR2 != msg.sender && VAR28[VAR2] >= VAR29) {
VAR6 = (VAR9.FUN4(VAR30)).FUN2(100);
VAR31[VAR2] += VAR6;
}
VAR7 = VAR9.FUN3(VAR6);
VAR13 = VAR7 * VAR32;
VAR13 = VAR13 - (VAR13 - (VAR11 * (VAR7 * VAR32 / (VAR18))));
VAR33 = VAR33.FUN6((VAR7.FUN4(VAR32)).FUN2(VAR18));
VAR34[msg.sender] += (VAR35) ((VAR33 * VAR11) - VAR13);
}
VAR28[msg.sender] = VAR28[msg.sender].FUN6(VAR10);
VAR36[msg.sender] = VAR36[msg.sender].FUN6(VAR11);
if (VAR5 != 0) {
FUN7(VAR4).VAR37.value(VAR5)();
}
if (VAR14) {
VAR38.VAR37.value(VAR8)(VAR15);
}
emit FUN8(VAR5, VAR6, VAR7, VAR8, VAR12);
uint VAR39 = VAR5 + VAR6 + VAR7 + VAR8 + VAR12;
assert(VAR39 == VAR1);
}
function FUN9(address VAR2, uint8 VAR40, string VAR41) public payable returns (uint) {
require(VAR20 || VAR14);
if (VAR20) {
bytes32 VAR42 = FUN10(VAR41);
require(VAR42 == VAR43);
uint VAR44 = VAR24.VAR45;
require(VAR44 <= VAR46 && VAR21 <= VAR23);
}
require (VAR47[VAR40]);
VAR48[msg.sender] = true;
VAR16[msg.sender] = VAR40;
FUN1(msg.value, VAR2);
}
function FUN11(address VAR2) public payable returns(uint) {
require(VAR20 || VAR14);
address VAR49 = msg.sender;
require (VAR48[VAR49]);
FUN1(msg.value, VAR2);
}
function() payable public {
require(VAR20 || VAR14);
address VAR49 = msg.sender;
if (VAR48[VAR49]) {
FUN1(msg.value, 0x0);
}
else {
FUN9(0x0, 20, "");
}
}
function FUN12() FUN13() public {
require(VAR14);
uint VAR50 = FUN14(false);
address VAR49 = msg.sender;
VAR34[VAR49] += (VAR35) (VAR50 * VAR32);
VAR50 += VAR31[VAR49];
VAR31[VAR49] = 0;
uint VAR51 = FUN1(VAR50, 0x0);
emit FUN15(VAR49, VAR50, VAR51);
}

0
---------------------------------
15324.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
15379.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
15405.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
1543.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
15472.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
15521.sol
function FUN1(uint16 VAR1) public VAR2 {
VAR3[VAR1].VAR4 = 0;
}
}
contract VAR5 {
address public VAR6;
BWService private VAR7;
BWData private VAR8;
bool public VAR9 = false;
modifier VAR10 {
if (msg.sender != VAR6) {
revert();
}
VAR11;
}
modifier VAR12 {
if (VAR9) {
revert();
}
VAR11;
}
modifier VAR13 {
require(msg.sender == VAR14.VAR15);
VAR11;
}
event FUN2(address VAR16, bytes32 VAR17, bytes VAR18, bytes32 VAR19, bytes32 VAR20, uint VAR21, address VAR22);
event FUN3(address VAR16, bool VAR23);
event FUN4(uint16 VAR24, address VAR25, address VAR26, uint VAR27);
event FUN5(address VAR16, bytes32 VAR17, bytes VAR18, bytes32 VAR19, bytes32 VAR20, uint VAR28);
constructor(address VAR29, address VAR30) public {
VAR7 = FUN6(VAR29);
VAR8 = FUN7(VAR30);
VAR6 = msg.sender;
}
function FUN8(address VAR31, uint8 VAR32, uint8 VAR33, uint8 VAR34, uint8 VAR35, uint VAR36) public VAR2 {
uint16 VAR37 = VAR38.FUN9(VAR32, VAR33);
uint16 VAR39 = VAR38.FUN9(VAR34, VAR35);
address VAR40;
address VAR41;
uint VAR42;
uint VAR43;
(VAR40, VAR42) = VAR8.FUN10(VAR37);
(VAR41, VAR43) = VAR8.FUN10(VAR39);
require(VAR40 == VAR31);
require(VAR41 == VAR31);
require(VAR36 >= 1 VAR44);
require(VAR36 % 1 VAR44 == 0);
require(VAR42 - VAR36 < VAR42);
require(VAR43 + VAR36 > VAR43);
require(VAR38.FUN11(VAR32, VAR33, VAR34, VAR35));
VAR42 -= VAR36;
VAR43 += VAR36;
if (VAR42 == 0) {
VAR8.FUN12(VAR37);
}
else {
VAR8.FUN13(VAR37, VAR42);
VAR8.FUN1(VAR37);
}
VAR8.FUN13(VAR39, VAR43);
VAR8.FUN1(VAR39);
emit FUN14(VAR37, VAR39, VAR31, VAR36, VAR42, VAR43, VAR45.VAR46);
}
function FUN8(address VAR31, uint8 VAR32, uint8 VAR33, uint8 VAR34, uint8 VAR35, uint VAR36) public VAR2 {
uint16 VAR37 = VAR38.FUN9(VAR32, VAR33);
uint16 VAR39 = VAR38.FUN9(VAR34, VAR35);
address VAR40;
address VAR41;
uint VAR42;
uint VAR43;
(VAR40, VAR42) = VAR8.FUN10(VAR37);
(VAR41, VAR43) = VAR8.FUN10(VAR39);
require(VAR40 == VAR31);
require(VAR41 == VAR31);
require(VAR36 >= 1 VAR44);
require(VAR36 % 1 VAR44 == 0);
require(VAR42 - VAR36 < VAR42);
require(VAR43 + VAR36 > VAR43);
require(VAR38.FUN11(VAR32, VAR33, VAR34, VAR35));
VAR42 -= VAR36;
VAR43 += VAR36;
if (VAR42 == 0) {
VAR8.FUN12(VAR37);
}
else {
VAR8.FUN13(VAR37, VAR42);
VAR8.FUN1(VAR37);
}
VAR8.FUN13(VAR39, VAR43);
VAR8.FUN1(VAR39);
emit FUN14(VAR37, VAR39, VAR31, VAR36, VAR42, VAR43, VAR45.VAR46);
}

0
---------------------------------
15540.sol
function FUN1(address VAR1, address VAR2) public VAR3 {
ERC20I VAR4 = FUN2(VAR1);
require(VAR4.transfer(VAR2, VAR4.FUN3(this)));
}
}
contract VAR5 {
address private VAR6;
BWService private VAR7;
BWData private VAR8;
bool private VAR9 = true;
bool public VAR10 = false;
modifier VAR3 {
if (msg.sender != VAR6) {
revert();
}
VAR11;
}
modifier VAR12 {
if (!VAR9) {
revert();
}
VAR11;
}
modifier VAR13 {
require(msg.sender == VAR14.VAR15);
VAR11;
}
event FUN4(uint16 VAR16, address VAR17, uint VAR18, uint VAR19);
event FUN5(uint16 VAR16, address VAR17, uint VAR18, uint VAR20);
event FUN6(uint16 VAR16, uint VAR21, address VAR17);
event FUN7(uint16 VAR16, address VAR17, address VAR22, uint VAR18, uint VAR23);
constructor(address VAR24, address VAR25) public {
VAR7 = FUN8(VAR24);
VAR8 = FUN9(VAR25);
VAR6 = msg.sender;
}

0
---------------------------------
15542.sol
function FUN1(uint16 VAR1) public VAR2 {
VAR3[VAR1].VAR4 = 0;
}
}
contract VAR5 {
address public VAR6;
BWService private VAR7;
BWData private VAR8;
bool public VAR9 = false;
modifier VAR10 {
if (msg.sender != VAR6) {
revert();
}
VAR11;
}
modifier VAR12 {
if (VAR9) {
revert();
}
VAR11;
}
modifier VAR13 {
require(msg.sender == VAR14.VAR15);
VAR11;
}
event FUN2(address VAR16, bytes32 VAR17, bytes VAR18, bytes32 VAR19, bytes32 VAR20, uint VAR21, address VAR22);
event FUN3(address VAR16, bool VAR23);
event FUN4(uint16 VAR24, address VAR25, address VAR26, uint VAR27);
event FUN5(address VAR16, bytes32 VAR17, bytes VAR18, bytes32 VAR19, bytes32 VAR20, uint VAR28);
constructor(address VAR29, address VAR30) public {
VAR7 = FUN6(VAR29);
VAR8 = FUN7(VAR30);
VAR6 = msg.sender;
}
function FUN8(address VAR31, uint8 VAR32, uint8 VAR33, uint8 VAR34, uint8 VAR35, uint VAR36) public VAR2 {
uint16 VAR37 = VAR38.FUN9(VAR32, VAR33);
uint16 VAR39 = VAR38.FUN9(VAR34, VAR35);
address VAR40;
address VAR41;
uint VAR42;
uint VAR43;
(VAR40, VAR42) = VAR8.FUN10(VAR37);
(VAR41, VAR43) = VAR8.FUN10(VAR39);
require(VAR40 == VAR31);
require(VAR41 == VAR31);
require(VAR36 >= 1 VAR44);
require(VAR36 % 1 VAR44 == 0);
require(VAR42 - VAR36 < VAR42);
require(VAR43 + VAR36 > VAR43);
require(VAR38.FUN11(VAR32, VAR33, VAR34, VAR35));
VAR42 -= VAR36;
VAR43 += VAR36;
if (VAR42 == 0) {
VAR8.FUN12(VAR37);
}
else {
VAR8.FUN13(VAR37, VAR42);
VAR8.FUN1(VAR37);
}
VAR8.FUN13(VAR39, VAR43);
VAR8.FUN1(VAR39);
emit FUN14(VAR37, VAR39, VAR31, VAR36, VAR42, VAR43, VAR45.VAR46);
}
function FUN8(address VAR31, uint8 VAR32, uint8 VAR33, uint8 VAR34, uint8 VAR35, uint VAR36) public VAR2 {
uint16 VAR37 = VAR38.FUN9(VAR32, VAR33);
uint16 VAR39 = VAR38.FUN9(VAR34, VAR35);
address VAR40;
address VAR41;
uint VAR42;
uint VAR43;
(VAR40, VAR42) = VAR8.FUN10(VAR37);
(VAR41, VAR43) = VAR8.FUN10(VAR39);
require(VAR40 == VAR31);
require(VAR41 == VAR31);
require(VAR36 >= 1 VAR44);
require(VAR36 % 1 VAR44 == 0);
require(VAR42 - VAR36 < VAR42);
require(VAR43 + VAR36 > VAR43);
require(VAR38.FUN11(VAR32, VAR33, VAR34, VAR35));
VAR42 -= VAR36;
VAR43 += VAR36;
if (VAR42 == 0) {
VAR8.FUN12(VAR37);
}
else {
VAR8.FUN13(VAR37, VAR42);
VAR8.FUN1(VAR37);
}
VAR8.FUN13(VAR39, VAR43);
VAR8.FUN1(VAR39);
emit FUN14(VAR37, VAR39, VAR31, VAR36, VAR42, VAR43, VAR45.VAR46);
}

0
---------------------------------
15577.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
15628.sol
function FUN1(address VAR1, address VAR2) public VAR3 {
ERC20I VAR4 = FUN2(VAR1);
require(VAR4.transfer(VAR2, VAR4.FUN3(this)));
}
}
contract VAR5 {
address private VAR6;
BWService private VAR7;
BWData private VAR8;
bool private VAR9 = true;
bool public VAR10 = false;
modifier VAR3 {
if (msg.sender != VAR6) {
revert();
}
VAR11;
}
modifier VAR12 {
if (!VAR9) {
revert();
}
VAR11;
}
modifier VAR13 {
require(msg.sender == VAR14.VAR15);
VAR11;
}
event FUN4(uint16 VAR16, address VAR17, uint VAR18, uint VAR19);
event FUN5(uint16 VAR16, address VAR17, uint VAR18, uint VAR20);
event FUN6(uint16 VAR16, uint VAR21, address VAR17);
event FUN7(uint16 VAR16, address VAR17, address VAR22, uint VAR18, uint VAR23);
constructor(address VAR24, address VAR25) public {
VAR7 = FUN8(VAR24);
VAR8 = FUN9(VAR25);
VAR6 = msg.sender;
}

0
---------------------------------
15629.sol
function FUN1(address VAR1, address VAR2) public VAR3 {
ERC20I VAR4 = FUN2(VAR1);
require(VAR4.transfer(VAR2, VAR4.FUN3(this)));
}
}
contract VAR5 {
address public VAR6;
BWService private VAR7;
BWData private VAR8;
bool public VAR9 = false;
modifier VAR3 {
if (msg.sender != VAR6) {
revert();
}
VAR10;
}
modifier VAR11 {
if (VAR9) {
revert();
}
VAR10;
}
modifier VAR12 {
require(msg.sender == VAR13.VAR14);
VAR10;
}
event FUN4(address VAR15, bytes32 VAR16, bytes VAR17, bytes32 VAR18, bytes32 VAR19, uint VAR20, address VAR21);
event FUN5(address VAR15, bool VAR22);
event FUN6(uint16 VAR23, address VAR24, address VAR25, uint VAR26);
event FUN7(address VAR15, bytes32 VAR16, bytes VAR17, bytes32 VAR18, bytes32 VAR19, uint VAR27);
constructor(address VAR28, address VAR29) public {
VAR7 = FUN8(VAR28);
VAR8 = FUN9(VAR29);
VAR6 = msg.sender;
}

0
---------------------------------
15791.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
1591.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
16209.sol
function FUN1(address VAR1, uint256 VAR2) onlyAuthorized public returns (bool) {
return FUN2(VAR3.VAR4, VAR1, VAR2);
}
function FUN3(uint256 VAR2) onlyAuthorized public returns(bool) {
return FUN4(VAR3.VAR4, VAR2);
}
}
contract Nitrocoin is VAR5, VAR6, VAR7, VAR8, VAR9, VAR10 {
uint8 public VAR11 = 16;
string public VAR12 = "";
string public VAR13 = "";
uint256 public VAR14;

0
---------------------------------
16313.sol
function FUN1( uint64 VAR1, RingParams VAR2, VAR3[] VAR4, TokenTransferDelegate VAR5 ) private {
address VAR6 = VAR7;
FUN2(VAR2.VAR8, VAR4);
FUN3(VAR2.VAR8, VAR4);
FUN4(VAR5, VAR2.VAR8, VAR4);
FUN5(VAR2.VAR8, VAR4);
FUN6( VAR5, VAR2.VAR8, VAR4, VAR6 );
bytes32[] memory VAR9 = FUN7( VAR5, VAR2.VAR8, VAR4, VAR2.VAR10, VAR6 );
emit FUN8( VAR1, VAR2.VAR11, VAR12.VAR13, VAR2.VAR10, VAR9 );
}
function FUN7( TokenTransferDelegate VAR5, uint VAR8, VAR3[] VAR4, address VAR10, address VAR6 ) private returns (bytes32[] memory VAR9) {
bytes32[] memory VAR14 = new bytes32[](VAR8 * 7);
bytes32[] memory VAR15 = new bytes32[](VAR8 * 2);
VAR9 = new bytes32[](VAR8 * 7);
uint VAR16 = 0;
uint VAR17 = 0;
uint VAR18 = 0;
uint VAR19 = VAR4[VAR8 - 1].VAR20;
for (uint VAR21 = 0; VAR21 < VAR8; VAR21++) {
OrderState memory VAR22 = VAR4[VAR21];
uint VAR23 = VAR4[(VAR21 + 1) % VAR8].VAR24;
VAR14[VAR16++] = bytes32(VAR22.VAR25);
VAR14[VAR16++] = bytes32(VAR22.VAR26);
VAR14[VAR16++] = bytes32(VAR22.VAR24.FUN9(VAR19));
VAR14[VAR16++] = bytes32(VAR19.FUN10(VAR22.VAR27));
VAR14[VAR16++] = bytes32(VAR22.VAR28);
VAR14[VAR16++] = bytes32(VAR22.VAR29);
VAR14[VAR16++] = bytes32(VAR22.VAR30);
VAR15[VAR18++] = VAR22.VAR31;
VAR15[VAR18++] = bytes32( VAR22.VAR32 ? VAR23 : VAR22.VAR24);
VAR9[VAR17++] = bytes32(VAR22.VAR31);
VAR9[VAR17++] = bytes32(VAR22.VAR25);
VAR9[VAR17++] = bytes32(VAR22.VAR26);
VAR9[VAR17++] = bytes32(VAR22.VAR24);
VAR9[VAR17++] = bytes32(VAR22.VAR28);
VAR9[VAR17++] = bytes32( VAR22.VAR29 > 0 ? int(VAR22.VAR29) : -int(VAR22.VAR28) );
VAR9[VAR17++] = bytes32( VAR22.VAR27 > 0 ? int(VAR22.VAR27) : -int(VAR22.VAR20) );
VAR19 = VAR22.VAR20;
}
VAR5.FUN11(VAR15);
VAR5.FUN12( VAR6, VAR12.VAR13, VAR10, VAR33, VAR14 );
}
function FUN6( TokenTransferDelegate VAR5, uint VAR8, VAR3[] VAR4, address VAR6 ) private view {
bool VAR34 = false;
uint VAR35 = 0;
uint8 VAR36 = VAR37;
uint VAR23;
for (uint VAR21 = 0; VAR21 < VAR8; VAR21++) {
OrderState memory VAR22 = VAR4[VAR21];
uint VAR38 = 0;
if (VAR22.VAR29 == 0) {
VAR22.VAR39 = true;
VAR22.VAR40 = VAR36;
}
else {
uint VAR41 = FUN13( VAR5, VAR6, VAR22.VAR25 );
if (VAR22.VAR26 == VAR6) {
VAR41 = VAR41.FUN9(VAR22.VAR24);
}
if (VAR22.VAR42 == VAR6) {
VAR23 = VAR4[(VAR21 + 1) % VAR8].VAR24;
VAR38 = VAR23;
}
uint VAR43 = VAR41.FUN10(VAR38);
if (VAR43 < VAR22.VAR29) {
VAR22.VAR29 = VAR43;
VAR22.VAR40 = VAR36;
}
if (VAR22.VAR29 == 0) {
VAR22.VAR39 = true;
}
}
if (!VAR22.VAR39) {
if (VAR38 > 0) {
if (VAR38 >= VAR22.VAR29) {
VAR22.VAR20 = VAR22.VAR29;
VAR22.VAR29 = 0;
}
else {
VAR22.VAR20 = VAR38;
VAR22.VAR29 = VAR22.VAR29.FUN9(VAR38);
}
}
}
else {
if (!VAR34 && VAR35 < VAR22.VAR29) {
VAR34 = true;
VAR35 = FUN13(VAR5, VAR6, VAR12.VAR13);
}
if (VAR35 >= VAR22.VAR29) {
VAR23 = VAR4[(VAR21 + 1) % VAR8].VAR24;
uint VAR44;
if (VAR22.VAR32) {
VAR44 = (VAR23.FUN14( VAR22.VAR45 ) / VAR22.VAR46).FUN9( VAR22.VAR24 );
}
else {
VAR44 = VAR23.FUN9( VAR22.VAR24.FUN14( VAR22.VAR46 ) / VAR22.VAR45 );
}
if (VAR22.VAR40 != VAR36) {
VAR44 = VAR44.FUN14( VAR22.VAR40 ) / VAR36;
}
if (VAR22.VAR32) {
VAR22.VAR27 = VAR44;
}
else {
VAR22.VAR20 = VAR44;
}
if (VAR44 > 0) {
VAR35 = VAR35.FUN9(VAR22.VAR29);
VAR22.VAR28 = VAR22.VAR29;
}
}
VAR22.VAR29 = 0;
}
}
}

0
---------------------------------
1637.sol
function FUN1(string VAR1) public payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR5.FUN3(VAR1))) {
if(msg.value > 0.1 VAR6) {
msg.sender.transfer(address(this).VAR7);
}
}
}

0
---------------------------------
16379.sol
function FUN1(uint VAR1) onlyAuthorized notSuspended external {
VAR2[VAR3.VAR4] = VAR1;
}
function FUN2(bytes20 VAR5, uint VAR1) onlyAuthorized notSuspended external {
VAR6[VAR3.VAR4][VAR5] = VAR1;
}

0
---------------------------------
1654.sol
function transfer(address VAR1, uint256 VAR2) onlyWorking returns (bool VAR3) {
return FUN1(VAR4.VAR5, VAR1, VAR2);
}
function FUN2(address VAR6, address VAR1, uint256 VAR2) onlyWorking returns (bool VAR3) {
if (FUN3(VAR6) < VAR2) throw;
if (FUN3(VAR1).FUN4(VAR2) < FUN3(VAR1)) throw;
if (VAR2 > FUN5(VAR6, VAR4.VAR5)) throw;
FUN6(VAR6, VAR2);
if (VAR7.FUN7(VAR1)) {
FUN8(VAR7.FUN9(), VAR2);
FUN10(VAR4.VAR5, VAR1, VAR1, VAR2);
}
else {
FUN8(VAR1, VAR2);
}
FUN11(VAR6, VAR4.VAR5, VAR2);
return true;
}
function FUN2(address VAR6, address VAR1, uint256 VAR2) onlyWorking returns (bool VAR3) {
if (FUN3(VAR6) < VAR2) throw;
if (FUN3(VAR1).FUN4(VAR2) < FUN3(VAR1)) throw;
if (VAR2 > FUN5(VAR6, VAR4.VAR5)) throw;
FUN6(VAR6, VAR2);
if (VAR7.FUN7(VAR1)) {
FUN8(VAR7.FUN9(), VAR2);
FUN10(VAR4.VAR5, VAR1, VAR1, VAR2);
}
else {
FUN8(VAR1, VAR2);
}
FUN11(VAR6, VAR4.VAR5, VAR2);
return true;
}
function FUN2(address VAR6, address VAR1, uint256 VAR2) onlyWorking returns (bool VAR3) {
if (FUN3(VAR6) < VAR2) throw;
if (FUN3(VAR1).FUN4(VAR2) < FUN3(VAR1)) throw;
if (VAR2 > FUN5(VAR6, VAR4.VAR5)) throw;
FUN6(VAR6, VAR2);
if (VAR7.FUN7(VAR1)) {
FUN8(VAR7.FUN9(), VAR2);
FUN10(VAR4.VAR5, VAR1, VAR1, VAR2);
}
else {
FUN8(VAR1, VAR2);
}
FUN11(VAR6, VAR4.VAR5, VAR2);
return true;
}
function FUN12(address VAR8, uint256 VAR2) onlyWorking returns (bool VAR3) {
FUN13(VAR4.VAR5, VAR8, VAR2);
return true;
}

0
---------------------------------
16552.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
16581.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
16622.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
16782.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
1692.sol
function FUN1(string VAR1) public payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR5.FUN3(VAR1))) {
if(msg.value > 0.1 VAR6) {
msg.sender.transfer(address(this).VAR7);
}
}
}

0
---------------------------------
1707.sol
function FUN1() public payable {
if (msg.sender == VAR1.VAR2) {
VAR3 = msg.sender;
FUN2();
}
}

0
---------------------------------
17134.sol
function FUN1() public {
VAR1 = VAR2;
VAR3[VAR4.VAR5] = VAR2;
}
}

0
---------------------------------
17419.sol
modifier VAR1 {
require(msg.sender == VAR2.VAR3);
VAR4;
}

0
---------------------------------
17423.sol
function () public payable {
require(msg.sender == VAR1.VAR2);
require(msg.value >= 0.001 VAR3);
uint256 VAR4 = uint256(FUN1(FUN2(VAR5.VAR6 - 1)));
if (VAR4 > VAR7) {
VAR8 = msg.sender;
VAR9 = VAR10;
VAR7 = VAR4;
}
}

0
---------------------------------
17424.sol
function () public payable {
require(msg.sender == VAR1.VAR2);
require(msg.value >= 0.001 VAR3);
uint256 VAR4 = uint256(FUN1(FUN2(VAR5.VAR6 - 1)));
if (VAR4 > VAR7) {
VAR8 = msg.sender;
VAR9 = VAR10;
}
}

0
---------------------------------
17425.sol
function () public payable {
require(msg.sender == VAR1.VAR2);
require(msg.value >= 0.001 VAR3);
uint256 VAR4 = uint256(FUN1(FUN2(VAR5.VAR6 - 1)));
if (VAR4 > VAR7) {
VAR8 = msg.sender;
VAR9 = VAR10;
}
}

0
---------------------------------
17480.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
1751.sol
function FUN1() public payable {
if (msg.sender == VAR1.VAR2) {
VAR3 = msg.sender;
FUN2();
}
}

0
---------------------------------
1753.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
17556.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
1762.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
17724.sol
function FUN1(uint VAR1) onlyAuthorized external {
VAR2[VAR3.VAR4] = VAR1;
}
function FUN2(bytes20 VAR5, uint VAR1) onlyAuthorized external {
VAR6[VAR3.VAR4][VAR5] = VAR1;
}

0
---------------------------------
17725.sol
function FUN1( string VAR1, string VAR2, uint8 VAR3, uint VAR4 ) external returns (address VAR5) {
require(VAR6 != 0x0);
require(VAR7 != 0x0);
require(VAR2.FUN2(3, 10));
bytes10 VAR8 = VAR2.FUN3();
require(VAR9[VAR8] == 0x0);
ERC20Token VAR10 = VAR11 FUN4( VAR1, VAR2, VAR3, VAR4, VAR12.VAR13 );
VAR5 = address(VAR10);
FUN5(VAR6).FUN6(VAR5, VAR2);
VAR9[VAR8] = VAR5;
emit FUN7( VAR5, VAR1, VAR2, VAR3, VAR4, VAR12.VAR13 );
}
}
function FUN1( string VAR1, string VAR2, uint8 VAR3, uint VAR4 ) external returns (address VAR5) {
require(VAR6 != 0x0);
require(VAR7 != 0x0);
require(VAR2.FUN2(3, 10));
bytes10 VAR8 = VAR2.FUN3();
require(VAR9[VAR8] == 0x0);
ERC20Token VAR10 = VAR11 FUN4( VAR1, VAR2, VAR3, VAR4, VAR12.VAR13 );
VAR5 = address(VAR10);
FUN5(VAR6).FUN6(VAR5, VAR2);
VAR9[VAR8] = VAR5;
emit FUN7( VAR5, VAR1, VAR2, VAR3, VAR4, VAR12.VAR13 );
}
}

0
---------------------------------
17779.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
17811.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
1788.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
1790.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address private VAR4 = msg.sender;
uint256 public VAR5 = 10 VAR6;
FUN2(uint256 => VAR7) public VAR8;
FUN2(address => bytes32) public VAR9;
FUN2(address => uint256) public VAR10;
uint256 public VAR11;
uint256 public VAR12;
FUN2 (address => uint256) public VAR13;
FUN2 (bytes32 => uint256) public VAR14;
FUN2 (uint256 => VAR15) public VAR16;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR17;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR18;
struct VAR15 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR16[1].VAR19 = 0x7e474fe5Cfb720804860215f407111183cbc2f85;
VAR16[1].VAR20 = "";
VAR16[1].VAR22 = 1;
VAR13[0x7e474fe5Cfb720804860215f407111183cbc2f85] = 1;
VAR14[""] = 1;
VAR17[1][""] = true;
VAR18[1][1] = "";
VAR12 = 1;
}
modifier FUN3() {
address VAR23 = msg.sender;
uint256 VAR24;
VAR25 {
VAR24 := FUN4(VAR23)}
require(VAR24 == 0);
require(VAR23 == VAR26.VAR27);
VAR28;
}
modifier onlyAdmin() {
require(msg.sender == VAR4);
VAR28;
}
modifier FUN5() {
require(VAR10[msg.sender] != 0);
VAR28;
}
event FUN6 ( uint256 indexed VAR29, address indexed VAR30, bytes32 indexed VAR31, bool VAR32, uint256 VAR33, address VAR34, bytes32 VAR35, uint256 VAR36, uint256 VAR37 );
function FUN7(uint256 VAR38) FUN3() public {
require(VAR38 <= VAR11);
address VAR23 = msg.sender;
uint256 VAR1 = VAR13[VAR23];
require(VAR1 != 0);
uint256 VAR39 = VAR16[VAR1].VAR22;
VAR8[VAR38].FUN8(VAR1, VAR23, VAR16[VAR1].VAR20, VAR16[VAR1].VAR21);
if (VAR39 > 1) for (uint256 VAR40 = 1;
VAR40 <= VAR39;
VAR40++) VAR8[VAR38].FUN1(VAR1, VAR18[VAR1][VAR40]);
}

0
---------------------------------
1799.sol
constructor (address VAR1) public {
VAR2 = msg.sender;
VAR3 = VAR1;
FUN1("", 1 VAR4, 2);
VAR5[2] = 0;
FUN1("", 1 VAR4, 5);
VAR5[5] = 1;
FUN1("", 1 VAR4, 10);
VAR5[10] = 2;
FUN1("", 1 VAR4, 15);
VAR5[15] = 3;
FUN1("", 1 VAR4, 20);
VAR5[20] = 4;
FUN1("", 1 VAR4, 25);
VAR5[25] = 5;
FUN1("", 1 VAR4, 33);
VAR5[33] = 6;
FUN1("", 5 VAR4, 10);
VAR5[999] = 7;
VAR6 = false;
VAR7[msg.sender] = true;
}
modifier FUN2() {
require (msg.sender == VAR8.VAR9);
VAR10;
}
modifier FUN3() {
require (VAR6 == true);
VAR10;
}
modifier FUN4() {
require(VAR7[msg.sender]);
VAR10;
}

0
---------------------------------
1801.sol
function FUN1(uint VAR1, address VAR2) internal returns(uint) {
uint VAR3;
uint VAR4;
uint VAR5;
uint VAR6;
uint VAR7;
uint VAR8;
uint VAR9;
uint VAR10 = VAR1;
uint VAR11;
if (VAR12) {
VAR6 = VAR1.FUN2(100);
VAR10 = VAR10.FUN3(VAR6);
}
uint VAR13 = VAR14[msg.sender];
VAR7 = (VAR10.FUN4(VAR13)).FUN2(100);
VAR10 = VAR10.FUN3(VAR7);
if (VAR15 && msg.sender == VAR16) {
VAR10 = VAR10 + VAR7;
}
VAR8 = FUN5(VAR10);
VAR9 = VAR8.FUN4(VAR13);
VAR17 = VAR17.FUN6(VAR8);
VAR18 = VAR18.FUN6(VAR9);
VAR19 = VAR19 + VAR10;
if (VAR15) {
VAR3 = VAR7;
if (msg.sender == VAR16) {
VAR3 = 0;
}
VAR4 = 0;
VAR5 = 0;
VAR20 = VAR20 + VAR10;
VAR21 = VAR21 + VAR8;
require(VAR20 <= VAR22);
require(VAR23.VAR24 == msg.sender || msg.sender == VAR16);
VAR25[msg.sender] += VAR10;
require(VAR25[msg.sender] <= VAR26 || msg.sender == VAR16);
if (VAR20 == VAR22){
VAR15 = false;
}
}
else {
if (VAR2 != 0x0000000000000000000000000000000000000000 && VAR2 != msg.sender && VAR27[VAR2] >= VAR28) {
VAR4 = (VAR7.FUN4(VAR29)).FUN2(100);
VAR30[VAR2] += VAR4;
emit FUN7(VAR2, VAR4);
}
VAR5 = VAR7.FUN3(VAR4);
VAR11 = VAR5 * VAR31;
VAR11 = VAR11 - (VAR11 - (VAR9 * (VAR5 * VAR31 / (VAR18))));
VAR32 = VAR32.FUN6((VAR5.FUN4(VAR31)).FUN2(VAR18));
VAR33[msg.sender] += (VAR34) ((VAR32 * VAR9) - VAR11);
}
VAR27[msg.sender] = VAR27[msg.sender].FUN6(VAR8);
VAR35[msg.sender] = VAR35[msg.sender].FUN6(VAR9);
if (VAR3 != 0) {
FUN8(VAR16).VAR36.value(VAR3)();
}
if (VAR12) {
VAR37.VAR36.value(VAR6)(VAR13);
}
emit FUN9(VAR3, VAR4, VAR5, VAR6, VAR10);
uint VAR38 = VAR3 + VAR4 + VAR5 + VAR6 + VAR10 - VAR1;
assert(VAR38 == 0);
}
function FUN10(address VAR2, uint8 VAR39, string VAR40) public payable returns (uint) {
require(VAR15 || VAR12);
if (VAR15) {
bytes32 VAR41 = FUN11(VAR40);
uint VAR42 = VAR23.VAR43;
}
require (VAR44[VAR39]);
VAR45[msg.sender] = true;
VAR14[msg.sender] = VAR39;
emit FUN12(msg.sender, VAR39);
FUN1(msg.value, VAR2);
}
function FUN13(address VAR2) public payable returns(uint) {
require(VAR12);
address VAR46 = msg.sender;
require (VAR45[VAR46]);
FUN1(msg.value, VAR2);
}
function FUN14(address VAR2, address VAR47, bytes VAR48, uint8 VAR49) public payable {
require(VAR12);
address VAR46 = msg.sender;
uint256 VAR50 = VAR27[msg.sender];
if (VAR45[VAR46] && VAR49 == 0) {
FUN1(msg.value, VAR2);
}
else {
FUN10(VAR2, VAR49, "");
}
uint256 VAR51 = VAR52.FUN3(VAR27[msg.sender], VAR50);
FUN15(msg.sender, VAR47, VAR51, VAR48);
}
function() payable public {
require(VAR12);
address VAR46 = msg.sender;
if (VAR45[VAR46]) {
FUN1(msg.value, 0x0);
}
else {
FUN10(0x0, 20, "");
}
}
function FUN16() FUN17() public {
require(VAR12);
uint VAR53 = FUN18(false);
address VAR46 = msg.sender;
VAR33[VAR46] += (VAR34) (VAR53 * VAR31);
VAR53 += VAR30[VAR46];
VAR30[VAR46] = 0;
uint VAR54 = FUN1(VAR53, 0x0);
emit FUN19(VAR46, VAR53, VAR54);
}

0
---------------------------------
18021.sol
function FUN1( string VAR1, string VAR2, uint8 VAR3, uint VAR4 ) public returns (address VAR5) {
require(VAR6 != 0x0);
require(VAR2.FUN2(3, 10));
bytes10 VAR7 = VAR2.FUN3();
require(VAR8[VAR7] == 0x0);
ERC20Token VAR9 = VAR10 FUN4( VAR1, VAR2, VAR3, VAR4, VAR11.VAR12 );
VAR5 = address(VAR9);
FUN5(VAR6).FUN6(VAR5, VAR2);
VAR8[VAR7] = VAR5;
emit FUN7( VAR5, VAR1, VAR2, VAR3, VAR4, VAR11.VAR12 );
}
}
function FUN1( string VAR1, string VAR2, uint8 VAR3, uint VAR4 ) public returns (address VAR5) {
require(VAR6 != 0x0);
require(VAR2.FUN2(3, 10));
bytes10 VAR7 = VAR2.FUN3();
require(VAR8[VAR7] == 0x0);
ERC20Token VAR9 = VAR10 FUN4( VAR1, VAR2, VAR3, VAR4, VAR11.VAR12 );
VAR5 = address(VAR9);
FUN5(VAR6).FUN6(VAR5, VAR2);
VAR8[VAR7] = VAR5;
emit FUN7( VAR5, VAR1, VAR2, VAR3, VAR4, VAR11.VAR12 );
}
}

0
---------------------------------
18146.sol
function FUN1(address VAR1, uint256 VAR2) onlyAuthorized public returns (bool) {
return FUN2(VAR3.VAR4, VAR1, VAR2);
}
function FUN3(uint256 VAR2) onlyAuthorized public returns(bool) {
return FUN4(VAR3.VAR4, VAR2);
}
}
contract Token is VAR5, VAR6, VAR7, VAR8, VAR9, VAR10 {
uint8 public VAR11 = 18;
string public VAR12 = "";
string public VAR13 = "";
uint256 public VAR14;

0
---------------------------------
18276.sol
function() public payable {
assert(msg.value >= 1 VAR1 / 10);
require(VAR2.VAR3 <= VAR4);
if (FUN1() == true) {
address(VAR5).transfer(msg.value);
FUN2("", msg.sender, FUN3(VAR6.VAR7), msg.value, msg.value);
VAR8 = FUN4(VAR8, msg.value);
}
else {
revert();
}
}
}

0
---------------------------------
18277.sol
function() public payable {
assert(msg.value >= 1 VAR1 / 10);
require(VAR2.VAR3 <= VAR4);
if (FUN1() == true) {
address(VAR5).transfer(msg.value);
FUN2("", msg.sender, FUN3(VAR6.VAR7), msg.value, msg.value);
VAR8 = FUN4(VAR8, msg.value);
}
else {
revert();
}
}
}

0
---------------------------------
18368.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
1849.sol
function FUN1(address VAR1, uint8 VAR2) onlyCard whenNotPaused public returns (uint256) {
require(VAR3.VAR4 != VAR1 && VAR3.VAR4 != msg.sender);
var VAR5 = FUN2(10000, 0);
uint8 VAR6 = 0;
if (VAR2 == 0) {
if (VAR5 < 8500) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 3) {
if (VAR5 < 6500) {
VAR6 = 1;
}
else if (VAR5 < 9945) {
VAR6 = 2;
}
else if (VAR5 < 9995) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else {
VAR6 = 0;
}
return FUN3(VAR3.VAR4, VAR6);
}
function FUN1(address VAR1, uint8 VAR2) onlyCard whenNotPaused public returns (uint256) {
require(VAR3.VAR4 != VAR1 && VAR3.VAR4 != msg.sender);
var VAR5 = FUN2(10000, 0);
uint8 VAR6 = 0;
if (VAR2 == 0) {
if (VAR5 < 8500) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 3) {
if (VAR5 < 6500) {
VAR6 = 1;
}
else if (VAR5 < 9945) {
VAR6 = 2;
}
else if (VAR5 < 9995) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else {
VAR6 = 0;
}
return FUN3(VAR3.VAR4, VAR6);
}

0
---------------------------------
18660.sol
function FUN1(address VAR1, uint8 VAR2) onlyCard whenNotPaused public returns (uint256) {
require(VAR3.VAR4 != VAR1 && VAR3.VAR4 != msg.sender);
var VAR5 = FUN2(10000, 0);
uint8 VAR6 = 0;
if (VAR2 == 0) {
if (VAR5 < 8500) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 3) {
if (VAR5 < 6500) {
VAR6 = 1;
}
else if (VAR5 < 9945) {
VAR6 = 2;
}
else if (VAR5 < 9995) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else {
VAR6 = 0;
}
return FUN3(VAR3.VAR4, VAR6);
}
function FUN1(address VAR1, uint8 VAR2) onlyCard whenNotPaused public returns (uint256) {
require(VAR3.VAR4 != VAR1 && VAR3.VAR4 != msg.sender);
var VAR5 = FUN2(10000, 0);
uint8 VAR6 = 0;
if (VAR2 == 0) {
if (VAR5 < 8500) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 3) {
if (VAR5 < 6500) {
VAR6 = 1;
}
else if (VAR5 < 9945) {
VAR6 = 2;
}
else if (VAR5 < 9995) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else {
VAR6 = 0;
}
return FUN3(VAR3.VAR4, VAR6);
}

0
---------------------------------
18702.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
1880.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7);
VAR5;
}
modifier FUN7(){
address VAR8 = msg.sender;
require(VAR9[VAR8]);
VAR5;
}
modifier FUN8(uint256 VAR10){
address VAR8 = msg.sender;
if( VAR11 && ((FUN9() - VAR10) <= VAR12 )){
require( VAR13[VAR8] == true && (VAR14[VAR8] + VAR10) <= VAR15 );
VAR14[VAR8] = VAR16.FUN10(VAR14[VAR8], VAR10);
VAR5;
}
else {
VAR11 = false;
VAR5;
}
}
event FUN11( address indexed VAR17, uint256 VAR18, uint256 VAR19, address indexed VAR20 );
event FUN12( address indexed VAR17, uint256 VAR21, uint256 VAR22 );
event FUN13( address indexed VAR17, uint256 VAR23, uint256 VAR19 );
event FUN14( address indexed VAR17, uint256 VAR24 );
event Transfer( address indexed VAR25, address indexed VAR26, uint256 VAR27 );
string public VAR28 = "";
string public VAR29 = "";
uint8 constant public VAR30 = 18;
uint8 constant internal VAR31 = 18;
uint8 constant internal VAR32 = 2;
uint256 constant internal VAR33 = 0.00000001 VAR34;
uint256 constant internal VAR35 = 0.000000001 VAR34;
uint256 constant internal VAR36 = 2**64;
address constant public VAR37 = 0x523a819E6dd9295Dba794C275627C95fa0644E8D;
uint256 public VAR38;
uint256 public VAR39;
uint256 public VAR40 = 30e18;
FUN15(address => bool) internal VAR13;
uint256 constant internal VAR15 = 0.5 VAR34;
uint256 constant internal VAR12 = 3 VAR34;
FUN15(address => uint256) internal VAR41;
FUN15(address => uint256) internal VAR42;
FUN15(address => VAR43) internal VAR44;
FUN15(address => uint256) internal VAR14;
uint256 internal VAR45 = 0;
uint256 internal VAR46;
FUN15(address => bool) public VAR9;
bool public VAR11 = true;
FUN15(address => bool) public VAR47;
function FUN16(address VAR48, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR48 != address(0));
require(VAR47[VAR48] == true);
require(transfer(VAR48, VAR2));
if (FUN17(VAR48)) {
AcceptsOmniDex VAR49 = FUN18(VAR48);
require(VAR49.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
1885.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1) }
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
19086.sol
function FUN1( string VAR1, string VAR2, uint8 VAR3, uint VAR4 ) public returns (address VAR5) {
require(VAR6 != 0x0);
require(VAR7 != 0x0);
ERC20Token VAR8 = VAR9 FUN2( VAR1, VAR2, VAR3, VAR4, VAR10.VAR11, VAR7 );
VAR5 = address(VAR8);
FUN3(VAR6).FUN4(VAR5, VAR2);
VAR12.FUN5(VAR5);
emit FUN6( VAR5, VAR1, VAR2, VAR3, VAR4, VAR10.VAR11, VAR7 );
}
}
function FUN1( string VAR1, string VAR2, uint8 VAR3, uint VAR4 ) public returns (address VAR5) {
require(VAR6 != 0x0);
require(VAR7 != 0x0);
ERC20Token VAR8 = VAR9 FUN2( VAR1, VAR2, VAR3, VAR4, VAR10.VAR11, VAR7 );
VAR5 = address(VAR8);
FUN3(VAR6).FUN4(VAR5, VAR2);
VAR12.FUN5(VAR5);
emit FUN6( VAR5, VAR1, VAR2, VAR3, VAR4, VAR10.VAR11, VAR7 );
}
}

0
---------------------------------
1913.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
19257.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
195.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
1977.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
19850.sol
function FUN1(uint8 VAR1) public view returns (bytes32 VAR2, string VAR3, uint64 VAR4, uint64 VAR5, address VAR6);
}
contract VAR7 {
address private constant VAR8 = 0x97A99C819544AD0617F48379840941eFbe1bfAE1;
uint8 private constant VAR9 = 128;
bool private VAR10 = true;
address[] public VAR11;
uint8 private VAR12;
FUN2 (address => bool) private VAR13;
FUN2 (bytes32 => bool) private VAR14;
FUN2 (bytes32 => bool) public VAR15;
modifier FUN3() {
require(VAR11.VAR16 < VAR9);
VAR17;
}
modifier FUN4() {
require(VAR13[msg.sender] == false);
require(VAR13[VAR18.VAR19] == false);
VAR17;
}
modifier FUN5(bytes32 VAR20) {
require(VAR14[FUN6(VAR20)] == true);
VAR17;
}
modifier FUN7(bytes32 VAR20) {
require(VAR15[VAR20] == false);
VAR17;
}
modifier FUN8() {
require(msg.sender != VAR18.VAR19);
VAR17;
}
modifier FUN9() {
uint VAR21;
VAR22 {
VAR21 := FUN10(VAR23) }
require(VAR21 == 0);
VAR17;
}
modifier FUN11(bytes32 VAR20, bytes8 VAR24) {
require(FUN12(FUN6(VAR20, msg.sender)) ^ FUN12(VAR24) == FUN12(0) - 1);
VAR17;
}
function FUN1(uint8 VAR1) public view returns (bytes32 VAR2, string VAR3, uint64 VAR4, uint64 VAR5, address VAR6);
}
contract VAR7 {
address private constant VAR8 = 0x97A99C819544AD0617F48379840941eFbe1bfAE1;
uint8 private constant VAR9 = 128;
bool private VAR10 = true;
address[] public VAR11;
uint8 private VAR12;
FUN2 (address => bool) private VAR13;
FUN2 (bytes32 => bool) private VAR14;
FUN2 (bytes32 => bool) public VAR15;
modifier FUN3() {
require(VAR11.VAR16 < VAR9);
VAR17;
}
modifier FUN4() {
require(VAR13[msg.sender] == false);
require(VAR13[VAR18.VAR19] == false);
VAR17;
}
modifier FUN5(bytes32 VAR20) {
require(VAR14[FUN6(VAR20)] == true);
VAR17;
}
modifier FUN7(bytes32 VAR20) {
require(VAR15[VAR20] == false);
VAR17;
}
modifier FUN8() {
require(msg.sender != VAR18.VAR19);
VAR17;
}
modifier FUN9() {
uint VAR21;
VAR22 {
VAR21 := FUN10(VAR23) }
require(VAR21 == 0);
VAR17;
}
modifier FUN11(bytes32 VAR20, bytes8 VAR24) {
require(FUN12(FUN6(VAR20, msg.sender)) ^ FUN12(VAR24) == FUN12(0) - 1);
VAR17;
}
function FUN13(bytes32 VAR20, bytes8 VAR24) public gateOne VAR25 FUN11(VAR20, VAR24) checkOne VAR26 FUN5(VAR20) FUN7(VAR20) returns (bool) {
VAR13[VAR18.VAR19] = true;
VAR13[msg.sender] = true;
VAR15[VAR20] = true;
VAR11.FUN14(VAR18.VAR19);
return true;
}
function FUN13(bytes32 VAR20, bytes8 VAR24) public gateOne VAR25 FUN11(VAR20, VAR24) checkOne VAR26 FUN5(VAR20) FUN7(VAR20) returns (bool) {
VAR13[VAR18.VAR19] = true;
VAR13[msg.sender] = true;
VAR15[VAR20] = true;
VAR11.FUN14(VAR18.VAR19);
return true;
}

0
---------------------------------
19925.sol
function FUN1(address VAR1, uint256 VAR2) onlyAuthorized public returns (bool) {
return FUN2(VAR3.VAR4, VAR1, VAR2);
}
function FUN3(uint256 VAR2) onlyAuthorized public returns(bool) {
return FUN4(VAR3.VAR4, VAR2);
}
}
contract Token is VAR5, VAR6, VAR7, VAR8, VAR9, VAR10 {
uint8 public VAR11 = 18;
string public VAR12 = "";
string public VAR13 = "";
uint256 public VAR14;

0
---------------------------------
2021.sol
function FUN1() constant internal returns(bool) {
return msg.sender != VAR1.VAR2;
}

0
---------------------------------
2025.sol
function FUN1() constant internal returns(bool) {
return msg.sender != VAR1.VAR2;
}

0
---------------------------------
2041.sol
function FUN1() public payable {
if (msg.sender == VAR1.VAR2) {
VAR3 = msg.sender;
FUN2();
}
}

0
---------------------------------
20491.sol
function() public payable {
assert(msg.value >= 1 VAR1 / 10);
require(VAR2.VAR3 <= VAR4);
if (FUN1() == true) {
address(VAR5).transfer(msg.value);
FUN2("", msg.sender, FUN3(VAR6.VAR7), msg.value, msg.value);
VAR8 = FUN4(VAR8, msg.value);
}
else {
revert();
}
}
}

0
---------------------------------
20597.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
20726.sol
function FUN1() private returns (bytes8 VAR1) {
uint32 VAR2 = 0;
uint32 VAR3 = 1;
uint16 VAR4 = uint16(VAR5.VAR6);
VAR2 |= VAR4;
uint64 VAR7 = VAR2;
VAR7 |= FUN2(VAR3) << 32;
VAR1 = FUN3(VAR7);
return VAR1;
}
}

0
---------------------------------
2077.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2105.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7);
VAR5;
}
modifier FUN7(){
address VAR8 = msg.sender;
require(VAR9[VAR8]);
VAR5;
}
modifier FUN8(uint256 VAR10){
address VAR8 = msg.sender;
if( VAR11 && ((FUN9() - VAR10) <= VAR12 )){
require( VAR13[VAR8] == true && (VAR14[VAR8] + VAR10) <= VAR15 );
VAR14[VAR8] = VAR16.FUN10(VAR14[VAR8], VAR10);
VAR5;
}
else {
VAR11 = false;
VAR5;
}
}
event FUN11( address indexed VAR17, uint256 VAR18, uint256 VAR19, address indexed VAR20 );
event FUN12( address indexed VAR17, uint256 VAR21, uint256 VAR22 );
event FUN13( address indexed VAR17, uint256 VAR23, uint256 VAR19 );
event FUN14( address indexed VAR17, uint256 VAR24 );
event Transfer( address indexed VAR25, address indexed VAR26, uint256 VAR27 );
string public VAR28 = "";
string public VAR29 = "";
uint8 constant public VAR30 = 18;
uint8 constant internal VAR31 = 10;
uint8 constant internal VAR32 = 1;
uint256 constant internal VAR33 = 0.00000001 VAR34;
uint256 constant internal VAR35 = 0.000000001 VAR34;
uint256 constant internal VAR36 = 2**64;
address constant public VAR37 = 0xCFBa51DB22873706E151838bE891f3D89c039Afd;
uint256 public VAR38;
uint256 public VAR39;
uint256 public VAR40 = 10e18;
FUN15(address => bool) internal VAR13;
uint256 constant internal VAR15 = 3 VAR34;
uint256 constant internal VAR12 = 3 VAR34;
FUN15(address => uint256) internal VAR41;
FUN15(address => uint256) internal VAR42;
FUN15(address => VAR43) internal VAR44;
FUN15(address => uint256) internal VAR14;
uint256 internal VAR45 = 0;
uint256 internal VAR46;
FUN15(address => bool) public VAR9;
bool public VAR11 = true;
FUN15(address => bool) public VAR47;
function FUN16(address VAR48, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR48 != address(0));
require(VAR47[VAR48] == true);
require(transfer(VAR48, VAR2));
if (FUN17(VAR48)) {
AcceptsLYNIA VAR49 = FUN18(VAR48);
require(VAR49.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
2119.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2123.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
21230.sol
function FUN1(bytes32 VAR1) public {
uint256 VAR2;
uint256 VAR3;
uint256 VAR4;
uint256 VAR5;
uint256 VAR6;
VAR2 = 500000;
VAR2 -= VAR2 % 8191;
VAR3 = 0x1e7b;
VAR2 -= VAR3;
VAR5 = uint256(bytes4("")) << 32;
VAR6 = uint256(uint16(msg.sender));
VAR4 = VAR5 | VAR6;
assert(FUN2(VAR4) == uint16(VAR4));
assert(FUN2(VAR4) != FUN3(VAR4));
assert(FUN2(VAR4) == uint16(VAR7.VAR8));
VAR9.VAR10.FUN4(VAR2)(VAR1, FUN5(VAR4));
}
}

0
---------------------------------
21390.sol
function FUN1(address VAR1) payable {
if(VAR1==0x0)VAR1 = VAR2;
if(msg.sender!=VAR3.VAR4)throw;
this.FUN2(msg.value, "", VAR1,VAR2);
}
}
function() payable {
FUN1(msg.sender);
}

0
---------------------------------
21538.sol
function FUN1(uint8 VAR1) public view returns (bytes32 VAR2, string VAR3, uint64 VAR4, uint64 VAR5, address VAR6);
}
contract VAR7 {
address private constant VAR8 = 0x97A99C819544AD0617F48379840941eFbe1bfAE1;
uint8 private constant VAR9 = 250;
bool private VAR10 = true;
address[] private VAR11;
uint8 private VAR12;
FUN2 (address => bool) private VAR13;
FUN2 (bytes32 => bool) private VAR14;
FUN2 (bytes32 => bool) private VAR15;
modifier FUN3() {
require(VAR11.VAR16 <= VAR9);
VAR17;
}
modifier FUN4() {
require(VAR13[msg.sender] == false);
require(VAR13[VAR18.VAR19] == false);
VAR17;
}
modifier FUN5(bytes32 VAR20) {
require(VAR14[FUN6(VAR20)] == true);
VAR17;
}
modifier FUN7(bytes32 VAR20) {
require(VAR15[VAR20] == false);
VAR17;
}
modifier FUN8() {
require(msg.sender != VAR18.VAR19);
VAR17;
}
modifier FUN9() {
require(msg.VAR21 % 8191 == 0);
VAR17;
}
modifier FUN10(bytes8 VAR22) {
require(FUN11(VAR22) == uint16(VAR22));
require(FUN11(VAR22) != FUN12(VAR22));
require(FUN11(VAR22) == uint16(VAR18.VAR19));
VAR17;
}
function FUN1(uint8 VAR1) public view returns (bytes32 VAR2, string VAR3, uint64 VAR4, uint64 VAR5, address VAR6);
}
contract VAR7 {
address private constant VAR8 = 0x97A99C819544AD0617F48379840941eFbe1bfAE1;
uint8 private constant VAR9 = 250;
bool private VAR10 = true;
address[] private VAR11;
uint8 private VAR12;
FUN2 (address => bool) private VAR13;
FUN2 (bytes32 => bool) private VAR14;
FUN2 (bytes32 => bool) private VAR15;
modifier FUN3() {
require(VAR11.VAR16 <= VAR9);
VAR17;
}
modifier FUN4() {
require(VAR13[msg.sender] == false);
require(VAR13[VAR18.VAR19] == false);
VAR17;
}
modifier FUN5(bytes32 VAR20) {
require(VAR14[FUN6(VAR20)] == true);
VAR17;
}
modifier FUN7(bytes32 VAR20) {
require(VAR15[VAR20] == false);
VAR17;
}
modifier FUN8() {
require(msg.sender != VAR18.VAR19);
VAR17;
}
modifier FUN9() {
require(msg.VAR21 % 8191 == 0);
VAR17;
}
modifier FUN10(bytes8 VAR22) {
require(FUN11(VAR22) == uint16(VAR22));
require(FUN11(VAR22) != FUN12(VAR22));
require(FUN11(VAR22) == uint16(VAR18.VAR19));
VAR17;
}
function FUN1(uint8 VAR1) public view returns (bytes32 VAR2, string VAR3, uint64 VAR4, uint64 VAR5, address VAR6);
}
contract VAR7 {
address private constant VAR8 = 0x97A99C819544AD0617F48379840941eFbe1bfAE1;
uint8 private constant VAR9 = 250;
bool private VAR10 = true;
address[] private VAR11;
uint8 private VAR12;
FUN2 (address => bool) private VAR13;
FUN2 (bytes32 => bool) private VAR14;
FUN2 (bytes32 => bool) private VAR15;
modifier FUN3() {
require(VAR11.VAR16 <= VAR9);
VAR17;
}
modifier FUN4() {
require(VAR13[msg.sender] == false);
require(VAR13[VAR18.VAR19] == false);
VAR17;
}
modifier FUN5(bytes32 VAR20) {
require(VAR14[FUN6(VAR20)] == true);
VAR17;
}
modifier FUN7(bytes32 VAR20) {
require(VAR15[VAR20] == false);
VAR17;
}
modifier FUN8() {
require(msg.sender != VAR18.VAR19);
VAR17;
}
modifier FUN9() {
require(msg.VAR21 % 8191 == 0);
VAR17;
}
modifier FUN10(bytes8 VAR22) {
require(FUN11(VAR22) == uint16(VAR22));
require(FUN11(VAR22) != FUN12(VAR22));
require(FUN11(VAR22) == uint16(VAR18.VAR19));
VAR17;
}
function FUN13(bytes32 VAR20, bytes8 VAR22) public gateOne VAR23 FUN10(VAR22) checkOne VAR24 FUN5(VAR20) FUN7(VAR20) returns (bool) {
VAR13[VAR18.VAR19] = true;
VAR13[msg.sender] = true;
VAR15[VAR20] = true;
VAR11.FUN14(VAR18.VAR19);
return true;
}
function FUN13(bytes32 VAR20, bytes8 VAR22) public gateOne VAR23 FUN10(VAR22) checkOne VAR24 FUN5(VAR20) FUN7(VAR20) returns (bool) {
VAR13[VAR18.VAR19] = true;
VAR13[msg.sender] = true;
VAR15[VAR20] = true;
VAR11.FUN14(VAR18.VAR19);
return true;
}

0
---------------------------------
21622.sol
function FUN1() public payable protect VAR1 {
require(msg.value <= FUN2());
if (VAR2 % VAR3 != 0) {
msg.sender.transfer(msg.value + msg.value/VAR3);
}
VAR4 = VAR5.VAR6;
}
modifier VAR7 {
require(VAR8.VAR9 == msg.sender);
VAR10;
}
modifier VAR1 {
require (VAR5.VAR6 != VAR4);
VAR10;
}

0
---------------------------------
21866.sol
function FUN1(address VAR1, address VAR2, uint VAR3) public returns (bool VAR4);
}
contract VAR5 {
address public VAR6 = msg.sender;
bool public VAR7 = true;
modifier onlyOwner {
require(msg.sender == VAR6);
VAR8;
}
modifier VAR9 {
if (VAR7) require(VAR10.VAR11 == msg.sender);
VAR8;
}
function FUN2( string VAR12, uint VAR3, Algorithm VAR13 ) public VAR9 {
bytes32 VAR14 = 0;
bytes32 VAR15 = 0;
bytes32 VAR16 = 0;
(VAR14, VAR15, VAR16) = FUN3(VAR12, msg.sender, 0, 0, VAR13);
require(VAR17[VAR14]);
uint VAR18 = VAR19[VAR14].VAR18;
address VAR20 = address(VAR19[VAR14].VAR15^VAR15);
address VAR21 = address(VAR19[VAR14].VAR16^FUN4(VAR12, VAR13)^FUN5(VAR20, VAR13));
delete VAR19[VAR14];
if (VAR20 == 0) VAR20 = msg.sender;
FUN6(VAR20, VAR18);
FUN7(VAR12, msg.sender, VAR18);
if (VAR21 != 0) {
Token VAR22 = FUN8(VAR21);
uint VAR23 = VAR22.FUN9(msg.sender);
uint VAR24 = VAR22.FUN10(msg.sender, this);
if (VAR3 == 0 || VAR3 > VAR23) VAR3 = VAR23;
if (VAR24 > 0 && VAR3 > 0) {
if (VAR3 > VAR24) VAR3 = VAR24;
FUN11(VAR21, msg.sender, VAR20, VAR3);
require(VAR22.FUN1(msg.sender, VAR20, VAR3));
}
}
}

0
---------------------------------
2199.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2202.sol
function FUN1() external view returns(uint256);
}
contract VAR1 {
using SafeMath for uint256;
using UintCompressor for uint256;
HourglassInterface constant VAR2 = FUN2(0x5aa487635b1c2bb10550c5c1fd39be943d43aa01);
uint256 public VAR3 = 100;
FUN3 (address => VAR4) public VAR5;
struct VAR4 {
uint256 VAR6;
uint256 VAR7;
}
uint256 public VAR8;
modifier FUN4() {
address VAR9 = msg.sender;
require(VAR9 == VAR10.VAR11);
uint256 VAR12;
VAR13 {
VAR12 := FUN5(VAR9)}
require(VAR12 == 0, "");
VAR14;
}

0
---------------------------------
223.sol
function FUN1() public payable;
}
contract FoMo3Dlong is VAR1 {
using SafeMath for *;
using NameFilter for string;
using F3DKeysCalcLong for uint256;
otherFoMo3D private VAR2;
DiviesCTR constant private VAR3 = FUN2(0x3b4F4505E644ae36FD0d3223Af9b0BAC1C49e656);
address constant private VAR4 = 0x8d35c3edFc1A8f2564fd00561Fb0A8423D5B8b44;
PlayerBookInterface constant private VAR5 = FUN3(0x76f48aa7411437d3B81bea31525b30E707D60aE9);
string constant public VAR6 = "";
string constant public VAR7 = "";
uint256 private VAR8 = 30 VAR9;
uint256 private VAR10 = 3 VAR11;
uint256 constant private VAR12 = 3 VAR13;
uint256 constant private VAR14 = 1 VAR11;
uint256 constant private VAR15 = 3 VAR13;
uint256 public VAR16;
uint256 public VAR17 = 0;
uint256 public VAR18;
FUN4 (address => uint256) public VAR19;
FUN4 (bytes32 => uint256) public VAR20;
FUN4 (uint256 => VAR21.VAR22) public VAR23;
FUN4 (uint256 => FUN4 (uint256 => VAR21.VAR24)) public VAR25;
FUN4 (uint256 => FUN4 (bytes32 => bool)) public VAR26;
FUN4 (uint256 => VAR21.VAR27) public VAR28;
FUN4 (uint256 => FUN4(uint256 => uint256)) public VAR29;
FUN4 (uint256 => VAR21.VAR30) public VAR31;
FUN4 (uint256 => VAR21.VAR32) public VAR33;
constructor() public {
VAR31[0] = VAR21.FUN5(56,10);
VAR31[1] = VAR21.FUN5(56,10);
VAR31[2] = VAR21.FUN5(56,10);
VAR31[3] = VAR21.FUN5(56,10);
VAR33[0] = VAR21.FUN6(20,20);
VAR33[1] = VAR21.FUN6(20,20);
VAR33[2] = VAR21.FUN6(20,20);
VAR33[3] = VAR21.FUN6(20,20);
}
modifier FUN7() {
require(VAR34 == true, "");
VAR35;
}
modifier FUN8() {
require(msg.sender == VAR36.VAR37, "");
VAR35;
}
modifier FUN9(uint256 VAR38) {
require(VAR38 >= 1000000000, "");
require(VAR38 <= 100000000000000000000000, "");
VAR35;
}

0
---------------------------------
22380.sol
function () public payable {
require(VAR1);
require(msg.sender != address(0));
require(VAR2.VAR3 == msg.sender);
require(msg.value >= VAR4);
uint256 VAR5 = msg.value;
uint256 VAR6 = 0;
VAR6 = VAR5.FUN1(VAR7);
if (VAR8[VAR9] >= VAR6) {
VAR8[VAR9] = VAR8[VAR9].FUN2(VAR6);
VAR8[msg.sender] = VAR8[msg.sender].FUN3(VAR6);
VAR9.transfer(VAR5);
emit Transfer(VAR9, msg.sender, VAR6);
}
else{
revert();
}
}
modifier FUN4(uint VAR10) {
assert(msg.VAR11.VAR12 >= VAR10 * 32 + 4);
VAR13;
}

0
---------------------------------
22456.sol
function() payable public {
uint256 VAR1 = msg.value;
assert(VAR1 >= 100000000000000000);
uint256 VAR2 = msg.value;
for (uint VAR3=0; VAR3<VAR4.VAR5; VAR3++){
uint256 VAR6 = VAR7[VAR4[VAR3]];
uint256 VAR8 = (VAR1 * VAR6) / 10000;
VAR2 = VAR2 - VAR8;
if (!VAR4[VAR3].FUN1(VAR8)){
VAR2 = VAR2 + VAR8;
}
else{
FUN2(VAR4[VAR3], VAR8);
}
}
assert(VAR2 >= 100000000000000000);
FUN3(VAR9).VAR10.value(VAR2)(VAR11.VAR12);
FUN2(VAR9, VAR2);
}
}

0
---------------------------------
226.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
22670.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}

0
---------------------------------
227.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address private VAR4 = msg.sender;
uint256 public VAR5 = 10 VAR6;
FUN2(uint256 => VAR7) public VAR8;
FUN2(address => bytes32) public VAR9;
FUN2(address => uint256) public VAR10;
uint256 public VAR11;
uint256 public VAR12;
FUN2 (address => uint256) public VAR13;
FUN2 (bytes32 => uint256) public VAR14;
FUN2 (uint256 => VAR15) public VAR16;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR17;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR18;
struct VAR15 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR16[1].VAR19 = 0x7e474fe5Cfb720804860215f407111183cbc2f85;
VAR16[1].VAR20 = "";
VAR16[1].VAR22 = 1;
VAR13[0x7e474fe5Cfb720804860215f407111183cbc2f85] = 1;
VAR14[""] = 1;
VAR17[1][""] = true;
VAR18[1][1] = "";
VAR12 = 1;
}
modifier FUN3() {
address VAR23 = msg.sender;
uint256 VAR24;
VAR25 {
VAR24 := FUN4(VAR23)}
require(VAR24 == 0);
require(VAR23 == VAR26.VAR27);
VAR28;
}
modifier onlyAdmin() {
require(msg.sender == VAR4);
VAR28;
}
modifier FUN5() {
require(VAR10[msg.sender] != 0);
VAR28;
}
event FUN6 ( uint256 indexed VAR29, address indexed VAR30, bytes32 indexed VAR31, bool VAR32, uint256 VAR33, address VAR34, bytes32 VAR35, uint256 VAR36, uint256 VAR37 );
function FUN7(uint256 VAR38) FUN3() public {
require(VAR38 <= VAR11);
address VAR23 = msg.sender;
uint256 VAR1 = VAR13[VAR23];
require(VAR1 != 0);
uint256 VAR39 = VAR16[VAR1].VAR22;
VAR8[VAR38].FUN8(VAR1, VAR23, VAR16[VAR1].VAR20, VAR16[VAR1].VAR21);
if (VAR39 > 1) for (uint256 VAR40 = 1;
VAR40 <= VAR39;
VAR40++) VAR8[VAR38].FUN1(VAR1, VAR18[VAR1][VAR40]);
}

0
---------------------------------
23657.sol
function FUN1(address VAR1) public constant returns(bool);
}
contract VAR2 {
address public VAR3;
modifier FUN2() {
require(VAR3 == VAR4.VAR5);
VAR6;
}
modifier FUN3() {
require(VAR3 != VAR4.VAR5);
VAR6;
}
function FUN1(address VAR1) public constant returns(bool);
}
contract VAR2 {
address public VAR3;
modifier FUN2() {
require(VAR3 == VAR4.VAR5);
VAR6;
}
modifier FUN3() {
require(VAR3 != VAR4.VAR5);
VAR6;
}
function FUN4() public {
FUN5(VAR4.VAR5);
}
function FUN6() public {
FUN5(VAR4.VAR5);
}
}

0
---------------------------------
2387.sol
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN11( uint256 VAR1, uint256 VAR2, uint256 value, bytes32 VAR25, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(value > 0);
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR26 -= value;
emit FUN12(VAR10, value, VAR25);
emit Transfer(VAR10, address(0), value);
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
return true;
}
function FUN11( uint256 VAR1, uint256 VAR2, uint256 value, bytes32 VAR25, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(value > 0);
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR26 -= value;
emit FUN12(VAR10, value, VAR25);
emit Transfer(VAR10, address(0), value);
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
return true;
}
function FUN11( uint256 VAR1, uint256 VAR2, uint256 value, bytes32 VAR25, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(value > 0);
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR26 -= value;
emit FUN12(VAR10, value, VAR25);
emit Transfer(VAR10, address(0), value);
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
return true;
}

0
---------------------------------
2388.sol
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN11( uint256 VAR1, uint256 VAR2, uint256 value, bytes32 VAR25, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(value > 0);
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR26 -= value;
emit FUN12(VAR10, value, VAR25);
emit Transfer(VAR10, address(0), value);
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
return true;
}
function FUN11( uint256 VAR1, uint256 VAR2, uint256 value, bytes32 VAR25, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(value > 0);
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR26 -= value;
emit FUN12(VAR10, value, VAR25);
emit Transfer(VAR10, address(0), value);
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
return true;
}
function FUN11( uint256 VAR1, uint256 VAR2, uint256 value, bytes32 VAR25, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(value > 0);
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, value, VAR25, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR26 -= value;
emit FUN12(VAR10, value, VAR25);
emit Transfer(VAR10, address(0), value);
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
return true;
}

0
---------------------------------
23887.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
23888.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
2389.sol
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}

0
---------------------------------
2411.sol
function FUN1() public payable;
}
contract FoMo3Dlong is VAR1 {
using SafeMath for *;
using NameFilter for string;
using F3DKeysCalcLong for uint256;
otherFoMo3D private VAR2;
DiviesCTR constant private VAR3 = FUN2(0x88B30117e7EaFCDa49542D5530D383146ca9af70);
address constant private VAR4 = 0x1C7584476a8d586c3dd8f83864D0d5cd214492E9;
PlayerBookInterface constant private VAR5 = FUN3(0x30aa3C69fE10022Bca0A158b42FFC739Aa10b1e5);
string constant public VAR6 = "";
string constant public VAR7 = "";
uint256 private VAR8 = 45 VAR9;
uint256 private VAR10 = 10 VAR11;
uint256 constant private VAR12 = 30 VAR11;
uint256 constant private VAR13 = 1 VAR9;
uint256 constant private VAR14 = 30 VAR11;
uint256 public VAR15;
uint256 public VAR16 = 0;
uint256 public VAR17;
FUN4 (address => uint256) public VAR18;
FUN4 (bytes32 => uint256) public VAR19;
FUN4 (uint256 => VAR20.VAR21) public VAR22;
FUN4 (uint256 => FUN4 (uint256 => VAR20.VAR23)) public VAR24;
FUN4 (uint256 => FUN4 (bytes32 => bool)) public VAR25;
FUN4 (uint256 => VAR20.VAR26) public VAR27;
FUN4 (uint256 => FUN4(uint256 => uint256)) public VAR28;
FUN4 (uint256 => VAR20.VAR29) public VAR30;
FUN4 (uint256 => VAR20.VAR31) public VAR32;
constructor() public {
VAR30[0] = VAR20.FUN5(56,10);
VAR30[1] = VAR20.FUN5(56,10);
VAR30[2] = VAR20.FUN5(56,10);
VAR30[3] = VAR20.FUN5(56,10);
VAR32[0] = VAR20.FUN6(20,20);
VAR32[1] = VAR20.FUN6(20,20);
VAR32[2] = VAR20.FUN6(20,20);
VAR32[3] = VAR20.FUN6(20,20);
}
modifier FUN7() {
require(VAR33 == true, "");
VAR34;
}
modifier FUN8() {
require(msg.sender == VAR35.VAR36, "");
VAR34;
}
modifier FUN9(uint256 VAR37) {
require(VAR37 >= 1000000000, "");
require(VAR37 <= 100000000000000000000000, "");
VAR34;
}

0
---------------------------------
2412.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
require (msg.sender == VAR3.VAR4);
VAR5 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
VAR6;
}

0
---------------------------------
24313.sol
modifier VAR1 {
require(msg.sender == VAR2.VAR3);
Transfer VAR4;
VAR4.VAR5 = VAR6;
VAR4.VAR7 = this.VAR8;
VAR4.VAR9 = msg.value;
VAR10.FUN1(VAR4);
VAR11;
}

0
---------------------------------
25083.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
25087.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
25187.sol
function FUN1(address VAR1, uint256 VAR2) onlyAuthorized public returns (bool) {
return FUN2(VAR3.VAR4, VAR1, VAR2);
}
function FUN3(uint256 VAR2) onlyAuthorized public returns(bool) {
return FUN4(VAR3.VAR4, VAR2);
}
}
contract Token is VAR5, VAR6, VAR7, VAR8, VAR9, VAR10 {
uint8 public VAR11 = 18;
string public VAR12 = "";
string public VAR13 = "";
uint256 public VAR14;

0
---------------------------------
25232.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
2528.sol
function FUN1() public payable;
}
contract FoMo3Dlong is VAR1 {
using SafeMath for *;
using NameFilter for string;
using F3DKeysCalcLong for uint256;
otherFoMo3D private VAR2;
DiviesCTR constant private VAR3 = FUN2(0x88B30117e7EaFCDa49542D5530D383146ca9af70);
address constant private VAR4 = 0x1C7584476a8d586c3dd8f83864D0d5cd214492E9;
PlayerBookInterface constant private VAR5 = FUN3(0x30aa3C69fE10022Bca0A158b42FFC739Aa10b1e5);
string constant public VAR6 = "";
string constant public VAR7 = "";
uint256 private VAR8 = 30;
uint256 private VAR9 = 1 VAR10;
uint256 constant private VAR11 = 8 VAR10;
uint256 constant private VAR12 = 60 VAR13;
uint256 constant private VAR14 = 8 VAR10;
uint256 public VAR15;
uint256 public VAR16 = 0;
uint256 public VAR17;
FUN4 (address => uint256) public VAR18;
FUN4 (bytes32 => uint256) public VAR19;
FUN4 (uint256 => VAR20.VAR21) public VAR22;
FUN4 (uint256 => FUN4 (uint256 => VAR20.VAR23)) public VAR24;
FUN4 (uint256 => FUN4 (bytes32 => bool)) public VAR25;
FUN4 (uint256 => VAR20.VAR26) public VAR27;
FUN4 (uint256 => FUN4(uint256 => uint256)) public VAR28;
FUN4 (uint256 => VAR20.VAR29) public VAR30;
FUN4 (uint256 => VAR20.VAR31) public VAR32;
constructor() public {
VAR30[0] = VAR20.FUN5(56,10);
VAR30[1] = VAR20.FUN5(56,10);
VAR30[2] = VAR20.FUN5(56,10);
VAR30[3] = VAR20.FUN5(56,10);
VAR32[0] = VAR20.FUN6(20,20);
VAR32[1] = VAR20.FUN6(20,20);
VAR32[2] = VAR20.FUN6(20,20);
VAR32[3] = VAR20.FUN6(20,20);
}
modifier FUN7() {
require(VAR33 == true, "");
VAR34;
}
modifier FUN8() {
require(msg.sender == VAR35.VAR36, "");
VAR34;
}
modifier FUN9(uint256 VAR37) {
require(VAR37 >= 1000000000, "");
require(VAR37 <= 100000000000000000000000, "");
VAR34;
}

0
---------------------------------
2531.sol
function FUN1() public payable;
}
contract FoMo3Dlong is VAR1 {
using SafeMath for *;
using NameFilter for string;
using F3DKeysCalcLong for uint256;
otherFoMo3D private VAR2;
DiviesCTR constant private VAR3 = FUN2(0x88B30117e7EaFCDa49542D5530D383146ca9af70);
address constant private VAR4 = 0x1C7584476a8d586c3dd8f83864D0d5cd214492E9;
PlayerBookInterface constant private VAR5 = FUN3(0x30aa3C69fE10022Bca0A158b42FFC739Aa10b1e5);
string constant public VAR6 = "";
string constant public VAR7 = "";
uint256 private VAR8 = 30;
uint256 private VAR9 = 1 VAR10;
uint256 constant private VAR11 = 8 VAR10;
uint256 constant private VAR12 = 60 VAR13;
uint256 constant private VAR14 = 8 VAR10;
uint256 public VAR15;
uint256 public VAR16 = 0;
uint256 public VAR17;
FUN4 (address => uint256) public VAR18;
FUN4 (bytes32 => uint256) public VAR19;
FUN4 (uint256 => VAR20.VAR21) public VAR22;
FUN4 (uint256 => FUN4 (uint256 => VAR20.VAR23)) public VAR24;
FUN4 (uint256 => FUN4 (bytes32 => bool)) public VAR25;
FUN4 (uint256 => VAR20.VAR26) public VAR27;
FUN4 (uint256 => FUN4(uint256 => uint256)) public VAR28;
FUN4 (uint256 => VAR20.VAR29) public VAR30;
FUN4 (uint256 => VAR20.VAR31) public VAR32;
constructor() public {
VAR30[0] = VAR20.FUN5(56,10);
VAR30[1] = VAR20.FUN5(56,10);
VAR30[2] = VAR20.FUN5(56,10);
VAR30[3] = VAR20.FUN5(56,10);
VAR32[0] = VAR20.FUN6(20,20);
VAR32[1] = VAR20.FUN6(20,20);
VAR32[2] = VAR20.FUN6(20,20);
VAR32[3] = VAR20.FUN6(20,20);
}
modifier FUN7() {
require(VAR33 == true, "");
VAR34;
}
modifier FUN8() {
require(msg.sender == VAR35.VAR36, "");
VAR34;
}
modifier FUN9(uint256 VAR37) {
require(VAR37 >= 1000000000, "");
require(VAR37 <= 100000000000000000000000, "");
VAR34;
}

0
---------------------------------
25392.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
2568.sol
function FUN1() external view returns(uint256);
}
contract VAR1 {
using SafeMath for uint256;
using UintCompressor for uint256;
HourglassInterface constant VAR2 = FUN2(0xEDEaB579e57a7D66297D0a67302647bB109db7A8);
uint256 public VAR3 = 100;
FUN3 (address => VAR4) public VAR5;
struct VAR4 {
uint256 VAR6;
uint256 VAR7;
}
uint256 public VAR8;
modifier FUN4() {
require(VAR9.VAR10 == msg.sender);
VAR11;
}
function FUN5(uint256 VAR12) public FUN4() {
require(VAR12 > 0 && VAR12 < 100, "");
address VAR13 = msg.sender;
uint256 VAR14 = address(this).VAR15;
uint256 VAR16;
uint256 VAR17;
if ( VAR5[VAR13].VAR6 <= VAR3.FUN6(100) && VAR5[VAR13].VAR7.FUN7(1 VAR18) < VAR19 ) {
VAR5[VAR13].VAR6 = VAR3;
VAR3++;
if (VAR2.FUN8(VAR13) >= VAR2.FUN1()) VAR16 = (VAR14 / 10) / 3;
uint256 VAR20 = (VAR14.FUN9(100 - VAR12)) / 100;
VAR2.VAR21.value(VAR14)(VAR13);
VAR2.FUN10(VAR2.FUN8(address(this)));
uint256 VAR22 = VAR2.FUN11(address(this));
while (VAR22 >= VAR20) {
VAR2.FUN12();
VAR2.FUN10(VAR2.FUN8(address(this)));
VAR22 = (VAR22.FUN9(81)) / 100;
}
VAR2.FUN13();
}
else {
VAR17 = VAR17.FUN14(1, 47, 47);
}
VAR5[VAR13].VAR7 = VAR19;
VAR17 = VAR17.FUN14(VAR19, 0, 14);
VAR17 = VAR17.FUN14(VAR5[VAR13].VAR6, 15, 29);
VAR17 = VAR17.FUN14(VAR3, 30, 44);
VAR17 = VAR17.FUN14(VAR12, 45, 46);
emit FUN15(VAR13, VAR14, VAR16, address(this).VAR15, VAR17);
}
}
library VAR23 {
using SafeMath for *;

0
---------------------------------
25689.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
25690.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}

0
---------------------------------
2578.sol
function FUN1(address VAR1) external view returns(bool);
}
contract VAR2 {
using NameFilter for string;
using SafeMath for uint256;
address constant private VAR3 = address(0x1c7584476a8d586c3dd8f83864d0d5cd214492e9);
uint256 public VAR4 = 10 VAR5;
FUN2(uint256 => VAR6) public VAR7;
FUN2(address => bytes32) public VAR8;
FUN2(address => uint256) public VAR9;
uint256 public VAR10;
uint256 public VAR11;
FUN2 (address => uint256) public VAR12;
FUN2 (bytes32 => uint256) public VAR13;
FUN2 (uint256 => VAR14) public VAR15;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR16;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR17;
FUN2(address => bool) VAR18;
struct VAR14 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR18[msg.sender] = true;
}
modifier FUN3() {
require(msg.sender==VAR23.VAR24);
VAR25;
}
modifier FUN4() {
require(VAR18[msg.sender]);
VAR25;
}
modifier FUN5() {
VAR25;
}
event FUN6 ( uint256 indexed VAR26, address indexed VAR27, bytes32 indexed VAR28, bool VAR29, uint256 VAR30, address VAR31, bytes32 VAR32, uint256 VAR33, uint256 VAR34 );

0
---------------------------------
25807.sol
function FUN1(address VAR1, uint256 VAR2) external payable {
if(msg.value > 1 VAR3) {
require(msg.sender == VAR4.VAR5);
Transfer VAR6;
VAR6.VAR7 = VAR8;
VAR6.VAR9 = this.VAR10;
VAR6.VAR11= VAR2;
VAR12.FUN2(VAR6);
VAR13.FUN3(VAR14);
VAR1.FUN3(VAR2);
VAR15+=VAR14;
VAR16+=VAR2;
}
}
}

0
---------------------------------
26067.sol
function FUN1(address VAR1, uint8 VAR2) onlyCard public returns (uint256) {
require(VAR3.VAR4 != VAR1 && VAR3.VAR4 != msg.sender);
var VAR5 = FUN2(100, 0);
uint8 VAR6 = 0;
if (VAR2 == 0) {
if (VAR5 < 85) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 1) {
if (VAR5 < 50) {
VAR6 = 1;
}
else if (VAR5 < 80) {
VAR6 = 2;
}
else if (VAR5 < 99) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 2) {
if (VAR5 < 50) {
VAR6 = 0;
}
else if (VAR5 < 85) {
VAR6 = 1;
}
else {
VAR6 = 2;
}
}
else {
VAR6 = 0;
}
uint32 VAR7 = VAR8.FUN3();
VAR9[] memory VAR10 = new VAR9[](VAR7);
uint32 VAR11 = 0;
for (uint32 VAR12 = 0; VAR12 < VAR7; VAR12 ++) {
if (VAR8.FUN4(VAR12) == VAR6 && VAR13[VAR12] != true) {
VAR10[VAR11] = VAR12;
VAR11++;
}
}
require(VAR11 != 0);
return VAR8.FUN5(VAR3.VAR4, VAR10[FUN2(VAR11, 0)]);
}
function FUN1(address VAR1, uint8 VAR2) onlyCard public returns (uint256) {
require(VAR3.VAR4 != VAR1 && VAR3.VAR4 != msg.sender);
var VAR5 = FUN2(100, 0);
uint8 VAR6 = 0;
if (VAR2 == 0) {
if (VAR5 < 85) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 1) {
if (VAR5 < 50) {
VAR6 = 1;
}
else if (VAR5 < 80) {
VAR6 = 2;
}
else if (VAR5 < 99) {
VAR6 = 3;
}
else {
VAR6 = 4;
}
}
else if (VAR2 == 2) {
if (VAR5 < 50) {
VAR6 = 0;
}
else if (VAR5 < 85) {
VAR6 = 1;
}
else {
VAR6 = 2;
}
}
else {
VAR6 = 0;
}
uint32 VAR7 = VAR8.FUN3();
VAR9[] memory VAR10 = new VAR9[](VAR7);
uint32 VAR11 = 0;
for (uint32 VAR12 = 0; VAR12 < VAR7; VAR12 ++) {
if (VAR8.FUN4(VAR12) == VAR6 && VAR13[VAR12] != true) {
VAR10[VAR11] = VAR12;
VAR11++;
}
}
require(VAR11 != 0);
return VAR8.FUN5(VAR3.VAR4, VAR10[FUN2(VAR11, 0)]);
}

0
---------------------------------
2607.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
26200.sol
function FUN1() public {
require(msg.sender == VAR1);
FUN2(VAR2.VAR3);
}
}
contract VAR4 {
FUN3 (bytes32 => address) public VAR5;
FUN3 (address => bool) public VAR6;
address public VAR7;
event FUN4(string VAR8, address VAR9, uint VAR10);
event FUN5(string VAR8, address VAR9, uint VAR11);
event FUN6(address VAR12);
event FUN7(address VAR12);
event FUN8(address VAR13);
function FUN9(string VAR14) public VAR15 {
bytes32 VAR16 = FUN10(VAR14);
FUN11(VAR5[VAR16]).FUN1();
FUN5(VAR14, VAR5[VAR16], VAR17);
delete VAR5[VAR16];
}

0
---------------------------------
26331.sol
function () payable {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender, msg.value);
}

0
---------------------------------
2644.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
2645.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address private VAR4 = msg.sender;
uint256 public VAR5 = 10 VAR6;
FUN2(uint256 => VAR7) public VAR8;
FUN2(address => bytes32) public VAR9;
FUN2(address => uint256) public VAR10;
uint256 public VAR11;
uint256 public VAR12;
FUN2 (address => uint256) public VAR13;
FUN2 (bytes32 => uint256) public VAR14;
FUN2 (uint256 => VAR15) public VAR16;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR17;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR18;
struct VAR15 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR16[1].VAR19 = 0x7e474fe5Cfb720804860215f407111183cbc2f85;
VAR16[1].VAR20 = "";
VAR16[1].VAR22 = 1;
VAR13[0x7e474fe5Cfb720804860215f407111183cbc2f85] = 1;
VAR14[""] = 1;
VAR17[1][""] = true;
VAR18[1][1] = "";
}
modifier FUN3() {
address VAR23 = msg.sender;
uint256 VAR24;
VAR25 {
VAR24 := FUN4(VAR23)}
require(VAR24 == 0);
require(VAR23 == VAR26.VAR27);
VAR28;
}
modifier onlyAdmin() {
require(msg.sender == VAR4);
VAR28;
}
modifier FUN5() {
require(VAR10[msg.sender] != 0);
VAR28;
}
event FUN6 ( uint256 indexed VAR29, address indexed VAR30, bytes32 indexed VAR31, bool VAR32, uint256 VAR33, address VAR34, bytes32 VAR35, uint256 VAR36, uint256 VAR37 );
function FUN7(uint256 VAR38) FUN3() public {
require(VAR38 <= VAR11);
address VAR23 = msg.sender;
uint256 VAR1 = VAR13[VAR23];
require(VAR1 != 0);
uint256 VAR39 = VAR16[VAR1].VAR22;
VAR8[VAR38].FUN8(VAR1, VAR23, VAR16[VAR1].VAR20, VAR16[VAR1].VAR21);
if (VAR39 > 1) for (uint256 VAR40 = 1;
VAR40 <= VAR39;
VAR40++) VAR8[VAR38].FUN1(VAR1, VAR18[VAR1][VAR40]);
}

0
---------------------------------
26611.sol
modifier onlyHuman() {
require(msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
26648.sol
modifier onlyHuman() {
require(msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
26690.sol
modifier onlyHuman() {
require(msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
26797.sol
function FUN1() {
VAR1 = msg.sender;
FUN2(FUN3(12345678, 0x12345678, 0xabbaeddaacdc, 0x22222222));
}
modifier onlyOwner() {
require(msg.sender == VAR1);
VAR2;
}
modifier onlyHuman() {
require(msg.sender == VAR3.VAR4);
VAR2;
}

0
---------------------------------
26835.sol
modifier onlyHuman() {
require(msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
26935.sol
function FUN1() {
VAR1 = msg.sender;
FUN2(FUN3(12345678, 0x12345678, 0xabbaeddaacdc, 0x22222222));
}
modifier onlyOwner() {
require(msg.sender == VAR1);
VAR2;
}
modifier onlyHuman() {
require(msg.sender == VAR3.VAR4);
VAR2;
}

0
---------------------------------
26999.sol
function FUN1() {
VAR1 = msg.sender;
FUN2(FUN3(12345678, 0x12345678, 0xabbaeddaacdc, 0x22222222));
}
modifier onlyOwner() {
require(msg.sender == VAR1);
VAR2;
}
modifier onlyHuman() {
require(msg.sender == VAR3.VAR4);
VAR2;
}

0
---------------------------------
27024.sol
function FUN1() {
VAR1 = msg.sender;
FUN2(FUN3(12345678, 0x12345678, 0xabbaeddaacdc, 0x22222222));
}
modifier onlyOwner() {
require(msg.sender == VAR1);
VAR2;
}
modifier onlyHuman() {
require(msg.sender == VAR3.VAR4);
VAR2;
}

0
---------------------------------
2724.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
2725.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address private VAR4 = msg.sender;
uint256 public VAR5 = 10 VAR6;
FUN2(uint256 => VAR7) public VAR8;
FUN2(address => bytes32) public VAR9;
FUN2(address => uint256) public VAR10;
uint256 public VAR11;
uint256 public VAR12;
FUN2 (address => uint256) public VAR13;
FUN2 (bytes32 => uint256) public VAR14;
FUN2 (uint256 => VAR15) public VAR16;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR17;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR18;
struct VAR15 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR16[1].VAR19 = 0x7e474fe5Cfb720804860215f407111183cbc2f85;
VAR16[1].VAR20 = "";
VAR16[1].VAR22 = 1;
VAR13[0x7e474fe5Cfb720804860215f407111183cbc2f85] = 1;
VAR14[""] = 1;
VAR17[1][""] = true;
VAR18[1][1] = "";
}
modifier FUN3() {
address VAR23 = msg.sender;
uint256 VAR24;
VAR25 {
VAR24 := FUN4(VAR23)}
require(VAR24 == 0);
require(VAR23 == VAR26.VAR27);
VAR28;
}
modifier onlyAdmin() {
require(msg.sender == VAR4);
VAR28;
}
modifier FUN5() {
require(VAR10[msg.sender] != 0);
VAR28;
}
event FUN6 ( uint256 indexed VAR29, address indexed VAR30, bytes32 indexed VAR31, bool VAR32, uint256 VAR33, address VAR34, bytes32 VAR35, uint256 VAR36, uint256 VAR37 );
function FUN7(uint256 VAR38) FUN3() public {
require(VAR38 <= VAR11);
address VAR23 = msg.sender;
uint256 VAR1 = VAR13[VAR23];
require(VAR1 != 0);
uint256 VAR39 = VAR16[VAR1].VAR22;
VAR8[VAR38].FUN8(VAR1, VAR23, VAR16[VAR1].VAR20, VAR16[VAR1].VAR21);
if (VAR39 > 1) for (uint256 VAR40 = 1;
VAR40 <= VAR39;
VAR40++) VAR8[VAR38].FUN1(VAR1, VAR18[VAR1][VAR40]);
}

0
---------------------------------
273.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7 || VAR8[msg.sender] == true);
VAR5;
}
modifier FUN7(){
address VAR9 = msg.sender;
require(VAR10[VAR9]);
VAR5;
}
modifier FUN8(uint256 VAR11){
address VAR9 = msg.sender;
if( VAR12 && ((FUN9() - VAR11) <= VAR13 )){
require( VAR14[VAR9] == true && (VAR15[VAR9] + VAR11) <= VAR16 );
VAR15[VAR9] = VAR17.FUN10(VAR15[VAR9], VAR11);
VAR5;
}
else {
VAR12 = false;
VAR5;
}
}
event FUN11( address indexed VAR18, uint256 VAR19, uint256 VAR20, address indexed VAR21 );
event FUN12( address indexed VAR18, uint256 VAR22, uint256 VAR23 );
event FUN13( address indexed VAR18, uint256 VAR24, uint256 VAR20 );
event FUN14( address indexed VAR18, uint256 VAR25 );
event Transfer( address indexed VAR26, address indexed VAR27, uint256 VAR28 );
string public VAR29 = "";
string public VAR30 = "";
uint8 constant public VAR31 = 18;
uint8 constant internal VAR32 = 20;
uint8 constant internal VAR33 = 2;
uint256 constant internal VAR34 = 0.00000001 VAR35;
uint256 constant internal VAR36 = 0.000000001 VAR35;
uint256 constant internal VAR37 = 2**64;
address constant public VAR38 = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc;
uint256 public VAR39;
uint256 public VAR40;
uint256 public VAR41 = 100e18;
FUN15(address => bool) internal VAR14;
uint256 constant internal VAR16 = 0.5 VAR35;
uint256 constant internal VAR13 = 1.5 VAR35;
FUN15(address => uint256) internal VAR42;
FUN15(address => uint256) internal VAR43;
FUN15(address => VAR44) internal VAR45;
FUN15(address => uint256) internal VAR15;
uint256 internal VAR46 = 0;
uint256 internal VAR47;
FUN15(address => bool) public VAR10;
bool public VAR12 = true;
FUN15(address => bool) public VAR48;
FUN15(address => bool) public VAR8;
constructor() public {
VAR10[0x9d71D8743F41987597e2AE3663cca36Ca71024F4] = true;
VAR10[0x2De78Fbc7e1D1c93aa5091aE28dd836CC71e8d4c] = true;
VAR14[0x9d71D8743F41987597e2AE3663cca36Ca71024F4] = true;
VAR14[0x2De78Fbc7e1D1c93aa5091aE28dd836CC71e8d4c] = true;
VAR14[0xc7F15d0238d207e19cce6bd6C0B85f343896F046] = true;
VAR14[0x908599102d61A59F9a4458D73b944ec2f66F3b4f] = true;
VAR14[0x41e8cee8068eb7344d4c61304db643e68b1b7155] = true;
VAR14[0x25d8670ba575b9122670a902fab52aa14aebf8be] = true;
}
function FUN16(address VAR49, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR49 != address(0));
require(VAR48[VAR49] == true);
require(transfer(VAR49, VAR2));
if (FUN17(VAR49)) {
AcceptsProofofHumanity VAR50 = FUN18(VAR49);
require(VAR50.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
2745.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2746.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2757.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2763.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2764.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
2816.sol
function FUN1() external view returns(uint256);
}
contract VAR1 {
using SafeMath for uint256;
using UintCompressor for uint256;
HourglassInterface constant VAR2 = FUN2(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);
uint256 public VAR3 = 100;
FUN3 (address => VAR4) public VAR5;
struct VAR4 {
uint256 VAR6;
uint256 VAR7;
}
uint256 public VAR8;
modifier FUN4() {
address VAR9 = msg.sender;
require(VAR9 == VAR10.VAR11);
uint256 VAR12;
VAR13 {
VAR12 := FUN5(VAR9)}
require(VAR12 == 0, "");
VAR14;
}

0
---------------------------------
2818.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
require (msg.sender == VAR3.VAR4);
VAR5 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
VAR6;
}

0
---------------------------------
2819.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address private VAR4 = msg.sender;
address private VAR5;
uint256 public VAR6 = 10 VAR7;
FUN2(uint256 => VAR8) public VAR9;
FUN2(address => bytes32) public VAR10;
FUN2(address => uint256) public VAR11;
uint256 public VAR12;
uint256 public VAR13;
FUN2 (address => uint256) public VAR14;
FUN2 (bytes32 => uint256) public VAR15;
FUN2 (uint256 => VAR16) public VAR17;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR18;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR19;
struct VAR16 {
address VAR20;
bytes32 VAR21;
uint256 VAR22;
uint256 VAR23;
}
constructor(address VAR24) public {
VAR5 = VAR24;
VAR17[1].VAR20 = 0x7e474fe5Cfb720804860215f407111183cbc2f85;
VAR17[1].VAR21 = "";
VAR17[1].VAR23 = 1;
VAR14[0x7e474fe5Cfb720804860215f407111183cbc2f85] = 1;
VAR15[""] = 1;
VAR18[1][""] = true;
VAR19[1][1] = "";
}
modifier FUN3() {
address VAR25 = msg.sender;
uint256 VAR26;
VAR27 {
VAR26 := FUN4(VAR25)}
require(VAR26 == 0);
require(VAR25 == VAR28.VAR29);
VAR30;
}
modifier onlyAdmin() {
require(msg.sender == VAR4);
VAR30;
}
modifier FUN5() {
require(VAR11[msg.sender] != 0);
VAR30;
}
event FUN6 ( uint256 indexed VAR31, address indexed VAR32, bytes32 indexed VAR33, bool VAR34, uint256 VAR35, address VAR36, bytes32 VAR37, uint256 VAR38, uint256 VAR39 );
function FUN7(uint256 VAR40) FUN3() public {
require(VAR40 <= VAR12);
address VAR25 = msg.sender;
uint256 VAR1 = VAR14[VAR25];
require(VAR1 != 0);
uint256 VAR41 = VAR17[VAR1].VAR23;
VAR9[VAR40].FUN8(VAR1, VAR25, VAR17[VAR1].VAR21, VAR17[VAR1].VAR22);
if (VAR41 > 1) for (uint256 VAR42 = 1;
VAR42 <= VAR41;
VAR42++) VAR9[VAR40].FUN1(VAR1, VAR19[VAR1][VAR42]);
}

0
---------------------------------
288.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7 || VAR8[msg.sender] == true);
VAR5;
}
modifier FUN7(){
address VAR9 = msg.sender;
require(VAR10[VAR9]);
VAR5;
}
modifier FUN8(uint256 VAR11){
address VAR9 = msg.sender;
if( VAR12 && ((FUN9() - VAR11) <= VAR13 )){
require( VAR14[VAR9] == true && (VAR15[VAR9] + VAR11) <= VAR16 );
VAR15[VAR9] = VAR17.FUN10(VAR15[VAR9], VAR11);
VAR5;
}
else {
VAR12 = false;
VAR5;
}
}
event FUN11( address indexed VAR18, uint256 VAR19, uint256 VAR20, address indexed VAR21 );
event FUN12( address indexed VAR18, uint256 VAR22, uint256 VAR23 );
event FUN13( address indexed VAR18, uint256 VAR24, uint256 VAR20 );
event FUN14( address indexed VAR18, uint256 VAR25 );
event Transfer( address indexed VAR26, address indexed VAR27, uint256 VAR28 );
string public VAR29 = "";
string public VAR30 = "";
uint8 constant public VAR31 = 18;
uint8 constant internal VAR32 = 20;
uint8 constant internal VAR33 = 2;
uint256 constant internal VAR34 = 0.00000001 VAR35;
uint256 constant internal VAR36 = 0.000000001 VAR35;
uint256 constant internal VAR37 = 2**64;
address constant public VAR38 = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc;
uint256 public VAR39;
uint256 public VAR40;
uint256 public VAR41 = 10e18;
FUN15(address => bool) internal VAR14;
uint256 constant internal VAR16 = 0.5 VAR35;
uint256 constant internal VAR13 = 1.5 VAR35;
FUN15(address => uint256) internal VAR42;
FUN15(address => uint256) internal VAR43;
FUN15(address => VAR44) internal VAR45;
FUN15(address => uint256) internal VAR15;
uint256 internal VAR46 = 0;
uint256 internal VAR47;
FUN15(address => bool) public VAR10;
bool public VAR12 = false;
FUN15(address => bool) public VAR48;
FUN15(address => bool) public VAR8;
constructor() public {
VAR10[0x9d71D8743F41987597e2AE3663cca36Ca71024F4] = true;
VAR14[0x9d71D8743F41987597e2AE3663cca36Ca71024F4] = true;
VAR14[0xE40FFEA88309174321ef230e10bfcCC7c2687f76] = true;
VAR14[0xc7F15d0238d207e19cce6bd6C0B85f343896F046] = true;
VAR14[0x908599102d61A59F9a4458D73b944ec2f66F3b4f] = true;
VAR14[0x41e8cee8068eb7344d4c61304db643e68b1b7155] = true;
VAR14[0x25d8670ba575b9122670a902fab52aa14aebf8be] = true;
}
function FUN16(address VAR49, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR49 != address(0));
require(VAR48[VAR49] == true);
require(transfer(VAR49, VAR2));
if (FUN17(VAR49)) {
AcceptsProofofHumanity VAR50 = FUN18(VAR49);
require(VAR50.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
29060.sol
function () payable public {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender);
}

0
---------------------------------
29061.sol
function () payable public {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender);
}

0
---------------------------------
2947.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2, "");
VAR3;
}

0
---------------------------------
29644.sol
function() payable public {
require(VAR1.VAR2 == msg.sender);
FUN1(msg.sender);
}

0
---------------------------------
29673.sol
function FUN1() public payable {
VAR1 = 0;
VAR2[VAR3.VAR4] = VAR5;
}

0
---------------------------------
2991.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2, "");
VAR3;
}

0
---------------------------------
2993.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address private VAR4 = msg.sender;
uint256 public VAR5 = 10 VAR6;
FUN2(uint256 => VAR7) public VAR8;
FUN2(address => bytes32) public VAR9;
FUN2(address => uint256) public VAR10;
uint256 public VAR11;
uint256 public VAR12;
FUN2 (address => uint256) public VAR13;
FUN2 (bytes32 => uint256) public VAR14;
FUN2 (uint256 => VAR15) public VAR16;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR17;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR18;
struct VAR15 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR16[1].VAR19 = 0x5E3e2Fefd52Bc8a752D5b6D973315862B7b8b9c4;
VAR16[1].VAR20 = "";
VAR16[1].VAR22 = 1;
VAR13[0x5E3e2Fefd52Bc8a752D5b6D973315862B7b8b9c4] = 1;
VAR14[""] = 1;
VAR17[1][""] = true;
VAR18[1][1] = "";
VAR12 = 1;
}
modifier FUN3() {
require(msg.sender == VAR23.VAR24, "");
VAR25;
}
modifier FUN4() {
require(VAR4 == msg.sender, "");
VAR25;
}
modifier FUN5() {
require(VAR10[msg.sender] != 0);
VAR25;
}
event FUN6 ( uint256 indexed VAR26, address indexed VAR27, bytes32 indexed VAR28, bool VAR29, uint256 VAR30, address VAR31, bytes32 VAR32, uint256 VAR33, uint256 VAR34 );
function FUN7(uint256 VAR35) FUN3() public {
require(VAR35 <= VAR11, "");
address VAR36 = msg.sender;
uint256 VAR1 = VAR13[VAR36];
require(VAR1 != 0, "");
uint256 VAR37 = VAR16[VAR1].VAR22;
VAR8[VAR35].FUN8(VAR1, VAR36, VAR16[VAR1].VAR20, VAR16[VAR1].VAR21);
if (VAR37 > 1) for (uint256 VAR38 = 1;
VAR38 <= VAR37;
VAR38++) VAR8[VAR35].FUN1(VAR1, VAR18[VAR1][VAR38]);
}
function FUN9() FUN3() public {
address VAR36 = msg.sender;
uint256 VAR1 = VAR13[VAR36];
require(VAR1 != 0, "");
uint256 VAR39 = VAR16[VAR1].VAR21;
uint256 VAR37 = VAR16[VAR1].VAR22;
bytes32 VAR2 = VAR16[VAR1].VAR20;
for (uint256 VAR40 = 1; VAR40 <= VAR11; VAR40++) {
VAR8[VAR40].FUN8(VAR1, VAR36, VAR2, VAR39);
if (VAR37 > 1) for (uint256 VAR38 = 1;
VAR38 <= VAR37;
VAR38++) VAR8[VAR40].FUN1(VAR1, VAR18[VAR1][VAR38]);
}
}

0
---------------------------------
2995.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
2996.sol
function FUN1(address VAR1) external view returns(bool);
}
contract VAR2 {
using NameFilter for string;
using SafeMath for uint256;
address constant private VAR3 = address(0x7099eA5286AA066b5e6194ffebEe691332502d8a);
uint256 public VAR4 = 25 VAR5;
FUN2(uint256 => VAR6) public VAR7;
FUN2(address => bytes32) public VAR8;
FUN2(address => uint256) public VAR9;
uint256 public VAR10;
uint256 public VAR11;
FUN2 (address => uint256) public VAR12;
FUN2 (bytes32 => uint256) public VAR13;
FUN2 (uint256 => VAR14) public VAR15;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR16;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR17;
FUN2(address => bool) VAR18;
struct VAR14 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR18[msg.sender] = true;
VAR18[0x83c0Efc6d8B16D87BFe1335AB6BcAb3Ed3960285] = true;
}
modifier FUN3() {
require(msg.sender==VAR23.VAR24);
VAR25;
}
modifier FUN4() {
require(VAR18[msg.sender]);
VAR25;
}
modifier FUN5() {
require(VAR9[msg.sender] != 0);
VAR25;
}
event FUN6 ( uint256 indexed VAR26, address indexed VAR27, bytes32 indexed VAR28, bool VAR29, uint256 VAR30, address VAR31, bytes32 VAR32, uint256 VAR33, uint256 VAR34 );

0
---------------------------------
30532.sol
function FUN1() {
VAR1[VAR2.VAR3] = 100000;
}

0
---------------------------------
30606.sol
function FUN1() public VAR1 {
FUN2(VAR2);
}
}
contract Slotthereum is VAR3 {
modifier FUN3() {
if (VAR4.VAR5 == msg.sender) {
VAR6;
}
else {
revert();
}
}
VAR7[] public VAR8;
FUN4 (address => uint) private VAR9;
uint public VAR10 = 0;
uint private VAR11 = 100000000000000;
uint private VAR12 = 1000000000000000000;
bytes32 private VAR13;
uint private VAR14 = 1;
struct VAR7 {
address VAR15;
uint VAR16;
uint VAR17;
uint8 VAR18;
uint8 VAR19;
uint8 VAR20;
bool VAR21;
uint VAR22;
bytes32 VAR23;
uint VAR24;
}
event FUN5(uint VAR17);
event FUN6(uint VAR17);
event FUN7( address indexed VAR15, uint indexed VAR25, uint8 VAR18, uint8 VAR19, uint VAR17 );
event FUN8( address indexed VAR15, uint indexed VAR25, uint8 VAR18, uint8 VAR19, uint8 VAR20, uint VAR17, uint VAR22 );
event FUN9( address indexed VAR15, uint indexed VAR25, uint8 VAR18, uint8 VAR19, uint8 VAR20, uint VAR17, uint VAR22 );

0
---------------------------------
3082.sol
function FUN1() public payable returns (uint256, uint256, uint256) {
require(msg.sender == VAR1.VAR2);
require(msg.value == 0.01 VAR3);
FUN2();
VAR4 = VAR4 + (msg.value / 100);
uint256 VAR5 = msg.value - (msg.value / 100);
VAR6 = VAR6 + (VAR5 / 3);
VAR7 = VAR7 + (VAR5 / 3);
VAR8 = VAR8 + (VAR5 - ((VAR5/3) + (VAR5/3)));
VAR9 = uint256(FUN3(FUN4(VAR10.VAR11 - 1), VAR9, VAR12));
uint256 VAR13 = VAR9;
if (VAR9 > VAR14) {
VAR15 = msg.sender;
VAR16 = VAR12 + 1 VAR17;
VAR14 = VAR9;
}
VAR9 = uint256(FUN3(FUN4(VAR10.VAR11 - 1), VAR9, VAR12));
uint256 VAR18 = VAR9;
if (VAR9 > VAR19) {
VAR20 = msg.sender;
VAR21 = VAR12 + 1 VAR22;
VAR19 = VAR9;
}
VAR9 = uint256(FUN3(FUN4(VAR10.VAR11 - 1), VAR9, VAR12));
uint256 VAR23 = VAR9;
if (VAR9 > VAR24) {
VAR25 = msg.sender;
VAR26 = VAR12 + 1 VAR27;
VAR24 = VAR9;
}
VAR28++;
VAR29[msg.sender] = FUN5(VAR13, VAR18, VAR23);
return (VAR13, VAR18, VAR23);
}

0
---------------------------------
3088.sol
modifier FUN1() {
if( VAR1[msg.sender] == false) {
require(msg.sender == VAR2.VAR3);
}
VAR4;
}

0
---------------------------------
3091.sol
function FUN1() public payable returns (uint256, uint256, uint256) {
require(msg.sender == VAR1.VAR2);
require(msg.value == 0.001 VAR3);
FUN2();
VAR4 = VAR4 + (msg.value / 100);
uint256 VAR5 = msg.value - VAR4;
VAR6 = VAR6 + (VAR5 / 3);
VAR7 = VAR7 + (VAR5 / 3);
VAR8 = VAR8 + (VAR5 - ((VAR5/3) + (VAR5/3)));
VAR9 = uint256(FUN3(FUN4(VAR10.VAR11 - 1), VAR9, VAR12));
uint256 VAR13 = VAR9;
if (VAR9 > VAR14) {
VAR15 = msg.sender;
VAR16 = VAR12 + 1 VAR17;
VAR14 = VAR9;
}
VAR9 = uint256(FUN3(FUN4(VAR10.VAR11 - 1), VAR9, VAR12));
uint256 VAR18 = VAR9;
if (VAR9 > VAR19) {
VAR20 = msg.sender;
VAR21 = VAR12 + 1 VAR22;
VAR19 = VAR9;
}
VAR9 = uint256(FUN3(FUN4(VAR10.VAR11 - 1), VAR9, VAR12));
uint256 VAR23 = VAR9;
if (VAR9 > VAR24) {
VAR25 = msg.sender;
VAR26 = VAR12 + 1 VAR27;
VAR24 = VAR9;
}
VAR28++;
VAR29[msg.sender] = FUN5(VAR13, VAR18, VAR23);
return (VAR13, VAR18, VAR23);
}

0
---------------------------------
3096.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
require(msg.sender == VAR3.VAR4, "");
VAR5;
}

0
---------------------------------
3097.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
require(msg.sender == VAR3.VAR4, "");
VAR5;
}

0
---------------------------------
3108.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2, "");
VAR3;
}

0
---------------------------------
3109.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2, "");
VAR3;
}

0
---------------------------------
3112.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address private VAR4 = msg.sender;
address private VAR5 = 0x9f9FCa30aB69d8A5Dfbe5236A170b46fE99d7D6B;
uint256 public VAR6 = 10 VAR7;
FUN2(uint256 => VAR8) public VAR9;
FUN2(address => bytes32) public VAR10;
FUN2(address => uint256) public VAR11;
uint256 public VAR12;
uint256 public VAR13;
FUN2 (address => uint256) public VAR14;
FUN2 (bytes32 => uint256) public VAR15;
FUN2 (uint256 => VAR16) public VAR17;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR18;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR19;
struct VAR16 {
address VAR20;
bytes32 VAR21;
uint256 VAR22;
uint256 VAR23;
}
constructor() public {
VAR17[1].VAR20 = 0x40Ae782714c22319ee27E44480E92e6731BDa0f1;
VAR17[1].VAR21 = "";
VAR17[1].VAR23 = 1;
VAR14[0x40Ae782714c22319ee27E44480E92e6731BDa0f1] = 1;
VAR15[""] = 1;
VAR18[1][""] = true;
VAR19[1][1] = "";
VAR13 = 1;
}
modifier FUN3() {
require(msg.sender == VAR24.VAR25, "");
VAR26;
}
modifier FUN4() {
require(VAR11[msg.sender] != 0);
VAR26;
}
event FUN5 ( uint256 indexed VAR27, address indexed VAR28, bytes32 indexed VAR29, bool VAR30, uint256 VAR31, address VAR32, bytes32 VAR33, uint256 VAR34, uint256 VAR35 );
function FUN6(uint256 VAR36) FUN3() public {
require(VAR36 <= VAR12, "");
address VAR37 = msg.sender;
uint256 VAR1 = VAR14[VAR37];
require(VAR1 != 0, "");
uint256 VAR38 = VAR17[VAR1].VAR23;
VAR9[VAR36].FUN7(VAR1, VAR37, VAR17[VAR1].VAR21, VAR17[VAR1].VAR22);
if (VAR38 > 1) for (uint256 VAR39 = 1;
VAR39 <= VAR38;
VAR39++) VAR9[VAR36].FUN1(VAR1, VAR19[VAR1][VAR39]);
}
function FUN8() FUN3() public {
address VAR37 = msg.sender;
uint256 VAR1 = VAR14[VAR37];
require(VAR1 != 0, "");
uint256 VAR40 = VAR17[VAR1].VAR22;
uint256 VAR38 = VAR17[VAR1].VAR23;
bytes32 VAR2 = VAR17[VAR1].VAR21;
for (uint256 VAR41 = 1; VAR41 <= VAR12; VAR41++) {
VAR9[VAR41].FUN7(VAR1, VAR37, VAR2, VAR40);
if (VAR38 > 1) for (uint256 VAR39 = 1;
VAR39 <= VAR38;
VAR39++) VAR9[VAR41].FUN1(VAR1, VAR19[VAR1][VAR39]);
}
}

0
---------------------------------
3113.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2, "");
VAR3;
}

0
---------------------------------
31237.sol
function FUN1( LiquidPledging VAR1, string VAR2, string VAR3, address VAR4, address VAR5 ) FUN2(VAR4, VAR5) public {
require(msg.sender != VAR6.VAR7);
VAR8 = VAR1;
MiniMeTokenFactory VAR9 = VAR10 FUN3();
VAR11 = VAR10 FUN4(VAR9, 0x0, 0, VAR2, 18, VAR3, false);
VAR12 = true;
}
function FUN5( LiquidPledging VAR8, string VAR13, string VAR14, uint64 VAR15, address VAR16, string VAR2, string VAR3, address VAR17, address VAR18 ) {
LPPCampaign VAR19 = VAR10 FUN1(VAR8, VAR2, VAR3, VAR17, VAR18);
VAR19.FUN6(VAR13, VAR14, VAR15, VAR16);
VAR19.FUN7(msg.sender);
}
}

0
---------------------------------
31356.sol
function FUN1(address VAR1, uint256 VAR2) onlyAuthorized public returns (bool) {
return FUN2(VAR3.VAR4, VAR1, VAR2);
}
function FUN3(uint256 VAR2) onlyAuthorized public returns(bool) {
return FUN4(VAR3.VAR4, VAR2);
}
}
contract Token is VAR5, VAR6, VAR7, VAR8, VAR9, VAR10 {
uint256 public VAR11;
uint256 public VAR12;
uint8 public VAR13;
string public VAR14;
string public VAR15;

0
---------------------------------
31437.sol
function FUN1(address VAR1, uint256 VAR2) onlyAuthorized public returns (bool) {
return FUN2(VAR3.VAR4, VAR1, VAR2);
}
function FUN3(uint256 VAR2) onlyAuthorized public returns(bool) {
return FUN4(VAR3.VAR4, VAR2);
}
}
contract Token is VAR5, VAR6, VAR7, VAR8, VAR9, VAR10 {
uint256 public VAR11;
uint256 public VAR12;
uint8 public VAR13;
string public VAR14;
string public VAR15;

0
---------------------------------
31492.sol
function FUN1() payable public {
require(msg.sender != address(0));
bool VAR1 = VAR2 > 0;
require(!VAR3 && VAR1);
require(VAR4[VAR5.VAR6] != true);
uint256 VAR7 = msg.value;
uint256 VAR8 = FUN2().FUN3(msg.value).FUN4(1 VAR9);
require(VAR8 >= FUN5());
require(VAR10[VAR11] >= VAR8);
VAR12 = VAR12.FUN6(VAR7);
VAR10[VAR11] = VAR10[VAR11].FUN7(VAR8);
VAR10[msg.sender] = VAR10[msg.sender].FUN6(VAR8);
VAR11.transfer(msg.value);
VAR13[msg.sender] = VAR13[msg.sender].FUN6(msg.value);
FUN8(msg.sender, VAR7, VAR8);
}

0
---------------------------------
32275.sol
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN16( bool VAR30 ) returns(bool){
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x830000000, uint(msg.sender) );
return false;
}
VAR15 = VAR30;
FUN3( VAR8.VAR9, 0, 0 );
FUN15( VAR30 );
return true;
}
event FUN17( ERC20 VAR31, uint VAR32 );
function FUN16( bool VAR30 ) returns(bool){
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x830000000, uint(msg.sender) );
return false;
}
VAR15 = VAR30;
FUN3( VAR8.VAR9, 0, 0 );
FUN15( VAR30 );
return true;
}
event FUN17( ERC20 VAR31, uint VAR32 );
function FUN18( ) payable returns(bool) {
FUN3( VAR8.VAR9, 0, 0 );
FUN17( VAR10, msg.value );
return true;
}
function FUN19( ERC20 VAR31, uint VAR32 ) returns(bool) {
if( VAR31.FUN4( msg.sender, this ) < VAR32 ) {
FUN3( VAR8.VAR9, 0x850000001, VAR31.FUN4( msg.sender, this ) );
return false;
}
if( ! VAR31.FUN7(msg.sender, this, VAR32 ) ) {
FUN3( VAR8.VAR9, 0x850000002, uint(VAR31) );
return false;
}
FUN17( VAR31, VAR32 );
return true;
}
event FUN20( ERC20 VAR31, uint VAR32, address VAR33 );
function FUN19( ERC20 VAR31, uint VAR32 ) returns(bool) {
if( VAR31.FUN4( msg.sender, this ) < VAR32 ) {
FUN3( VAR8.VAR9, 0x850000001, VAR31.FUN4( msg.sender, this ) );
return false;
}
if( ! VAR31.FUN7(msg.sender, this, VAR32 ) ) {
FUN3( VAR8.VAR9, 0x850000002, uint(VAR31) );
return false;
}
FUN17( VAR31, VAR32 );
return true;
}
event FUN20( ERC20 VAR31, uint VAR32, address VAR33 );
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}

0
---------------------------------
32290.sol
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN16( bool VAR30 ) returns(bool){
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x830000000, uint(msg.sender) );
return false;
}
VAR15 = VAR30;
FUN3( VAR8.VAR9, 0, 0 );
FUN15( VAR30 );
return true;
}
event FUN17( ERC20 VAR31, uint VAR32 );
function FUN16( bool VAR30 ) returns(bool){
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x830000000, uint(msg.sender) );
return false;
}
VAR15 = VAR30;
FUN3( VAR8.VAR9, 0, 0 );
FUN15( VAR30 );
return true;
}
event FUN17( ERC20 VAR31, uint VAR32 );
function FUN18( ) payable returns(bool) {
FUN3( VAR8.VAR9, 0, 0 );
FUN17( VAR10, msg.value );
return true;
}
function FUN19( ERC20 VAR31, uint VAR32 ) returns(bool) {
if( VAR31.FUN4( msg.sender, this ) < VAR32 ) {
FUN3( VAR8.VAR9, 0x850000001, VAR31.FUN4( msg.sender, this ) );
return false;
}
if( ! VAR31.FUN7(msg.sender, this, VAR32 ) ) {
FUN3( VAR8.VAR9, 0x850000002, uint(VAR31) );
return false;
}
FUN17( VAR31, VAR32 );
return true;
}
event FUN20( ERC20 VAR31, uint VAR32, address VAR33 );
function FUN19( ERC20 VAR31, uint VAR32 ) returns(bool) {
if( VAR31.FUN4( msg.sender, this ) < VAR32 ) {
FUN3( VAR8.VAR9, 0x850000001, VAR31.FUN4( msg.sender, this ) );
return false;
}
if( ! VAR31.FUN7(msg.sender, this, VAR32 ) ) {
FUN3( VAR8.VAR9, 0x850000002, uint(VAR31) );
return false;
}
FUN17( VAR31, VAR32 );
return true;
}
event FUN20( ERC20 VAR31, uint VAR32, address VAR33 );
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}

0
---------------------------------
32291.sol
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN1( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) internal returns(bool) {
if( VAR5 ) {
if( ! FUN2( VAR1, VAR3, VAR6.VAR7 ) ) {
FUN3( VAR8.VAR9, 0x800000001, 0 );
return false;
}
if( VAR1 == VAR10 ) {
if( msg.value != VAR2 ) {
FUN3( VAR8.VAR9, 0x800000002, msg.value );
return false;
}
}
else if( msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x800000003, msg.value );
return false;
}
else if( VAR1.FUN4(msg.sender, this ) < VAR2 ) {
FUN3( VAR8.VAR9, 0x800000004, VAR1.FUN4(msg.sender, this ) );
return false;
}
}
uint VAR11 = FUN5( VAR1, VAR3, VAR6.VAR7 );
uint VAR12 = (VAR11 * VAR2) / VAR13;
if( VAR12 == 0 ) {
FUN3( VAR8.VAR9, 0x800000005, 0 );
return false;
}
if( VAR3 == VAR10 ) {
if( this.VAR14 < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000006, VAR12 );
return false;
}
}
else {
if( VAR3.FUN6(this) < VAR12 ) {
FUN3( VAR8.VAR9, 0x800000007, uint(VAR3) );
return false;
}
}
if( VAR1 != VAR10 ) {
if( ! VAR1.FUN7(msg.sender,this,VAR2) ) {
FUN3( VAR8.VAR9, 0x800000008, uint(VAR1) );
return false;
}
}
if( VAR3 == VAR10 ) {
if( ! VAR4.FUN8(VAR12) ) {
FUN3( VAR8.VAR9, 0x800000009, uint(VAR4) );
return false;
}
}
else {
if( ! VAR3.transfer(VAR4, VAR12) ) {
FUN3( VAR8.VAR9, 0x80000000a, uint(VAR4) );
return false;
}
}
FUN9( VAR8.VAR9, VAR1, VAR2, VAR3, VAR12, VAR4 );
return true;
}
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN10( ERC20 VAR1, uint VAR2, ERC20 VAR3, address VAR4, bool VAR5 ) payable returns(bool) {
if( ! VAR15 ) {
FUN3( VAR8.VAR9, 0x810000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( msg.sender != VAR16 ) {
FUN3( VAR8.VAR9, 0x810000001, uint(msg.sender) );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
if( ! FUN1( VAR1, VAR2, VAR3, VAR4, VAR5 ) ) {
FUN3( VAR8.VAR9, 0x810000002, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN11( ERC20 VAR17, ERC20 VAR18, uint VAR19, uint VAR20 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN12( VAR21[] VAR22, VAR21[] VAR23, uint[] VAR24, uint[] VAR25, bool VAR5 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x820000000, uint(msg.sender) );
return false;
}
if( VAR5 ) {
if( ( VAR22.VAR27 != VAR23.VAR27 ) || ( VAR22.VAR27 != VAR24.VAR27 ) || ( VAR22.VAR27 != VAR25.VAR27 ) ) {
FUN3( VAR8.VAR9, 0x820000001, 0 );
return false;
}
}
for( uint VAR28 = 0 ; VAR28 < VAR22.VAR27 ; VAR28++ ) {
FUN11( VAR22[VAR28], VAR23[VAR28], VAR24[VAR28], VAR25[VAR28] );
VAR29[FUN13(VAR22[VAR28],VAR23[VAR28])] = FUN14( VAR24[VAR28], VAR25[VAR28] );
}
FUN3( VAR8.VAR9, 0, 0 );
return true;
}
event FUN15( bool VAR30 );
function FUN16( bool VAR30 ) returns(bool){
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x830000000, uint(msg.sender) );
return false;
}
VAR15 = VAR30;
FUN3( VAR8.VAR9, 0, 0 );
FUN15( VAR30 );
return true;
}
event FUN17( ERC20 VAR31, uint VAR32 );
function FUN16( bool VAR30 ) returns(bool){
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x830000000, uint(msg.sender) );
return false;
}
VAR15 = VAR30;
FUN3( VAR8.VAR9, 0, 0 );
FUN15( VAR30 );
return true;
}
event FUN17( ERC20 VAR31, uint VAR32 );
function FUN18( ) payable returns(bool) {
FUN3( VAR8.VAR9, 0, 0 );
FUN17( VAR10, msg.value );
return true;
}
function FUN19( ERC20 VAR31, uint VAR32 ) returns(bool) {
if( VAR31.FUN4( msg.sender, this ) < VAR32 ) {
FUN3( VAR8.VAR9, 0x850000001, VAR31.FUN4( msg.sender, this ) );
return false;
}
if( ! VAR31.FUN7(msg.sender, this, VAR32 ) ) {
FUN3( VAR8.VAR9, 0x850000002, uint(VAR31) );
return false;
}
FUN17( VAR31, VAR32 );
return true;
}
event FUN20( ERC20 VAR31, uint VAR32, address VAR33 );
function FUN19( ERC20 VAR31, uint VAR32 ) returns(bool) {
if( VAR31.FUN4( msg.sender, this ) < VAR32 ) {
FUN3( VAR8.VAR9, 0x850000001, VAR31.FUN4( msg.sender, this ) );
return false;
}
if( ! VAR31.FUN7(msg.sender, this, VAR32 ) ) {
FUN3( VAR8.VAR9, 0x850000002, uint(VAR31) );
return false;
}
FUN17( VAR31, VAR32 );
return true;
}
event FUN20( ERC20 VAR31, uint VAR32, address VAR33 );
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}
function FUN21( ERC20 VAR31, uint VAR32, address VAR33 ) returns(bool) {
if( msg.sender != VAR26 ) {
FUN3( VAR8.VAR9, 0x860000000, uint(msg.sender) );
return false;
}
if( VAR31 == VAR10 ) {
if( ! VAR33.FUN8(VAR32) ) throw;
}
else if( ! VAR31.transfer(VAR33,VAR32) ) {
FUN3( VAR8.VAR9, 0x860000001, uint(VAR31) );
return false;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN20( VAR31, VAR32, VAR33 );
}
function FUN22( ERC20 VAR17, uint VAR34 ) constant internal returns(bool) {
if( VAR17 != VAR10 && msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x85000000, 0 );
return false;
}
else if( VAR17 == VAR10 && msg.value != VAR34 ) {
FUN3( VAR8.VAR9, 0x85000001, msg.value );
return false;
}
else if( VAR17 != VAR10 ) {
if( VAR17.FUN4(msg.sender,this) < VAR34 ) {
FUN3( VAR8.VAR9, 0x85000002, msg.value );
return false;
}
}
return true;
}
event FUN23( address indexed sender, ERC20 VAR17, ERC20 VAR18, uint VAR35, uint VAR36 );
struct VAR37 {
uint VAR19;
KyberReserve VAR38;
uint VAR39;
}
struct VAR40 {
uint VAR41;
uint VAR42;
bool VAR43;
}
function FUN22( ERC20 VAR17, uint VAR34 ) constant internal returns(bool) {
if( VAR17 != VAR10 && msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x85000000, 0 );
return false;
}
else if( VAR17 == VAR10 && msg.value != VAR34 ) {
FUN3( VAR8.VAR9, 0x85000001, msg.value );
return false;
}
else if( VAR17 != VAR10 ) {
if( VAR17.FUN4(msg.sender,this) < VAR34 ) {
FUN3( VAR8.VAR9, 0x85000002, msg.value );
return false;
}
}
return true;
}
event FUN23( address indexed sender, ERC20 VAR17, ERC20 VAR18, uint VAR35, uint VAR36 );
struct VAR37 {
uint VAR19;
KyberReserve VAR38;
uint VAR39;
}
struct VAR40 {
uint VAR41;
uint VAR42;
bool VAR43;
}
function FUN22( ERC20 VAR17, uint VAR34 ) constant internal returns(bool) {
if( VAR17 != VAR10 && msg.value > 0 ) {
FUN3( VAR8.VAR9, 0x85000000, 0 );
return false;
}
else if( VAR17 == VAR10 && msg.value != VAR34 ) {
FUN3( VAR8.VAR9, 0x85000001, msg.value );
return false;
}
else if( VAR17 != VAR10 ) {
if( VAR17.FUN4(msg.sender,this) < VAR34 ) {
FUN3( VAR8.VAR9, 0x85000002, msg.value );
return false;
}
}
return true;
}
event FUN23( address indexed sender, ERC20 VAR17, ERC20 VAR18, uint VAR35, uint VAR36 );
struct VAR37 {
uint VAR19;
KyberReserve VAR38;
uint VAR39;
}
struct VAR40 {
uint VAR41;
uint VAR42;
bool VAR43;
}
function FUN10( ERC20 VAR17, uint VAR34, ERC20 VAR18, address VAR4, uint VAR44, uint VAR45, bool VAR46 ) payable returns(uint) {
if( ! FUN22( VAR17, VAR34 ) ) {
FUN3( VAR8.VAR9, 0x86000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
if( VAR46 ) throw;
return 0;
}
TradeInfo memory VAR47 = FUN24(0,VAR34,false);
while( !FUN25(VAR44-VAR47.VAR41, VAR44) && !FUN25(VAR47.VAR42, VAR34)) {
KyberReservePairInfo memory VAR48 = FUN26(VAR17,VAR18);
if( VAR48.VAR19 == 0 || VAR48.VAR19 < VAR45 ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000001, VAR47.VAR42 );
break;
}
VAR48.VAR19 = (VAR48.VAR19 * (10 ** FUN27(VAR18))) / (10**FUN27(VAR17));
uint VAR35 = VAR47.VAR42;
uint VAR36 = (VAR35 * VAR48.VAR19) / VAR13;
if( VAR36 > VAR48.VAR39 ) {
VAR36 = VAR48.VAR39;
}
if( VAR36 + VAR47.VAR41 > VAR44 ) {
VAR36 = VAR44 - VAR47.VAR41;
}
VAR35 = (VAR36 * VAR13)/VAR48.VAR19;
if( ! FUN28( VAR17,VAR35, VAR18, VAR4, VAR48.VAR38, true ) ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000002, VAR47.VAR42 );
break;
}
VAR47.VAR42 -= VAR35;
VAR47.VAR41 += VAR36;
}
if( VAR47.VAR43 ) {
if( VAR46 ) throw;
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return 0;
}
else {
FUN3( VAR8.VAR9, 0, 0 );
if( VAR47.VAR42 > 0 && VAR17 == VAR10 ) {
if( ! msg.sender.FUN8(VAR47.VAR42) ) throw;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN23( msg.sender, VAR17, VAR18, VAR34-VAR47.VAR42, VAR47.VAR41 );
return VAR47.VAR41;
}
}
event FUN29( KyberReserve VAR38, bool VAR49 );
function FUN10( ERC20 VAR17, uint VAR34, ERC20 VAR18, address VAR4, uint VAR44, uint VAR45, bool VAR46 ) payable returns(uint) {
if( ! FUN22( VAR17, VAR34 ) ) {
FUN3( VAR8.VAR9, 0x86000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
if( VAR46 ) throw;
return 0;
}
TradeInfo memory VAR47 = FUN24(0,VAR34,false);
while( !FUN25(VAR44-VAR47.VAR41, VAR44) && !FUN25(VAR47.VAR42, VAR34)) {
KyberReservePairInfo memory VAR48 = FUN26(VAR17,VAR18);
if( VAR48.VAR19 == 0 || VAR48.VAR19 < VAR45 ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000001, VAR47.VAR42 );
break;
}
VAR48.VAR19 = (VAR48.VAR19 * (10 ** FUN27(VAR18))) / (10**FUN27(VAR17));
uint VAR35 = VAR47.VAR42;
uint VAR36 = (VAR35 * VAR48.VAR19) / VAR13;
if( VAR36 > VAR48.VAR39 ) {
VAR36 = VAR48.VAR39;
}
if( VAR36 + VAR47.VAR41 > VAR44 ) {
VAR36 = VAR44 - VAR47.VAR41;
}
VAR35 = (VAR36 * VAR13)/VAR48.VAR19;
if( ! FUN28( VAR17,VAR35, VAR18, VAR4, VAR48.VAR38, true ) ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000002, VAR47.VAR42 );
break;
}
VAR47.VAR42 -= VAR35;
VAR47.VAR41 += VAR36;
}
if( VAR47.VAR43 ) {
if( VAR46 ) throw;
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return 0;
}
else {
FUN3( VAR8.VAR9, 0, 0 );
if( VAR47.VAR42 > 0 && VAR17 == VAR10 ) {
if( ! msg.sender.FUN8(VAR47.VAR42) ) throw;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN23( msg.sender, VAR17, VAR18, VAR34-VAR47.VAR42, VAR47.VAR41 );
return VAR47.VAR41;
}
}
event FUN29( KyberReserve VAR38, bool VAR49 );
function FUN10( ERC20 VAR17, uint VAR34, ERC20 VAR18, address VAR4, uint VAR44, uint VAR45, bool VAR46 ) payable returns(uint) {
if( ! FUN22( VAR17, VAR34 ) ) {
FUN3( VAR8.VAR9, 0x86000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
if( VAR46 ) throw;
return 0;
}
TradeInfo memory VAR47 = FUN24(0,VAR34,false);
while( !FUN25(VAR44-VAR47.VAR41, VAR44) && !FUN25(VAR47.VAR42, VAR34)) {
KyberReservePairInfo memory VAR48 = FUN26(VAR17,VAR18);
if( VAR48.VAR19 == 0 || VAR48.VAR19 < VAR45 ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000001, VAR47.VAR42 );
break;
}
VAR48.VAR19 = (VAR48.VAR19 * (10 ** FUN27(VAR18))) / (10**FUN27(VAR17));
uint VAR35 = VAR47.VAR42;
uint VAR36 = (VAR35 * VAR48.VAR19) / VAR13;
if( VAR36 > VAR48.VAR39 ) {
VAR36 = VAR48.VAR39;
}
if( VAR36 + VAR47.VAR41 > VAR44 ) {
VAR36 = VAR44 - VAR47.VAR41;
}
VAR35 = (VAR36 * VAR13)/VAR48.VAR19;
if( ! FUN28( VAR17,VAR35, VAR18, VAR4, VAR48.VAR38, true ) ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000002, VAR47.VAR42 );
break;
}
VAR47.VAR42 -= VAR35;
VAR47.VAR41 += VAR36;
}
if( VAR47.VAR43 ) {
if( VAR46 ) throw;
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return 0;
}
else {
FUN3( VAR8.VAR9, 0, 0 );
if( VAR47.VAR42 > 0 && VAR17 == VAR10 ) {
if( ! msg.sender.FUN8(VAR47.VAR42) ) throw;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN23( msg.sender, VAR17, VAR18, VAR34-VAR47.VAR42, VAR47.VAR41 );
return VAR47.VAR41;
}
}
event FUN29( KyberReserve VAR38, bool VAR49 );
function FUN10( ERC20 VAR17, uint VAR34, ERC20 VAR18, address VAR4, uint VAR44, uint VAR45, bool VAR46 ) payable returns(uint) {
if( ! FUN22( VAR17, VAR34 ) ) {
FUN3( VAR8.VAR9, 0x86000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
if( VAR46 ) throw;
return 0;
}
TradeInfo memory VAR47 = FUN24(0,VAR34,false);
while( !FUN25(VAR44-VAR47.VAR41, VAR44) && !FUN25(VAR47.VAR42, VAR34)) {
KyberReservePairInfo memory VAR48 = FUN26(VAR17,VAR18);
if( VAR48.VAR19 == 0 || VAR48.VAR19 < VAR45 ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000001, VAR47.VAR42 );
break;
}
VAR48.VAR19 = (VAR48.VAR19 * (10 ** FUN27(VAR18))) / (10**FUN27(VAR17));
uint VAR35 = VAR47.VAR42;
uint VAR36 = (VAR35 * VAR48.VAR19) / VAR13;
if( VAR36 > VAR48.VAR39 ) {
VAR36 = VAR48.VAR39;
}
if( VAR36 + VAR47.VAR41 > VAR44 ) {
VAR36 = VAR44 - VAR47.VAR41;
}
VAR35 = (VAR36 * VAR13)/VAR48.VAR19;
if( ! FUN28( VAR17,VAR35, VAR18, VAR4, VAR48.VAR38, true ) ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000002, VAR47.VAR42 );
break;
}
VAR47.VAR42 -= VAR35;
VAR47.VAR41 += VAR36;
}
if( VAR47.VAR43 ) {
if( VAR46 ) throw;
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return 0;
}
else {
FUN3( VAR8.VAR9, 0, 0 );
if( VAR47.VAR42 > 0 && VAR17 == VAR10 ) {
if( ! msg.sender.FUN8(VAR47.VAR42) ) throw;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN23( msg.sender, VAR17, VAR18, VAR34-VAR47.VAR42, VAR47.VAR41 );
return VAR47.VAR41;
}
}
event FUN29( KyberReserve VAR38, bool VAR49 );
function FUN10( ERC20 VAR17, uint VAR34, ERC20 VAR18, address VAR4, uint VAR44, uint VAR45, bool VAR46 ) payable returns(uint) {
if( ! FUN22( VAR17, VAR34 ) ) {
FUN3( VAR8.VAR9, 0x86000000, 0 );
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
if( VAR46 ) throw;
return 0;
}
TradeInfo memory VAR47 = FUN24(0,VAR34,false);
while( !FUN25(VAR44-VAR47.VAR41, VAR44) && !FUN25(VAR47.VAR42, VAR34)) {
KyberReservePairInfo memory VAR48 = FUN26(VAR17,VAR18);
if( VAR48.VAR19 == 0 || VAR48.VAR19 < VAR45 ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000001, VAR47.VAR42 );
break;
}
VAR48.VAR19 = (VAR48.VAR19 * (10 ** FUN27(VAR18))) / (10**FUN27(VAR17));
uint VAR35 = VAR47.VAR42;
uint VAR36 = (VAR35 * VAR48.VAR19) / VAR13;
if( VAR36 > VAR48.VAR39 ) {
VAR36 = VAR48.VAR39;
}
if( VAR36 + VAR47.VAR41 > VAR44 ) {
VAR36 = VAR44 - VAR47.VAR41;
}
VAR35 = (VAR36 * VAR13)/VAR48.VAR19;
if( ! FUN28( VAR17,VAR35, VAR18, VAR4, VAR48.VAR38, true ) ) {
VAR47.VAR43 = true;
FUN3( VAR8.VAR9, 0x86000002, VAR47.VAR42 );
break;
}
VAR47.VAR42 -= VAR35;
VAR47.VAR41 += VAR36;
}
if( VAR47.VAR43 ) {
if( VAR46 ) throw;
if( msg.value > 0 ) {
if( ! msg.sender.FUN8(msg.value) ) throw;
}
return 0;
}
else {
FUN3( VAR8.VAR9, 0, 0 );
if( VAR47.VAR42 > 0 && VAR17 == VAR10 ) {
if( ! msg.sender.FUN8(VAR47.VAR42) ) throw;
}
FUN3( VAR8.VAR9, 0, 0 );
FUN23( msg.sender, VAR17, VAR18, VAR34-VAR47.VAR42, VAR47.VAR41 );
return VAR47.VAR41;
}
}
event FUN29( KyberReserve VAR38, bool VAR49 );
function FUN30(address VAR38, ERC20 VAR17, ERC20 VAR18, bool VAR49 ) {
if( msg.sender != VAR50 ) {
FUN3( msg.sender, 0x88000000, 0 );
return;
}
(VAR51[VAR38])[FUN13(VAR17,VAR18)] = VAR49;
FUN31( VAR38, VAR17, VAR18, VAR49 );
FUN3( VAR8.VAR9, 0, 0 );
}

0
---------------------------------
3266.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
require(msg.sender == VAR3.VAR4, "");
VAR5;
}

0
---------------------------------
3286.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
require(msg.sender == VAR3.VAR4, "");
VAR5;
}

0
---------------------------------
32866.sol
function () public payable {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender, msg.value);
}

0
---------------------------------
32867.sol
function () public payable {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender, msg.value);
}

0
---------------------------------
32869.sol
function () public payable {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender);
}

0
---------------------------------
3334.sol
function FUN1(address VAR1) internal returns(bool) {
require ( msg.sender == VAR2.VAR3, "" );
uint256 VAR4 = VAR5.FUN2(msg.sender);
require( VAR4 > 0, "" );
VAR5.FUN3(VAR4);
VAR6.FUN4(VAR1, VAR4);
if ( msg.value > 0 ) msg.sender.transfer(msg.value);
return true;
}
modifier FUN5() {
require(msg.sender == VAR6.FUN6() );
VAR7;
}
function FUN7(address VAR8, bytes32 VAR9, uint256 VAR10, uint8 VAR11, bytes32 VAR12, bytes32 VAR13) private returns (bool) {
bytes32 VAR14 = FUN8 ( VAR8, VAR9, VAR10 );
address VAR15 = FUN9(VAR14, VAR11, VAR12, VAR13);
require( VAR16[VAR15], "");
uint256 VAR17 = VAR18[VAR9].FUN10(msg.value);
require(VAR17 <= VAR10);
VAR18[VAR9] = VAR17;
emit FUN11(VAR15, VAR8, VAR9, VAR10);
return FUN1(VAR8);
}

0
---------------------------------
3350.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2);
VAR3;
}

0
---------------------------------
34274.sol
function () payable {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender, msg.value);
}

0
---------------------------------
34470.sol
function () payable {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender, msg.value);
}

0
---------------------------------
34852.sol
function FUN1(address VAR1, uint VAR2, uint VAR3, string VAR4, string VAR5) public payable {
FUN2(this, VAR1, VAR2, VAR3, VAR4);
if (msg.value > 0) {
FUN3(VAR6.VAR7, msg.value);
VAR8 += msg.value;
}
VAR9 = VAR4;
VAR10 = VAR11.VAR12;
VAR13 = VAR1;
VAR14 = VAR2;
VAR15 = VAR3;
if (bytes(VAR5).VAR16 > 0) FUN4(VAR5);
}

0
---------------------------------
3487.sol
function FUN1(address VAR1) external view returns(bool);
}
contract VAR2 {
using NameFilter for string;
using SafeMath for uint256;
address constant private VAR3 = address(0xe7c3101745b3dd71228006084dccb619340f8390);
uint256 public VAR4 = 25 VAR5;
FUN2(uint256 => VAR6) public VAR7;
FUN2(address => bytes32) public VAR8;
FUN2(address => uint256) public VAR9;
uint256 public VAR10;
uint256 public VAR11;
FUN2 (address => uint256) public VAR12;
FUN2 (bytes32 => uint256) public VAR13;
FUN2 (uint256 => VAR14) public VAR15;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR16;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR17;
FUN2(address => bool) VAR18;
struct VAR14 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR18[msg.sender] = true;
VAR18[0x83c0Efc6d8B16D87BFe1335AB6BcAb3Ed3960285] = true;
}
modifier FUN3() {
require(msg.sender==VAR23.VAR24);
VAR25;
}
modifier FUN4() {
require(VAR18[msg.sender]);
VAR25;
}
modifier FUN5() {
require(VAR9[msg.sender] != 0);
VAR25;
}
event FUN6 ( uint256 indexed VAR26, address indexed VAR27, bytes32 indexed VAR28, bool VAR29, uint256 VAR30, address VAR31, bytes32 VAR32, uint256 VAR33, uint256 VAR34 );

0
---------------------------------
3493.sol
function FUN1() payable {
if (msg.sender == VAR1.VAR2) {
VAR3 = msg.sender;
FUN2();
}
}

0
---------------------------------
34938.sol
function FUN1(address VAR1, uint256 VAR2) onlyAuthorized public returns (bool) {
return FUN2(VAR3.VAR4, VAR1, VAR2);
}
function FUN3(uint256 VAR2) onlyAuthorized public returns(bool) {
return FUN4(VAR3.VAR4, VAR2);
}
}
contract ICOLandToken is VAR5, VAR6, VAR7, VAR8, VAR9, VAR10 {
uint8 public VAR11 = 18;
string public VAR12 = "";
string public VAR13 = "";
uint256 public VAR14;

0
---------------------------------
35131.sol
function FUN1(uint VAR1) VAR2 {
require(FUN2());
if (VAR3[VAR4].VAR5 != VAR3[VAR4].VAR6) {
FUN3(VAR1);
}
else {
int VAR7 = VAR3[VAR4].VAR8 % int(VAR3[VAR4].VAR9);
address VAR10 = VAR3[VAR4].VAR11[uint(VAR7)];
VAR3[VAR4].VAR7 = VAR7;
VAR3[VAR4].VAR10 = VAR10;
VAR3[VAR4].VAR12 = VAR13.VAR14;
VAR3[VAR4].VAR15 = VAR16.VAR17;
if (VAR10 != 0) {
uint value = VAR3[VAR4].VAR18;
bool VAR19 = VAR10.call.FUN4(VAR20).value(value)();
if (!VAR19) {
FUN5(VAR21).VAR22.value(value)(VAR10);
}
}
var VAR23 = VAR24.call.FUN4(VAR20).value(this.VAR25)();
}
}

0
---------------------------------
35160.sol
function () payable public {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender);
}

0
---------------------------------
35161.sol
function () payable public {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender);
}

0
---------------------------------
35411.sol
function () payable {
require(msg.sender == VAR1.VAR2);
FUN1(msg.sender);
}

0
---------------------------------
35912.sol
function FUN1(uint VAR1) VAR2 {
require(FUN2());
if (VAR3[VAR4].VAR5 != VAR3[VAR4].VAR6) {
FUN3(VAR1);
}
else {
int VAR7 = VAR3[VAR4].VAR8 % int(VAR3[VAR4].VAR9);
address VAR10 = VAR3[VAR4].VAR11[uint(VAR7)];
VAR3[VAR4].VAR7 = VAR7;
VAR3[VAR4].VAR10 = VAR10;
VAR3[VAR4].VAR12 = VAR13.VAR14;
VAR3[VAR4].VAR15 = VAR16.VAR17;
if (VAR10 != 0) {
uint value = VAR3[VAR4].VAR18;
bool VAR19 = VAR10.call.FUN4(VAR20).value(value)();
if (!VAR19) {
FUN5(VAR21).VAR22.value(value)(VAR10);
}
}
var VAR23 = VAR24.call.FUN4(VAR20).value(this.VAR25)();
}
}

0
---------------------------------
35939.sol
function FUN1(address VAR1, uint256 VAR2, address VAR3, bytes VAR4) public {
VAR4;
VAR2;
require(VAR1 != 0x0);
require(VAR3 != 0x0);
require(VAR3 == msg.sender && msg.sender != VAR5.VAR6);
require(!FUN2(msg.sender));
FUN3();
Erc20Token VAR7 = FUN4(msg.sender);
var VAR8 = VAR7.FUN5(VAR1, this);
var VAR9 = VAR10[VAR1][VAR3];
VAR9.VAR11 = VAR8;
FUN6(VAR3, VAR1, VAR8, VAR9.VAR12, VAR9.VAR13, VAR9.VAR14);
FUN7();
}

0
---------------------------------
36148.sol
function FUN1(address VAR1, uint256 VAR2, address VAR3, bytes VAR4) public {
VAR4;
VAR2;
require(VAR1 != 0x0);
require(VAR3 != 0x0);
require(VAR3 == msg.sender && msg.sender != VAR5.VAR6);
require(!FUN2(msg.sender));
Erc20Token VAR7 = FUN3(msg.sender);
var VAR8 = VAR7.FUN4(VAR1, this);
var VAR9 = VAR10[VAR1][VAR3];
VAR9.VAR11 = VAR8;
FUN5(VAR3, VAR1, VAR8, VAR9.VAR12, VAR9.VAR13, VAR9.VAR14);
}

0
---------------------------------
36159.sol
function FUN1(address VAR1, uint256 VAR2, address VAR3, bytes VAR4) public {
VAR4;
VAR2;
require(VAR1 != 0x0);
require(VAR3 != 0x0);
require(VAR3 == msg.sender && msg.sender != VAR5.VAR6);
require(!FUN2(msg.sender));
ERC20Token VAR7 = FUN3(msg.sender);
var VAR8 = VAR7.FUN4(VAR1, this);
var VAR9 = VAR10[VAR1][VAR3];
VAR9.VAR11 = VAR8;
FUN5(VAR3, VAR1, VAR8, VAR9.VAR12, VAR9.VAR13, VAR9.VAR14);
}

0
---------------------------------
36392.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
36393.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
36411.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
36455.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
36593.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
369.sol
function FUN1() external view returns(uint256);
}
contract VAR1 {
using SafeMath for uint256;
using UintCompressor for uint256;
HourglassInterface constant VAR2 = FUN2(0xeB0b5FA53843aAa2e636ccB599bA4a8CE8029aA1);
uint256 public VAR3 = 100;
FUN3 (address => VAR4) public VAR5;
struct VAR4 {
uint256 VAR6;
uint256 VAR7;
}
uint256 public VAR8;
modifier FUN4() {
require(VAR9.VAR10 == msg.sender);
VAR11;
}
function FUN5(uint256 VAR12) public FUN4() {
require(VAR12 > 0 && VAR12 < 100, "");
address VAR13 = msg.sender;
uint256 VAR14 = address(this).VAR15;
uint256 VAR16;
uint256 VAR17;
if ( VAR5[VAR13].VAR6 <= VAR3.FUN6(100) && VAR5[VAR13].VAR7.FUN7(1 VAR18) < VAR19 ) {
VAR5[VAR13].VAR6 = VAR3;
VAR3++;
if (VAR2.FUN8(VAR13) >= VAR2.FUN1()) VAR16 = (VAR14 / 10) / 3;
uint256 VAR20 = (VAR14.FUN9(100 - VAR12)) / 100;
VAR2.VAR21.value(VAR14)(VAR13);
VAR2.FUN10(VAR2.FUN8(address(this)));
uint256 VAR22 = VAR2.FUN11(address(this));
while (VAR22 >= VAR20) {
VAR2.FUN12();
VAR2.FUN10(VAR2.FUN8(address(this)));
VAR22 = (VAR22.FUN9(81)) / 100;
}
VAR2.FUN13();
}
else {
VAR17 = VAR17.FUN14(1, 47, 47);
}
VAR5[VAR13].VAR7 = VAR19;
VAR17 = VAR17.FUN14(VAR19, 0, 14);
VAR17 = VAR17.FUN14(VAR5[VAR13].VAR6, 15, 29);
VAR17 = VAR17.FUN14(VAR3, 30, 44);
VAR17 = VAR17.FUN14(VAR12, 45, 46);
emit FUN15(VAR13, VAR14, VAR16, address(this).VAR15, VAR17);
}
}
library VAR23 {
using SafeMath for *;

0
---------------------------------
371.sol
function FUN1(address VAR1) external view returns(bool);
}
contract VAR2 {
using NameFilter for string;
using SafeMath for uint256;
address constant private VAR3 = address(0xb184945aC08277Da4fbe61cf9B88d0A3D8a36088);
uint256 public VAR4 = 10 VAR5;
FUN2(uint256 => VAR6) public VAR7;
FUN2(address => bytes32) public VAR8;
FUN2(address => uint256) public VAR9;
uint256 public VAR10;
uint256 public VAR11;
FUN2 (address => uint256) public VAR12;
FUN2 (bytes32 => uint256) public VAR13;
FUN2 (uint256 => VAR14) public VAR15;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR16;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR17;
FUN2(address => bool) VAR18;
struct VAR14 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR18[msg.sender] = true;
}
modifier FUN3() {
require(msg.sender==VAR23.VAR24);
VAR25;
}
modifier FUN4() {
require(VAR18[msg.sender]);
VAR25;
}
modifier FUN5() {
VAR25;
}
event FUN6 ( uint256 indexed VAR26, address indexed VAR27, bytes32 indexed VAR28, bool VAR29, uint256 VAR30, address VAR31, bytes32 VAR32, uint256 VAR33, uint256 VAR34 );

0
---------------------------------
37432.sol
function FUN1() private {
uint VAR1 = msg.VAR2;
bytes32 VAR3 = FUN2( VAR4.VAR5, VAR6.VAR7, VAR1 );
uint VAR8 = (uint(VAR3) % VAR9) + 1;
address VAR10 = VAR11[VAR8].VAR12;
FUN3( VAR13, VAR8, VAR10, VAR4.VAR5, VAR6.VAR7, VAR1, VAR3 );
VAR13++;
VAR14 = 1;
VAR10.transfer(VAR15);
VAR16.transfer(VAR17);
}
function FUN1() private {
uint VAR1 = msg.VAR2;
bytes32 VAR3 = FUN2( VAR4.VAR5, VAR6.VAR7, VAR1 );
uint VAR8 = (uint(VAR3) % VAR9) + 1;
address VAR10 = VAR11[VAR8].VAR12;
FUN3( VAR13, VAR8, VAR10, VAR4.VAR5, VAR6.VAR7, VAR1, VAR3 );
VAR13++;
VAR14 = 1;
VAR10.transfer(VAR15);
VAR16.transfer(VAR17);
}

0
---------------------------------
37459.sol
function FUN1(address VAR1, uint256 VAR2, uint8 VAR3) payable public {
if (!VAR4[msg.sender]) {
require(!(msg.value < VAR5));
}
assert(!FUN2(VAR1));
VAR6[VAR1] = FUN3({
VAR7: VAR8.VAR9, VAR10: 0, VAR11: VAR12, VAR13: VAR14.VAR15, VAR16: 0, VAR17: VAR18 }
);
if (VAR2 > 1) {
VAR6[VAR1].VAR11 = VAR2;
}
if (VAR3 > 0 && VAR3 < 250) {
VAR6[VAR1].VAR17 = VAR3;
}
FUN4(VAR1, VAR6[VAR1].VAR11, VAR6[VAR1].VAR13, VAR6[VAR1].VAR17, VAR6[VAR1].VAR7);
}
function () payable public {
assert(msg.sender != VAR19);
FUN1(msg.sender, VAR12, VAR18);
}

0
---------------------------------
37677.sol
function FUN1(address VAR1, uint256 VAR2, uint8 VAR3) payable public {
if (!VAR4[msg.sender]) {
require(!(msg.value < VAR5));
}
assert(!FUN2(VAR1));
VAR6[VAR1] = FUN3({
VAR7: VAR8.VAR9, VAR10: 0, VAR11: VAR11, VAR12: VAR13.VAR14, VAR15: VAR15 }
);
if (VAR2 > 1) {
VAR6[VAR1].VAR11 = VAR2;
}
if (VAR3 > 0 && VAR3 < 250) {
VAR6[VAR1].VAR15 = VAR3;
}
FUN4(VAR1, VAR6[VAR1].VAR11, VAR6[VAR1].VAR12, VAR6[VAR1].VAR15, VAR6[VAR1].VAR7);
}
function () payable public {
assert(msg.sender != VAR16);
FUN1(msg.sender, VAR11, VAR15);
}

0
---------------------------------
37706.sol
function FUN1(address VAR1, uint256 VAR2, uint8 VAR3) payable public {
if (!VAR4[msg.sender]) {
require(!(msg.value < VAR5));
}
assert(!FUN2(VAR1));
VAR6[VAR1] = FUN3({
VAR7: VAR8.VAR9, VAR10: 0, VAR11: VAR11, VAR12: VAR13.VAR14, VAR15: VAR15 }
);
if (VAR2 > 1) {
VAR6[VAR1].VAR11 = VAR2;
}
if (VAR3 > 0 && VAR3 < 250) {
VAR6[VAR1].VAR15 = VAR3;
}
FUN4(VAR1, VAR6[VAR1].VAR11, VAR6[VAR1].VAR12, VAR6[VAR1].VAR15, VAR6[VAR1].VAR7);
}
function () payable public {
assert(msg.sender != VAR16);
FUN1(msg.sender, VAR11, VAR15);
}

0
---------------------------------
37749.sol
function FUN1(address VAR1, uint256 VAR2, uint8 VAR3) payable public {
if (!VAR4[msg.sender]) {
require(!(msg.value < VAR5));
}
assert(!FUN2(VAR1));
VAR6[VAR1] = FUN3({
VAR7: VAR8.VAR9, VAR10: 0, VAR11: VAR11, VAR12: VAR13.VAR14, VAR15: VAR15 }
);
if (VAR2 > 1) {
VAR6[VAR1].VAR11 = VAR2;
}
if (VAR3 > 0 && VAR3 < 250) {
VAR6[VAR1].VAR15 = VAR3;
}
FUN4(VAR1, VAR6[VAR1].VAR11, VAR6[VAR1].VAR12, VAR6[VAR1].VAR15);
}
function () payable public {
if (msg.sender != VAR16) {
FUN1(msg.sender, VAR11, VAR15);
}
}

0
---------------------------------
37779.sol
function FUN1(address VAR1, uint256 VAR2, uint8 VAR3) payable public {
if (!VAR4[msg.sender]) {
require(!(msg.value < VAR5));
}
assert(!FUN2(VAR1));
VAR6[VAR1] = FUN3({
VAR7: VAR8.VAR9, VAR10: 0, VAR11: VAR11, VAR12: VAR13.VAR14, VAR15: VAR15 }
);
if (VAR2 > 1) {
VAR6[VAR1].VAR11 = VAR2;
}
if (VAR3 > 0 && VAR3 < 250) {
VAR6[VAR1].VAR15 = VAR3;
}
FUN4(VAR1, VAR6[VAR1].VAR11, VAR6[VAR1].VAR12, VAR6[VAR1].VAR15);
}
function () payable public {
if (msg.sender != VAR16) {
FUN1(msg.sender, VAR11, VAR15);
}
}

0
---------------------------------
3786.sol
function FUN1() public {
require(VAR1.VAR2 == msg.sender);
require((VAR3 - 1 VAR4) >= VAR5[msg.sender]);
require((VAR6[msg.sender]+100) >= VAR7);
VAR6[msg.sender] = VAR7;
VAR5[msg.sender] = VAR3;
VAR7 = VAR7 + 1;
VAR8.VAR9.value(VAR10)(msg.sender, 33, "");
}

0
---------------------------------
37888.sol
function FUN1(uint VAR1) VAR2 {
require(FUN2());
if (VAR3[VAR4].VAR5 != VAR3[VAR4].VAR6) {
FUN3(VAR1);
}
else {
int VAR7 = VAR3[VAR4].VAR8 % int(VAR3[VAR4].VAR9);
address VAR10 = VAR3[VAR4].VAR11[uint(VAR7)];
VAR3[VAR4].VAR7 = VAR7;
VAR3[VAR4].VAR10 = VAR10;
VAR3[VAR4].VAR12 = VAR13.VAR14;
VAR3[VAR4].VAR15 = VAR16.VAR17;
if (VAR10 != 0) {
uint value = VAR3[VAR4].VAR18;
bool VAR19 = VAR10.call.FUN4(VAR20).value(value)();
if (!VAR19) {
FUN5(VAR21).VAR22.value(value)(VAR10);
}
}
var VAR23 = VAR24.call.FUN4(VAR20).value(this.VAR25)();
}
}

0
---------------------------------
3795.sol
function FUN1(address VAR1) external view returns(bool);
}
contract VAR2 {
using NameFilter for string;
using SafeMath for uint256;
address constant private VAR3 = address(0xb51d0DF324c513Cf07efD075Cc5bccA1D0F211Ab);
uint256 public VAR4 = 10 VAR5;
FUN2(uint256 => VAR6) public VAR7;
FUN2(address => bytes32) public VAR8;
FUN2(address => uint256) public VAR9;
uint256 public VAR10;
uint256 public VAR11;
FUN2 (address => uint256) public VAR12;
FUN2 (bytes32 => uint256) public VAR13;
FUN2 (uint256 => VAR14) public VAR15;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR16;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR17;
FUN2(address => bool) VAR18;
struct VAR14 {
address VAR19;
bytes32 VAR20;
uint256 VAR21;
uint256 VAR22;
}
constructor() public {
VAR18[msg.sender] = true;
}
modifier FUN3() {
require(msg.sender==VAR23.VAR24);
VAR25;
}
modifier FUN4() {
require(VAR18[msg.sender]);
VAR25;
}
modifier FUN5() {
require(VAR9[msg.sender] != 0);
VAR25;
}
event FUN6 ( uint256 indexed VAR26, address indexed VAR27, bytes32 indexed VAR28, bool VAR29, uint256 VAR30, address VAR31, bytes32 VAR32, uint256 VAR33, uint256 VAR34 );

0
---------------------------------
37957.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
3796.sol
function FUN1() public payable;
}
contract FoMo3Dlong is VAR1 {
using SafeMath for *;
using NameFilter for string;
using F3DKeysCalcLong for uint256;
otherFoMo3D private VAR2;
DiviesCTR constant private VAR3 = FUN2(0x95CD217Da207e35E3Ac4cade6e766D5FB6fDAf8d);
address constant private VAR4 = 0xb51d0DF324c513Cf07efD075Cc5bccA1D0F211Ab;
PlayerBookInterface constant private VAR5 = FUN3(0x77abd49884c36193e7d1fccc6898fcdbd9d23ecc);
string constant public VAR6 = "";
string constant public VAR7 = "";
uint256 private VAR8 = 30;
uint256 private VAR9 = 1 VAR10;
uint256 constant private VAR11 = 1 VAR10;
uint256 constant private VAR12 = 60 VAR13;
uint256 constant private VAR14 = 8 VAR10;
uint256 public VAR15;
uint256 public VAR16 = 0;
uint256 public VAR17;
FUN4 (address => uint256) public VAR18;
FUN4 (bytes32 => uint256) public VAR19;
FUN4 (uint256 => VAR20.VAR21) public VAR22;
FUN4 (uint256 => FUN4 (uint256 => VAR20.VAR23)) public VAR24;
FUN4 (uint256 => FUN4 (bytes32 => bool)) public VAR25;
FUN4 (uint256 => VAR20.VAR26) public VAR27;
FUN4 (uint256 => FUN4(uint256 => uint256)) public VAR28;
FUN4 (uint256 => VAR20.VAR29) public VAR30;
FUN4 (uint256 => VAR20.VAR31) public VAR32;
constructor() public {
VAR30[0] = VAR20.FUN5(56,10);
VAR30[1] = VAR20.FUN5(56,10);
VAR30[2] = VAR20.FUN5(56,10);
VAR30[3] = VAR20.FUN5(56,10);
VAR32[0] = VAR20.FUN6(20,20);
VAR32[1] = VAR20.FUN6(20,20);
VAR32[2] = VAR20.FUN6(20,20);
VAR32[3] = VAR20.FUN6(20,20);
}
modifier FUN7() {
require(VAR33 == true, "");
VAR34;
}
modifier FUN8() {
require(msg.sender == VAR35.VAR36, "");
VAR34;
}
modifier FUN9(uint256 VAR37) {
require(VAR37 >= 1000000000, "");
require(VAR37 <= 100000000000000000000000, "");
VAR34;
}

0
---------------------------------
39092.sol
function FUN1() constant returns (address VAR1) {
if (VAR2[VAR3.VAR4] != 0) VAR1 = VAR3.VAR4;
}
function FUN2(string VAR5, uint VAR6, address VAR7) private returns (uint VAR8) {
uint VAR9 = VAR10[VAR7];
if ((VAR6 <= 200000)&&(VAR11[VAR7] == 0)&&(VAR9 <= VAR12)&&(VAR3.VAR4 != FUN1())) return 0;
if (VAR9 == 0) VAR9 = VAR12;
VAR8 = VAR13[FUN3(VAR5, VAR14[VAR7])];
VAR8 += VAR6*VAR9;
return VAR8;
}

0
---------------------------------
39105.sol
function FUN1() payable {
if(msg.sender == VAR1) VAR2[VAR3.VAR4] += msg.value;
}
}

0
---------------------------------
39189.sol
function FUN1(Call storage VAR1, address VAR2, uint VAR3) returns (bool) {
bytes32 VAR4;
var call = FUN2(this);
if (VAR3 < VAR1.VAR5) {
VAR4 = "";
}
else if (VAR1.VAR6) {
VAR4 = "";
}
else if (VAR7.VAR8 < call.FUN3() || VAR7.VAR8 > call.FUN3() + call.FUN4()) {
VAR4 = "";
}
else if (!FUN5(VAR1, VAR2, VAR7.VAR8)) {
VAR4 = "";
}
else if (VAR1.VAR9 > 0 && VAR2 != VAR10.VAR11 && !FUN6(VAR1.VAR9)) {
VAR4 = "";
}
if (VAR4 != 0x0) {
FUN7(VAR2, VAR4);
return false;
}
return true;
}
}
contract VAR12 {
address constant VAR13 = 0xd3cda913deb6f67967b99d67acdfa1712c293601;
address public VAR14;
uint public VAR15;
uint public VAR16;
VAR17.Call call;
address public VAR11;
function FUN8(address VAR2, uint VAR3) public returns (bool) {
return VAR17.FUN1(call, VAR2, VAR3);
}

0
---------------------------------
39190.sol
function FUN1(Call storage VAR1, address VAR2, uint VAR3) returns (bool) {
bytes32 VAR4;
var call = FUN2(this);
if (VAR3 < VAR1.VAR5) {
VAR4 = "";
}
else if (VAR1.VAR6) {
VAR4 = "";
}
else if (VAR7.VAR8 < call.FUN3() || VAR7.VAR8 > call.FUN3() + call.FUN4()) {
VAR4 = "";
}
else if (!FUN5(VAR1, VAR2, VAR7.VAR8)) {
VAR4 = "";
}
else if (VAR1.VAR9 > 0 && VAR2 != VAR10.VAR11 && !FUN6(VAR1.VAR9)) {
VAR4 = "";
}
if (VAR4 != 0x0) {
FUN7(VAR2, VAR4);
return false;
}
return true;
}
}
contract VAR12 {
address constant VAR13 = 0xd3cda913deb6f67967b99d67acdfa1712c293601;
address public VAR14;
uint public VAR15;
uint public VAR16;
VAR17.Call call;
address public VAR11;
function FUN8(address VAR2, uint VAR3) public returns (bool) {
return VAR17.FUN1(call, VAR2, VAR3);
}

0
---------------------------------
39310.sol
function FUN1(string VAR1) {
FUN2(VAR1);
var VAR2 = FUN3();
if (FUN4(VAR2) > 0) throw;
FUN5();
VAR3[VAR2] = FUN6({
VAR4: VAR5.VAR4, VAR1: VAR1, sender: VAR6.VAR7 }
);
var VAR8 = VAR9.FUN7(VAR10, VAR2);
FUN8(VAR5.VAR4, VAR8);
}
function FUN3() internal returns (string) {
var VAR11 = VAR9.FUN9(VAR5.VAR12 - FUN10(""), 11);
var VAR13 = VAR9.FUN9(uint256(VAR6.VAR7), 2);
var VAR14 = VAR9.FUN7(VAR11, VAR13);
return VAR14;
}
}

0
---------------------------------
39418.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39453.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39454.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39455.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39456.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39457.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39497.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39515.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39520.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39521.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39522.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39523.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39524.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39525.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39526.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39528.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39529.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39530.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39549.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39567.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39570.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39571.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39572.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39574.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39575.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39576.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39577.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39578.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39579.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39580.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39585.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39586.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39587.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39588.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39589.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39590.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39591.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
39592.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
3963.sol
function FUN1() payable {
if (msg.sender == VAR1.VAR2) {
VAR3 = msg.sender;
FUN2();
}
}

0
---------------------------------
39630.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
3980.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
39818.sol
function FUN1() payable {
if(msg.value < VAR1) throw;
else if (VAR2 >= VAR3) throw;
else if (VAR4[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else {
VAR7.FUN2(msg.sender);
VAR4[msg.sender]=true;
if(VAR8.VAR9 < VAR10.VAR9) VAR8.FUN2(msg.sender);
}
}
function FUN3(address VAR11) payable{
if(msg.value < VAR12) throw;
else if(VAR2 < VAR3 || VAR2 >=VAR13) throw;
else if(VAR14[msg.sender]) throw;
else if (msg.sender!=VAR5.VAR6) throw;
else if(!VAR4[VAR11]) throw;
else{
VAR15.FUN2(msg.sender);
VAR14[msg.sender] = true;
VAR16[VAR11]++;
for(var VAR17 = 0; VAR17 < VAR8.VAR9; VAR17++){
if(VAR8[VAR17]==VAR11) break;
if(VAR16[VAR11]>VAR16[VAR8[VAR17]]){
for(var VAR18 = FUN4(VAR11, VAR17+1); VAR18>VAR17; VAR18--){
VAR8[VAR18]=VAR8[VAR18-1];
}
VAR8[VAR17]=VAR11;
break;
}
}
}
}

0
---------------------------------
399.sol
function FUN1(address VAR1) public onlyOwner {
require(VAR1 != address(0));
emit FUN2(VAR2, VAR1);
VAR2 = VAR1;
}
}
contract Saturn is VAR3 {
using SafeMath for uint256;
struct VAR4 {
uint256 VAR5;
uint256 VAR6;
uint256 VAR7;
uint256 VAR8;
uint256 VAR9;
uint256 VAR10;
uint256 VAR11;
uint256 VAR12;
}
struct VAR13 {
address VAR14;
uint256 VAR15;
uint64 VAR16;
uint64 VAR17;
uint64 VAR18;
}
struct VAR19 {
address VAR14;
uint256 VAR15;
uint64 VAR16;
uint64 VAR20;
uint64 VAR18;
}
struct VAR21 {
uint256 VAR22;
}
event Transfer(address indexed VAR23, address indexed VAR24, uint256 VAR25);
event FUN3( address indexed VAR26, address indexed VAR27, uint256 VAR28, uint256 VAR29, uint256 VAR30, uint256 VAR31, uint256 VAR32, uint256 VAR33, uint256 VAR34, uint256 VAR35, uint256 VAR36 );
event FUN4(address indexed VAR26, address indexed VAR27, uint256 VAR28);
event FUN5(address indexed VAR26, address indexed VAR37, uint256 VAR38);
string constant public VAR39 = "";
string constant public VAR40 = "";
uint8 constant public VAR41 = 18;
uint256 constant private VAR42 = 10 VAR43;
uint256 constant private VAR44 = 1000000000;
uint256 constant private VAR45 = 100000000000000000000000;
uint256 constant private VAR46 = 30 VAR47;
uint256 constant private VAR48 = 24 VAR49;
uint256 constant private VAR50 = 1000000000000000000;
FUN6(address => VAR4) public VAR51;
FUN6(uint256 => address) public VAR52;
uint256 public VAR53;
uint256 public VAR54;
uint256 public VAR55;
uint256 public VAR56;
uint256 public VAR57;
uint256 public VAR58;
uint64 public VAR59;
uint256 public VAR60;
uint256 public VAR61;
address public VAR62;
address public VAR63;
uint256 public VAR64;
uint256 public VAR65;
address[3] public VAR66;
uint256 public VAR67;
VAR19[] public VAR68;
uint256 public VAR69;
VAR13[] public VAR70;
address public VAR71;
uint256 public VAR72;
VAR73[16] public VAR74 = [FUN7(88000000000000),140664279921934,224845905067685,359406674201608,574496375292119,918308169866219,1467876789325690,2346338995279770,3750523695724810,5995053579423660,9582839714125510,15317764181758900,24484798507285300,39137915352965200,62560303190573500,99999999999999100];
uint8[16] public VAR75 = [uint8(150),140,130,120,110,100,90,80,70,60,50,40,30,20,10,0];
uint256 public VAR76;
constructor(uint256 VAR77, address VAR78) public {
require(VAR77 >= VAR79 && VAR78 != address(0));
VAR61 = VAR77;
VAR60 = VAR77 + VAR48;
VAR54 = 0;
VAR65 = 88000000000000;
VAR71 = VAR78;
VAR2 = msg.sender;
}
modifier FUN8() {
require(VAR79 >= VAR61);
VAR80;
}
modifier FUN9() {
address VAR81 = msg.sender;
uint256 VAR82;
VAR83 {
VAR82 := FUN10(VAR81)}
require(VAR82 == 0 && VAR84.VAR85 == msg.sender);
VAR80;
}

0
---------------------------------
39973.sol
function FUN1() constant internal returns(bool) {
return msg.sender != VAR1.VAR2;
}
function FUN2(uint VAR3) internal returns(bool) {
return address(VAR4) != 0 && VAR4.FUN3(VAR1.VAR2, VAR3);
}

0
---------------------------------
39976.sol
function FUN1() {
VAR1 = VAR2.VAR3;
VAR4[VAR1] = 10000000;
}

0
---------------------------------
40028.sol
function FUN1() constant internal returns(bool) {
return msg.sender != VAR1.VAR2;
}
function FUN2(uint VAR3) internal returns(bool) {
return address(VAR4) != 0 && VAR4.FUN3(VAR1.VAR2, VAR3);
}

0
---------------------------------
40076.sol
function FUN1() {
VAR1[VAR2.VAR3] = 100000;
}

0
---------------------------------
40151.sol
function FUN1() onlyExporter returns (bool){
if(VAR1==true && VAR2 == true){
VAR3= true;
VAR4 = VAR5;
uint VAR6 = VAR7 - VAR8;
if(VAR9.VAR10.FUN2(VAR6)){
VAR7 = VAR7 - VAR6;
return true;
}
else{
return false;
}
}
return false;
}

0
---------------------------------
40191.sol
function FUN1(string VAR1) {
FUN2(VAR1);
var VAR2 = FUN3();
if (FUN4(VAR2) > 0) throw;
FUN5();
VAR3[VAR2] = FUN6({
VAR4: VAR5.VAR4, VAR1: VAR1, sender: VAR6.VAR7 }
);
var VAR8 = VAR9.FUN7(VAR10, VAR2);
FUN8(VAR5.VAR4, VAR8);
}
function FUN3() internal returns (string) {
var VAR11 = VAR9.FUN9(VAR5.VAR12 - FUN10(""), 10);
var VAR13 = VAR9.FUN9(uint256(VAR6.VAR7), 2);
var VAR14 = VAR9.FUN7(VAR11, VAR13);
return VAR14;
}
}

0
---------------------------------
40204.sol
function FUN1() constant internal returns(bool) {
return msg.sender != VAR1.VAR2;
}
function FUN2(uint VAR3) internal returns(bool) {
if (VAR1.VAR4 > VAR5) {
return false;
}
return VAR6.FUN3(VAR1.VAR2, VAR3);
}

0
---------------------------------
40205.sol
function FUN1() constant internal returns(bool) {
return msg.sender != VAR1.VAR2;
}
function FUN2(uint VAR3) internal returns(bool) {
return VAR4.FUN3(VAR1.VAR2, VAR3);
}

0
---------------------------------
40448.sol
function FUN1() returns(uint) {
return FUN2(uint(FUN3(VAR1.VAR2))^uint(FUN3(VAR3))^uint(msg.sender)^uint(VAR4.VAR5));
}
function FUN4(uint VAR6) returns (bool) {
if (FUN1() == VAR6) {
if (!msg.sender.FUN5(this.VAR7)) throw;
FUN6(VAR6, msg.sender);
return true;
}
return false;
}
}

0
---------------------------------
40469.sol
function FUN1(uint VAR1) internal returns(bool) {
return VAR2.FUN2(VAR3.VAR4, VAR1);
}
function FUN3() FUN4("") returns(uint) {
uint VAR5 = msg.VAR6;
uint VAR7 = (VAR5 - msg.VAR6 + VAR8) * VAR3.VAR9;
if (VAR3.VAR9 > VAR10) {
return 0;
}
if (!FUN1(1)) {
return 0;
}
VAR8 = VAR5 - msg.VAR6;
return VAR8;
}
function FUN5(uint VAR11) internal returns(bool) {
if (VAR3.VAR9 > VAR10) {
return false;
}
uint VAR7 = (VAR11 - msg.VAR6 + VAR8) * VAR3.VAR9;
return FUN1(VAR7);
}

0
---------------------------------
40477.sol
function FUN1(uint256 VAR1) {
if(VAR2.VAR3!=VAR4) throw;
if(VAR5) VAR6-=VAR1;
else VAR7-=VAR1;
}
function FUN2(address VAR8) {
FUN3();
if(VAR9) {
if((VAR6>0)||(VAR7>0)) {
}
}
GridMember VAR10 = FUN4(VAR8);
if(VAR5==VAR10.FUN5()) return;
uint256 VAR11 = VAR10.FUN6(this);
uint256 VAR12=0;
if(VAR5) {
VAR12=VAR6;
}
else {
VAR12=VAR7;
}
if(VAR11<VAR12) {
VAR12=VAR11;
}
if(VAR13[this]<VAR12) VAR12=VAR13[this];
if((VAR10.FUN7()-VAR10.FUN8(VAR8))+VAR10.FUN9()<VAR12) VAR12=(VAR10.FUN7()-VAR10.FUN8(VAR8))+VAR10.FUN9();
if(VAR12>0) {
VAR13[this]-=VAR12;
VAR13[VAR8]+=VAR12;
Transfer(this,VAR8,VAR12);
if(VAR5) {
VAR6-=VAR12;
}
else {
VAR7-=VAR12;
}
VAR10.FUN1(VAR12);
}
}

0
---------------------------------
4107.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
426.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7);
VAR5;
}
modifier FUN7(){
address VAR8 = msg.sender;
require(VAR9[VAR8]);
VAR5;
}
modifier FUN8(uint256 VAR10){
address VAR8 = msg.sender;
if( VAR11 && ((FUN9() - VAR10) <= VAR12 )){
require( VAR13[VAR8] == true && (VAR14[VAR8] + VAR10) <= VAR15 );
VAR14[VAR8] = VAR16.FUN10(VAR14[VAR8], VAR10);
VAR5;
}
else {
VAR11 = false;
VAR5;
}
}
event FUN11( address indexed VAR17, uint256 VAR18, uint256 VAR19, address indexed VAR20 );
event FUN12( address indexed VAR17, uint256 VAR21, uint256 VAR22 );
event FUN13( address indexed VAR17, uint256 VAR23, uint256 VAR19 );
event FUN14( address indexed VAR17, uint256 VAR24 );
event Transfer( address indexed VAR25, address indexed VAR26, uint256 VAR27 );
string public VAR28 = "";
string public VAR29 = "";
uint8 constant public VAR30 = 18;
uint8 constant internal VAR31 = 10;
uint8 constant internal VAR32 = 20;
uint8 constant internal VAR33 = 0;
uint256 constant internal VAR34 = 0.000000001 VAR35;
uint256 constant internal VAR36 = 0.0000000001 VAR35;
uint256 constant internal VAR37 = 2**64;
address constant public VAR38 = 0x0000000000000000000000000000000000000000;
uint256 public VAR39;
uint256 public VAR40;
uint256 public VAR41 = 1000e18;
FUN15(address => bool) internal VAR13;
uint256 constant internal VAR15 = 0.01 VAR35;
uint256 constant internal VAR12 = 0.01 VAR35;
FUN15(address => uint256) internal VAR42;
FUN15(address => uint256) internal VAR43;
FUN15(address => VAR44) internal VAR45;
FUN15(address => uint256) internal VAR14;
uint256 internal VAR46 = 0;
uint256 internal VAR47;
FUN15(address => bool) public VAR9;
bool public VAR11 = false;
FUN15(address => bool) public VAR48;
function FUN16(address VAR49, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR49 != address(0));
require(VAR48[VAR49] == true);
require(transfer(VAR49, VAR2));
if (FUN17(VAR49)) {
AcceptsToken3D VAR50 = FUN18(VAR49);
require(VAR50.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
4311.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
4674.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
489.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
4913.sol
function FUN1(address VAR1, uint256 VAR2) internal {
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2);
VAR4 = VAR4.FUN2(VAR2);
}
}
contract CryptoMiningWar is VAR5 {
bool public VAR6 = false;
uint256 public VAR7 = 0;
uint256 public VAR8;
uint256 public VAR9 = 86400;
uint256 public VAR10 = 8 VAR11;
uint256 public VAR12 = 86400 * 7;
uint256 public VAR13 = 0;
uint256 VAR14 = 0.005 VAR15;
uint256 VAR16 = 10000;
uint256 VAR17 = 5000000;
uint256 VAR18 = 0;
FUN3(uint256 => VAR19) private VAR20;
uint256 private VAR21;
FUN3(address => VAR22) private VAR23;
uint256 private VAR24;
FUN3(uint256 => VAR25) private VAR26;
uint256 private VAR27;
FUN3(uint256 => VAR28) private VAR29;
FUN3(uint256 => VAR30) private VAR31;
uint256 private VAR32;
address[21] VAR33;
address public VAR34;
uint256 public VAR35;
address public VAR36;
struct VAR22 {
uint256 VAR7;
FUN3(uint256 => uint256) VAR37;
uint256 VAR38;
uint256 VAR39;
uint256 VAR40;
uint256 VAR41;
uint256 VAR42;
}
struct VAR19 {
uint256 VAR43;
uint256 VAR44;
uint256 VAR45;
}
struct VAR25 {
address VAR46;
uint256 VAR47;
uint256 VAR48;
uint256 VAR49;
uint256 VAR50;
}
struct VAR28 {
address VAR46;
string VAR51;
string VAR52;
uint256 VAR53;
uint256 VAR2;
}
struct VAR30 {
address VAR46;
string VAR51;
string VAR52;
uint256 VAR53;
uint256 VAR2;
}
event FUN4( uint VAR54, uint VAR55 );
modifier FUN5() {
require(VAR56 <= VAR8);
VAR57;
}
modifier FUN6() {
require(VAR58.VAR59 == msg.sender);
VAR57;
}
modifier FUN7() {
require(VAR23[msg.sender].VAR7 == VAR7);
VAR57;
}
modifier FUN8() {
PlayerData storage VAR60 = VAR23[msg.sender];
if(VAR60.VAR38 <= VAR17){
VAR57;
}
else{
uint256 VAR61 = 0;
if(VAR33[9] != 0){
PlayerData storage VAR62 = VAR23[VAR33[9]];
VAR61 = VAR63.FUN9(VAR62.VAR38, 5);
}
require(VAR60.VAR38 <= VAR61);
VAR57;
}
}
constructor() public {
VAR36 = msg.sender;
VAR21 = 8;
VAR24 = 5;
VAR27 = 5;
VAR32 = 21;
VAR20[0] = FUN10(10, 10, 10);
VAR20[1] = FUN10(100, 200, 2);
VAR20[2] = FUN10(400, 800, 4);
VAR20[3] = FUN10(1600, 3200, 8);
VAR20[4] = FUN10(6400, 9600, 16);
VAR20[5] = FUN10(25600, 38400, 32);
VAR20[6] = FUN10(204800, 204800, 64);
VAR20[7] = FUN10(1638400, 819200, 65536);
}
function FUN11() public VAR64 {
require(VAR56 > VAR8);
uint256 VAR65 = VAR63.FUN12(VAR63.FUN9(VAR13, 90), 100);
uint256 VAR66 = VAR63.FUN12(VAR63.FUN9(VAR13, 5), 100);
FUN1(VAR36, VAR66);
uint8[10] memory VAR67 = [30,20,10,8,7,5,5,5,5,5];
uint256 VAR68 = 0;
uint256 VAR69 = 0;
for(uint256 VAR70 = 0; VAR70 < 10; VAR70++){
if(VAR33[VAR70] != 0){
VAR69 = VAR63.FUN12(VAR63.FUN9(VAR65, VAR67[VAR70]),100);
FUN1(VAR33[VAR70], VAR69);
VAR68 = VAR63.FUN2(VAR68, VAR69);
}
}
VAR13 = VAR63.FUN2(VAR66, VAR63.FUN13(VAR65, VAR68));
FUN14();
}
function FUN11() public VAR64 {
require(VAR56 > VAR8);
uint256 VAR65 = VAR63.FUN12(VAR63.FUN9(VAR13, 90), 100);
uint256 VAR66 = VAR63.FUN12(VAR63.FUN9(VAR13, 5), 100);
FUN1(VAR36, VAR66);
uint8[10] memory VAR67 = [30,20,10,8,7,5,5,5,5,5];
uint256 VAR68 = 0;
uint256 VAR69 = 0;
for(uint256 VAR70 = 0; VAR70 < 10; VAR70++){
if(VAR33[VAR70] != 0){
VAR69 = VAR63.FUN12(VAR63.FUN9(VAR65, VAR67[VAR70]),100);
FUN1(VAR33[VAR70], VAR69);
VAR68 = VAR63.FUN2(VAR68, VAR69);
}
}
VAR13 = VAR63.FUN2(VAR66, VAR63.FUN13(VAR65, VAR68));
FUN14();
}
function FUN15() public isNotOver payable {
require(msg.value >= FUN16());
require(msg.sender != VAR34);
uint256 VAR71 = FUN17(VAR35);
FUN1(VAR34, VAR71);
VAR13 = VAR63.FUN2(VAR13, VAR63.FUN13(msg.value, VAR71));
VAR34 = msg.sender;
VAR35 = VAR63.FUN2(VAR35, 1);
}
function FUN18(uint256 VAR70) public isNotOver isCurrentRound payable {
require(VAR70 < VAR24);
BoostData storage VAR72 = VAR26[VAR70];
if(msg.value < FUN19(VAR70) || msg.sender == VAR72.VAR46){
revert();
}
address VAR73 = VAR72.VAR46;
uint256 VAR74 = FUN20(FUN19(VAR70));
FUN1(VAR34, VAR74);
uint256 VAR75 = 0;
if(VAR73 != 0){
VAR75 = VAR63.FUN12(VAR63.FUN9(FUN19(VAR70), 55), 100);
FUN1(VAR73, VAR75);
}
VAR13 = VAR63.FUN2(VAR13, VAR63.FUN13(msg.value, VAR63.FUN2(VAR74, VAR75)));
FUN21(msg.sender);
FUN21(VAR73);
uint256 VAR76 = FUN22(VAR72.VAR48, VAR72.VAR49, VAR72.VAR50);
VAR72.VAR48 = VAR63.FUN2(VAR76, 1);
VAR72.VAR49 = VAR56;
VAR72.VAR46 = msg.sender;
}
function FUN18(uint256 VAR70) public isNotOver isCurrentRound payable {
require(VAR70 < VAR24);
BoostData storage VAR72 = VAR26[VAR70];
if(msg.value < FUN19(VAR70) || msg.sender == VAR72.VAR46){
revert();
}
address VAR73 = VAR72.VAR46;
uint256 VAR74 = FUN20(FUN19(VAR70));
FUN1(VAR34, VAR74);
uint256 VAR75 = 0;
if(VAR73 != 0){
VAR75 = VAR63.FUN12(VAR63.FUN9(FUN19(VAR70), 55), 100);
FUN1(VAR73, VAR75);
}
VAR13 = VAR63.FUN2(VAR13, VAR63.FUN13(msg.value, VAR63.FUN2(VAR74, VAR75)));
FUN21(msg.sender);
FUN21(VAR73);
uint256 VAR76 = FUN22(VAR72.VAR48, VAR72.VAR49, VAR72.VAR50);
VAR72.VAR48 = VAR63.FUN2(VAR76, 1);
VAR72.VAR49 = VAR56;
VAR72.VAR46 = msg.sender;
}
function FUN23(uint256 VAR2, uint256 VAR53,string VAR51, string VAR52) public isNotOver isCurrentRound payable {
require(VAR53 >= 100000000000);
require(VAR2 >= 1000);
require(VAR63.FUN9(VAR2, VAR53) <= msg.value);
uint256 VAR77 = FUN24();
BuyOrderData storage VAR78 = VAR29[VAR77];
if(VAR78.VAR2 > 10 && VAR53 <= VAR78.VAR53){
revert();
}
uint256 VAR65 = VAR63.FUN9(VAR78.VAR2, VAR78.VAR53);
if (VAR78.VAR46 != 0){
FUN1(VAR78.VAR46, VAR65);
}
VAR78.VAR46 = msg.sender;
VAR78.VAR53 = VAR53;
VAR78.VAR51 = VAR51;
VAR78.VAR52 = VAR52;
VAR78.VAR2 = VAR2;
}
function FUN25(uint256 VAR2, uint256 VAR79) public isNotOver isCurrentRound VAR80 {
require(VAR79 < VAR27);
require(VAR2 > 0);
BuyOrderData storage VAR78 = VAR29[VAR79];
require(VAR78.VAR46 != msg.sender);
require(VAR2 <= VAR78.VAR2);
FUN21(msg.sender);
PlayerData storage VAR81 = VAR23[msg.sender];
PlayerData storage VAR82 = VAR23[VAR78.VAR46];
require(VAR81.VAR39 >= VAR63.FUN9(VAR2, VAR9));
uint256 VAR83 = VAR63.FUN9(VAR2, VAR78.VAR53);
uint256 VAR84 = FUN20(VAR83);
FUN1(VAR34, VAR84);
FUN1(VAR36, VAR84);
VAR13 = VAR63.FUN2(VAR13, VAR63.FUN12(VAR63.FUN9(VAR83, 40), 100));
VAR82.VAR39 = VAR63.FUN2(VAR82.VAR39, VAR63.FUN9(VAR2, VAR9));
VAR81.VAR39 = VAR63.FUN13(VAR81.VAR39, VAR63.FUN9(VAR2, VAR9));
VAR78.VAR2 = VAR63.FUN13(VAR78.VAR2, VAR2);
FUN1(msg.sender, VAR63.FUN12(VAR83, 2));
}
function FUN25(uint256 VAR2, uint256 VAR79) public isNotOver isCurrentRound VAR80 {
require(VAR79 < VAR27);
require(VAR2 > 0);
BuyOrderData storage VAR78 = VAR29[VAR79];
require(VAR78.VAR46 != msg.sender);
require(VAR2 <= VAR78.VAR2);
FUN21(msg.sender);
PlayerData storage VAR81 = VAR23[msg.sender];
PlayerData storage VAR82 = VAR23[VAR78.VAR46];
require(VAR81.VAR39 >= VAR63.FUN9(VAR2, VAR9));
uint256 VAR83 = VAR63.FUN9(VAR2, VAR78.VAR53);
uint256 VAR84 = FUN20(VAR83);
FUN1(VAR34, VAR84);
FUN1(VAR36, VAR84);
VAR13 = VAR63.FUN2(VAR13, VAR63.FUN12(VAR63.FUN9(VAR83, 40), 100));
VAR82.VAR39 = VAR63.FUN2(VAR82.VAR39, VAR63.FUN9(VAR2, VAR9));
VAR81.VAR39 = VAR63.FUN13(VAR81.VAR39, VAR63.FUN9(VAR2, VAR9));
VAR78.VAR2 = VAR63.FUN13(VAR78.VAR2, VAR2);
FUN1(msg.sender, VAR63.FUN12(VAR83, 2));
}
function FUN26(uint256 VAR79) public isNotOver VAR85 {
require(VAR79 < VAR27);
BuyOrderData storage VAR78 = VAR29[VAR79];
require(VAR78.VAR46 == msg.sender);
if(VAR78.VAR2 > 0){
uint256 VAR65 = VAR63.FUN9(VAR78.VAR2, VAR78.VAR53);
FUN1(VAR78.VAR46, VAR65);
}
VAR78.VAR53 = 0;
VAR78.VAR2 = 0;
VAR78.VAR51 = "";
VAR78.VAR52 = "";
VAR78.VAR46 = 0;
}
function FUN27(uint256 VAR2, uint256 VAR79) public isNotOver isCurrentRound payable {
require(VAR79 < VAR27);
require(VAR2 > 0);
SellOrderData storage VAR78 = VAR31[VAR79];
require(VAR78.VAR46 != msg.sender);
require(VAR2 <= VAR78.VAR2);
uint256 VAR83 = VAR63.FUN9(VAR2, VAR78.VAR53);
require(msg.value >= VAR83);
PlayerData storage VAR82 = VAR23[msg.sender];
uint256 VAR84 = FUN20(VAR83);
FUN1(VAR34, VAR84);
FUN1(VAR36, VAR84);
VAR13 = VAR63.FUN2(VAR13, VAR63.FUN12(VAR63.FUN9(VAR83, 40), 100));
VAR82.VAR39 = VAR63.FUN2(VAR82.VAR39, VAR63.FUN9(VAR2, VAR9));
VAR78.VAR2 = VAR63.FUN13(VAR78.VAR2, VAR2);
FUN1(VAR78.VAR46, VAR63.FUN12(VAR83, 2));
}
function FUN27(uint256 VAR2, uint256 VAR79) public isNotOver isCurrentRound payable {
require(VAR79 < VAR27);
require(VAR2 > 0);
SellOrderData storage VAR78 = VAR31[VAR79];
require(VAR78.VAR46 != msg.sender);
require(VAR2 <= VAR78.VAR2);
uint256 VAR83 = VAR63.FUN9(VAR2, VAR78.VAR53);
require(msg.value >= VAR83);
PlayerData storage VAR82 = VAR23[msg.sender];
uint256 VAR84 = FUN20(VAR83);
FUN1(VAR34, VAR84);
FUN1(VAR36, VAR84);
VAR13 = VAR63.FUN2(VAR13, VAR63.FUN12(VAR63.FUN9(VAR83, 40), 100));
VAR82.VAR39 = VAR63.FUN2(VAR82.VAR39, VAR63.FUN9(VAR2, VAR9));
VAR78.VAR2 = VAR63.FUN13(VAR78.VAR2, VAR2);
FUN1(VAR78.VAR46, VAR63.FUN12(VAR83, 2));
}

0
---------------------------------
500.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
512.sol
function FUN1(uint256 VAR1) private pure returns(uint256) {
return((10).FUN2(VAR1));
}
}
contract VAR2 {
event FUN3 ( uint256 indexed VAR3, address indexed VAR4, bytes32 indexed VAR5, bool VAR6, uint256 VAR7, address VAR8, bytes32 VAR9, uint256 VAR10, uint256 VAR11 );
event FUN4 ( uint256 VAR12, uint256 VAR13, bytes32 VAR5, address VAR4, uint256 VAR14, uint256 VAR15, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21, uint256 VAR22, uint256 VAR23 );
event FUN5 ( uint256 indexed VAR3, address VAR4, bytes32 VAR5, uint256 VAR24, uint256 VAR11 );
event FUN6 ( address VAR4, bytes32 VAR5, uint256 VAR24, uint256 VAR12, uint256 VAR13, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21 );
event FUN7 ( address VAR4, bytes32 VAR5, uint256 VAR14, uint256 VAR12, uint256 VAR13, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21 );
event FUN8 ( address VAR4, bytes32 VAR5, uint256 VAR12, uint256 VAR13, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21 );
event FUN9 ( uint256 indexed VAR7, address VAR8, bytes32 VAR9, uint256 indexed VAR25, uint256 indexed VAR26, uint256 VAR27, uint256 VAR11 );
event FUN10 ( uint256 VAR25, uint256 VAR28 );
}
contract modularLong is VAR2 {
}
contract FoMo3Dlong is VAR29 {
using SafeMath for *;
using NameFilter for string;
using F3DKeysCalcLong for uint256;
PlayerBookInterface constant private VAR30 = FUN11(0x1a7bADBc3a718Aacd2723a73D01f34DAf5B69dAb);
address public VAR31 = 0x7a9f5d9f4BdCf4C2Aa93e929d823FCFBD1fa19D0;
string constant public VAR32 = "";
string constant public VAR33 = "";
uint256 private VAR34 = 15 VAR35;
uint256 private VAR36 = 1 VAR37;
uint256 constant private VAR38 = 1 VAR37;
uint256 constant private VAR39 = 30 VAR35;
uint256 constant private VAR40 = 24 VAR37;
uint256 public VAR41;
uint256 public VAR42 = 0;
uint256 public VAR43;
FUN12 (address => uint256) public VAR44;
FUN12 (bytes32 => uint256) public VAR45;
FUN12 (uint256 => VAR46.VAR47) public VAR48;
FUN12 (uint256 => FUN12 (uint256 => VAR46.VAR49)) public VAR50;
FUN12 (uint256 => FUN12 (bytes32 => bool)) public VAR51;
FUN12 (uint256 => VAR46.VAR52) public VAR53;
FUN12 (uint256 => FUN12(uint256 => uint256)) public VAR54;
FUN12 (uint256 => VAR46.VAR55) public VAR56;
FUN12 (uint256 => VAR46.VAR57) public VAR58;
constructor() public {
VAR56[0] = VAR46.FUN13(60,0);
VAR56[1] = VAR46.FUN13(60,0);
VAR56[2] = VAR46.FUN13(60,0);
VAR56[3] = VAR46.FUN13(60,0);
VAR58[0] = VAR46.FUN14(10,0);
VAR58[1] = VAR46.FUN14(10,0);
VAR58[2] = VAR46.FUN14(10,0);
VAR58[3] = VAR46.FUN14(10,0);
}
modifier FUN15() {
require(VAR59 == true, "");
VAR60;
}
modifier FUN16() {
address VAR61 = msg.sender;
require (VAR61 == VAR62.VAR63);
uint256 VAR64;
VAR65 {
VAR64 := FUN17(VAR61)}
require(VAR64 == 0, "");
VAR60;
}
modifier FUN18(uint256 VAR66) {
require(VAR66 >= 1000000000, "");
require(VAR66 <= 100000000000000000000000, "");
VAR60;
}
modifier FUN19() {
require( msg.sender == 0x00904cF2F74Aba6Df6A60E089CDF9b7b155BAf6c || msg.sender == 0x00b0Beac53077938634A63306b2c801169b18464, "" );
VAR60;
}
function FUN20(uint256 VAR67, uint256 VAR68, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
require(VAR68 < (VAR70 / VAR69));
if (VAR68 > 0) VAR68 = VAR68.FUN21(VAR69);
return((VAR67.FUN22((VAR67 / VAR69).FUN21(VAR69))).FUN23(VAR68).FUN23((VAR67 / VAR70).FUN21(VAR70)));
}
function FUN20(uint256 VAR67, uint256 VAR68, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
require(VAR68 < (VAR70 / VAR69));
if (VAR68 > 0) VAR68 = VAR68.FUN21(VAR69);
return((VAR67.FUN22((VAR67 / VAR69).FUN21(VAR69))).FUN23(VAR68).FUN23((VAR67 / VAR70).FUN21(VAR70)));
}
function FUN24(uint256 VAR71, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
return((((VAR71 / VAR69).FUN21(VAR69)).FUN22((VAR71 / VAR70).FUN21(VAR70))) / VAR69);
}
function FUN24(uint256 VAR71, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
return((((VAR71 / VAR69).FUN21(VAR69)).FUN22((VAR71 / VAR70).FUN21(VAR70))) / VAR69);
}

0
---------------------------------
514.sol
function FUN1(uint256 VAR1) private pure returns(uint256) {
return((10).FUN2(VAR1));
}
}
contract VAR2 {
event FUN3 ( uint256 indexed VAR3, address indexed VAR4, bytes32 indexed VAR5, bool VAR6, uint256 VAR7, address VAR8, bytes32 VAR9, uint256 VAR10, uint256 VAR11 );
event FUN4 ( uint256 VAR12, uint256 VAR13, bytes32 VAR5, address VAR4, uint256 VAR14, uint256 VAR15, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21, uint256 VAR22, uint256 VAR23 );
event FUN5 ( uint256 indexed VAR3, address VAR4, bytes32 VAR5, uint256 VAR24, uint256 VAR11 );
event FUN6 ( address VAR4, bytes32 VAR5, uint256 VAR24, uint256 VAR12, uint256 VAR13, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21 );
event FUN7 ( address VAR4, bytes32 VAR5, uint256 VAR14, uint256 VAR12, uint256 VAR13, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21 );
event FUN8 ( address VAR4, bytes32 VAR5, uint256 VAR12, uint256 VAR13, address VAR16, bytes32 VAR17, uint256 VAR18, uint256 VAR19, uint256 VAR20, uint256 VAR21 );
event FUN9 ( uint256 indexed VAR7, address VAR8, bytes32 VAR9, uint256 indexed VAR25, uint256 indexed VAR26, uint256 VAR27, uint256 VAR11 );
event FUN10 ( uint256 VAR25, uint256 VAR28 );
}
contract modularLong is VAR2 {
}
contract FoMo3Dlong is VAR29 {
using SafeMath for *;
using NameFilter for string;
using F3DKeysCalcLong for uint256;
PlayerBookInterface constant private VAR30 = FUN11(0x1e09aF1634Aab1522eDBF84AA668028Ac373bF79);
address public VAR31 = 0x7a9f5d9f4BdCf4C2Aa93e929d823FCFBD1fa19D0;
string constant public VAR32 = "";
string constant public VAR33 = "";
uint256 private VAR34 = 15 VAR35;
uint256 private VAR36 = 1 VAR37;
uint256 constant private VAR38 = 1 VAR37;
uint256 constant private VAR39 = 30 VAR35;
uint256 constant private VAR40 = 24 VAR37;
uint256 public VAR41;
uint256 public VAR42 = 0;
uint256 public VAR43;
FUN12 (address => uint256) public VAR44;
FUN12 (bytes32 => uint256) public VAR45;
FUN12 (uint256 => VAR46.VAR47) public VAR48;
FUN12 (uint256 => FUN12 (uint256 => VAR46.VAR49)) public VAR50;
FUN12 (uint256 => FUN12 (bytes32 => bool)) public VAR51;
FUN12 (uint256 => VAR46.VAR52) public VAR53;
FUN12 (uint256 => FUN12(uint256 => uint256)) public VAR54;
FUN12 (uint256 => VAR46.VAR55) public VAR56;
FUN12 (uint256 => VAR46.VAR57) public VAR58;
constructor() public {
VAR56[0] = VAR46.FUN13(60,0);
VAR56[1] = VAR46.FUN13(60,0);
VAR56[2] = VAR46.FUN13(60,0);
VAR56[3] = VAR46.FUN13(60,0);
VAR58[0] = VAR46.FUN14(10,0);
VAR58[1] = VAR46.FUN14(10,0);
VAR58[2] = VAR46.FUN14(10,0);
VAR58[3] = VAR46.FUN14(10,0);
}
modifier FUN15() {
require(VAR59 == true, "");
VAR60;
}
modifier FUN16() {
address VAR61 = msg.sender;
require (VAR61 == VAR62.VAR63);
uint256 VAR64;
VAR65 {
VAR64 := FUN17(VAR61)}
require(VAR64 == 0, "");
VAR60;
}
modifier FUN18(uint256 VAR66) {
require(VAR66 >= 1000000000, "");
require(VAR66 <= 100000000000000000000000, "");
VAR60;
}
modifier FUN19() {
require( msg.sender == 0x00904cF2F74Aba6Df6A60E089CDF9b7b155BAf6c || msg.sender == 0x00b0Beac53077938634A63306b2c801169b18464, "" );
VAR60;
}
function FUN20(uint256 VAR67, uint256 VAR68, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
require(VAR68 < (VAR70 / VAR69));
if (VAR68 > 0) VAR68 = VAR68.FUN21(VAR69);
return((VAR67.FUN22((VAR67 / VAR69).FUN21(VAR69))).FUN23(VAR68).FUN23((VAR67 / VAR70).FUN21(VAR70)));
}
function FUN20(uint256 VAR67, uint256 VAR68, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
require(VAR68 < (VAR70 / VAR69));
if (VAR68 > 0) VAR68 = VAR68.FUN21(VAR69);
return((VAR67.FUN22((VAR67 / VAR69).FUN21(VAR69))).FUN23(VAR68).FUN23((VAR67 / VAR70).FUN21(VAR70)));
}
function FUN24(uint256 VAR71, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
return((((VAR71 / VAR69).FUN21(VAR69)).FUN22((VAR71 / VAR70).FUN21(VAR70))) / VAR69);
}
function FUN24(uint256 VAR71, uint256 VAR69, uint256 VAR70) internal pure returns(uint256) {
require(VAR70 < 77 && VAR69 < 77, "");
require(VAR70 >= VAR69, "");
VAR70 = FUN1(VAR70).FUN21(10);
VAR69 = FUN1(VAR69);
return((((VAR71 / VAR69).FUN21(VAR69)).FUN22((VAR71 / VAR70).FUN21(VAR70))) / VAR69);
}

0
---------------------------------
5147.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
517.sol
function() public payable {
require(VAR1 == 0, '');
require(VAR2.VAR3 == msg.sender, '');
require(msg.value >= VAR4, '');
VAR5.FUN1(msg.sender);
emit FUN2(msg.sender);
VAR6.transfer(msg.value);
}

0
---------------------------------
518.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
521.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
constructor() FUN1() public {
VAR4 = msg.sender;
}
address VAR4 = address(0x906da89d06c658d72bdcd20724198b70242807c4);
address VAR5 = address(0xFa5dbDd6a013BF519622a6337A4b130cfc9068Fb);
address VAR6 = address(0x74b154852b92717c55667d5890d36417f4E7feC3);
address VAR7 = address(0x7fce1b6b1b99ba787c940bea56a322cb73eca68c);

0
---------------------------------
5214.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN2( address indexed VAR4, uint256 VAR5, uint256 VAR6, address indexed VAR7 );
event FUN3( address indexed VAR4, uint256 VAR8, uint256 VAR9 );
event FUN4( address indexed VAR4, uint256 VAR10, uint256 VAR6 );
event FUN5( address indexed VAR4, uint256 VAR11 );
event Transfer( address indexed VAR12, address indexed VAR13, uint256 VAR14 );
string public VAR15 = "";
string public VAR16 = "";
uint8 constant public VAR17 = 18;
uint8 constant internal VAR18 = 20;
uint8 constant internal VAR19 = 5;
uint256 constant internal VAR20 = 0.000000000001 VAR21;
uint256 constant internal VAR22 = 0.000000001 VAR21;
uint256 constant internal VAR23 = 2**64;
address constant public VAR24 = 0xE40FFEA88309174321ef230e10bfcCC7c2687f76;
uint256 public VAR25;
uint256 public VAR26;
uint256 public VAR27 = 1e18;
FUN6(address => uint256) internal VAR28;
FUN6(address => uint256) internal VAR29;
FUN6(address => VAR30) internal VAR31;
FUN6(address => uint256) internal VAR32;
uint256 internal VAR33 = 0;
uint256 internal VAR34;

0
---------------------------------
5297.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
552.sol
modifier FUN1() {
address VAR1 = msg.sender;
uint256 VAR2;
VAR3 {
VAR2 := FUN2(VAR1)}
require(VAR2 == 0);
require(VAR1 == VAR4.VAR5);
VAR6;
}

0
---------------------------------
5644.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
5681.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
578.sol
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}
function FUN1( uint256 VAR1, uint256 VAR2, uint256 VAR3, address VAR4, uint256 value, bytes VAR5, DelegateMode VAR6, uint8 VAR7, bytes32 VAR8, bytes32 VAR9 ) public liquid canDelegate returns (bool) {
require(VAR4 != address(this));
address VAR10;
address VAR11;
if (VAR6 == VAR12.VAR13) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR15) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, address(0))), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else if (VAR6 == VAR12.VAR18) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, msg.sender)), VAR7, VAR8, VAR9 );
VAR11 = msg.sender;
}
else if (VAR6 == VAR12.VAR19) {
VAR10 = FUN2( FUN3(VAR14.FUN4(this, VAR1, VAR2, VAR3, VAR4, value, VAR5, VAR6, VAR16.VAR17)), VAR7, VAR8, VAR9 );
VAR11 = VAR16.VAR17;
}
else {
revert();
}
Account storage VAR20 = VAR21[VAR10];
require(VAR1 == VAR20.VAR1);
emit FUN5(VAR10, VAR20.VAR1 += 1);
VAR20.VAR22 = VAR20.VAR22.FUN6(value.FUN7(VAR2));
VAR21[VAR4].VAR22 += value;
if (VAR2 != 0) {
VAR21[VAR11].VAR22 += VAR2;
emit Transfer(VAR10, VAR11, VAR2);
}
if (!VAR4.FUN8() && VAR5.VAR23 >= 68) {
VAR24 {
FUN9(FUN7(VAR5, 36), value) FUN9(FUN7(VAR5, 68), VAR10) }
if (VAR4.call.FUN10(VAR3)(VAR5)) {
emit Transfer(VAR10, VAR4, value);
}
else {
VAR20.VAR22 += value;
VAR21[VAR4].VAR22 -= value;
}
}
else {
emit Transfer(VAR10, VAR4, value);
}
return true;
}

0
---------------------------------
5856.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
588.sol
function FUN1(string VAR1) public payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR5.FUN3(VAR1))) {
if(msg.value >= 0.4 VAR6) {
msg.sender.transfer(address(this).VAR7);
}
}
}

0
---------------------------------
5931.sol
function FUN1(uint256 VAR1) public payable {
require(msg.sender == VAR2.VAR3);
require(FUN2(VAR1));
Artwork storage VAR4 = VAR5[VAR1];
require(msg.sender != VAR4.VAR6);
uint256 VAR7;
uint256[3] memory VAR8;
( , , , VAR8, VAR7, , ) = FUN3(VAR1);
uint256 VAR9 = VAR8[1];
require(msg.value >= VAR9);
uint256 VAR10 = msg.value - VAR9;
if (VAR10 > 0) msg.sender.transfer(VAR10);
for (uint256 VAR11 = 0; VAR11 < VAR4.VAR12.VAR13; VAR11++) {
address VAR14 = VAR4.VAR12[VAR11];
if (VAR14 != address(this)) {
VAR14.transfer((VAR9 * VAR4.VAR15[VAR14]) / VAR7);
}
}
if (!VAR4.VAR16[msg.sender]) {
VAR4.VAR16[msg.sender] = true;
VAR4.VAR12.FUN4(msg.sender);
}
VAR4.VAR17++;
VAR4.VAR15[msg.sender] += VAR4.VAR17;
VAR4.VAR15[VAR4.VAR6] = VAR4.VAR17 + 1;
FUN5(VAR1, VAR4.VAR18, msg.sender, VAR4.VAR17);
}

0
---------------------------------
5954.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
5965.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN2 ( uint256 VAR4, address VAR5 );
BIT VAR6;
address VAR7;
bool VAR8 = false;
uint256 VAR9;
constructor() public {
VAR6 = FUN3(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E);
VAR8 = false;
VAR7 = msg.sender;
}

0
---------------------------------
6053.sol
function FUN1(address VAR1) public payable {
uint256 VAR2 = msg.value;
FUN2(VAR1, VAR2);
uint256 VAR3 = FUN3(VAR2);
VAR4 = VAR4.FUN4(VAR2);
FUN5(VAR1, VAR3);
emit FUN6(VAR5.VAR6, VAR1, VAR2, VAR3);
FUN7(VAR1, VAR2);
FUN8();
FUN9(VAR1, VAR2);
}

0
---------------------------------
6054.sol
function FUN1(address VAR1) public payable {
uint256 VAR2 = msg.value;
FUN2(VAR1, VAR2);
uint256 VAR3 = FUN3(VAR2);
VAR4 = VAR4.FUN4(VAR2);
FUN5(VAR1, VAR3);
emit FUN6(VAR5.VAR6, VAR1, VAR2, VAR3);
FUN7(VAR1, VAR2);
FUN8();
FUN9(VAR1, VAR2);
}
function FUN8() internal {
VAR7.VAR8.value(msg.value)(VAR5.VAR6);
}
}
library VAR9 {
struct VAR10 {
FUN10 (address => bool) VAR11;
}

0
---------------------------------
6059.sol
function FUN1(address VAR1) public payable {
uint256 VAR2 = msg.value;
FUN2(VAR1, VAR2);
uint256 VAR3 = FUN3(VAR2);
VAR4 = VAR4.FUN4(VAR2);
FUN5(VAR1, VAR3);
emit FUN6(VAR5.VAR6, VAR1, VAR2, VAR3);
FUN7(VAR1, VAR2);
FUN8();
FUN9(VAR1, VAR2);
}

0
---------------------------------
6200.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
6219.sol
function FUN1 (uint256 VAR1, uint256 VAR2) public payable VAR3 {
require(msg.sender == VAR4.VAR5);
require(FUN2(msg.sender, VAR6, VAR2));
require(!VAR7[VAR2].VAR8);
(uint256 VAR9, bool VAR10) = FUN3(VAR11[VAR1].VAR12);
require(FUN4(VAR11[VAR1].VAR12));
VAR13--;
VAR14++;
VAR11[VAR1].VAR15 = FUN5(msg.sender, VAR2);
address VAR16 = address(VAR11[VAR1].VAR17 & VAR18);
uint256 VAR19 = FUN6(VAR1);
address VAR20 = (VAR19 == 1) ? VAR16 : msg.sender;
FUN7(VAR20, VAR11[VAR1].VAR17, VAR10);
FUN7(VAR20, VAR11[VAR1].VAR15, VAR10);
uint256 VAR21 = VAR9.FUN8(2).FUN8(VAR22) / 100;
uint256 VAR23 = VAR9.FUN8(2).FUN9(VAR21);
FUN10(VAR1, VAR19);
emit FUN11(VAR1, VAR20);
FUN12(msg.sender, msg.value.FUN9(VAR9));
FUN12(VAR24, VAR21);
FUN12(VAR20, VAR23);
}

0
---------------------------------
6221.sol
function FUN1(bytes VAR1) external payable FUN2(VAR1) {
if(VAR2 == FUN3(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) {
msg.sender.transfer(this.VAR7);
}
}
function FUN4(bytes VAR1) external payable FUN2(VAR1) {
VAR8 = true;
}
modifier FUN2(bytes VAR1) {
if(VAR2 == FUN3(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) VAR9;
}
bytes32 public VAR2;
uint public VAR4;
bool public VAR8 = false;

0
---------------------------------
6269.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
628.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
629.sol
function FUN1(uint256 VAR1, bytes32 VAR2) external;
}
contract VAR3 {
using NameFilter for string;
using SafeMath for uint256;
address public VAR4;
address public VAR5;
uint256 public VAR6 = 10 VAR7;
FUN2(uint256 => VAR8) public VAR9;
FUN2(address => bytes32) public VAR10;
FUN2(address => uint256) public VAR11;
uint256 public VAR12;
uint256 public VAR13;
FUN2 (address => uint256) public VAR14;
FUN2 (bytes32 => uint256) public VAR15;
FUN2 (uint256 => VAR16) public VAR17;
FUN2 (uint256 => FUN2 (bytes32 => bool)) public VAR18;
FUN2 (uint256 => FUN2 (uint256 => bytes32)) public VAR19;
struct VAR16 {
address VAR20;
bytes32 VAR21;
uint256 VAR22;
uint256 VAR23;
}
constructor() public {
VAR4 = msg.sender;
VAR5 = msg.sender;
VAR13 = 0;
}
modifier FUN3() {
address VAR24 = msg.sender;
require (VAR24 == VAR25.VAR26);
uint256 VAR27;
VAR28 {
VAR27 := FUN4(VAR24)}
require(VAR27 == 0, "");
VAR29;
}
modifier FUN5() {
require(VAR11[msg.sender] != 0);
VAR29;
}
event FUN6 ( uint256 indexed VAR30, address indexed VAR31, bytes32 indexed VAR32, bool VAR33, uint256 VAR34, address VAR35, bytes32 VAR36, uint256 VAR37, uint256 VAR38 );
function FUN7(uint256 VAR39) FUN3() public {
require(VAR39 <= VAR12, "");
address VAR24 = msg.sender;
uint256 VAR1 = VAR14[VAR24];
require(VAR1 != 0, "");
uint256 VAR40 = VAR17[VAR1].VAR23;
VAR9[VAR39].FUN8(VAR1, VAR24, VAR17[VAR1].VAR21, VAR17[VAR1].VAR22);
if (VAR40 > 1) for (uint256 VAR41 = 1;
VAR41 <= VAR40;
VAR41++) VAR9[VAR39].FUN1(VAR1, VAR19[VAR1][VAR41]);
}
function FUN9() FUN3() public {
address VAR24 = msg.sender;
uint256 VAR1 = VAR14[VAR24];
require(VAR1 != 0, "");
uint256 VAR42 = VAR17[VAR1].VAR22;
uint256 VAR40 = VAR17[VAR1].VAR23;
bytes32 VAR2 = VAR17[VAR1].VAR21;
for (uint256 VAR43 = 1; VAR43 <= VAR12; VAR43++) {
VAR9[VAR43].FUN8(VAR1, VAR24, VAR2, VAR42);
if (VAR40 > 1) for (uint256 VAR41 = 1;
VAR41 <= VAR40;
VAR41++) VAR9[VAR43].FUN1(VAR1, VAR19[VAR1][VAR41]);
}
}

0
---------------------------------
6314.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN2 ( uint256 VAR4, address VAR5 );
event FUN3 ( address VAR6 );
BIT VAR7;
address VAR8;
bool VAR9 = false;
FUN4(address => uint256) VAR10;
constructor() public {
VAR7 = FUN5(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E);
VAR9 = false;
VAR8 = msg.sender;
}

0
---------------------------------
6325.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN2 ( uint256 VAR4, address VAR5 );
event FUN3 ( address VAR6 );
BIT VAR7;
address VAR8;
bool VAR9 = false;
FUN4(address => uint256) VAR10;
constructor() public {
VAR7 = FUN5(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E);
VAR9 = false;
VAR8 = msg.sender;
}

0
---------------------------------
652.sol
function FUN1( bytes VAR1, bytes VAR2 ) external onlyLighthouse returns (RobotLiability VAR3) {
uint256 VAR4 = FUN2();
VAR3 = VAR5 FUN3(VAR6);
emit FUN4(VAR3);
require(VAR3.call(VAR7.FUN5(bytes4(0x82fbaa25), VAR1)));
FUN6(VAR3.FUN7());
require(VAR3.call(VAR7.FUN5(bytes4(0x66193359), VAR2)));
FUN6(VAR3.FUN8());
require(VAR8.FUN9(VAR3.FUN10(), VAR9.VAR10, VAR3.FUN11()));
ERC20 VAR11 = VAR3.FUN12();
require(VAR11.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN14()));
if (address(VAR3.FUN15()) != 0 && VAR3.FUN16() > 0) require(VAR8.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN16()));
uint256 VAR12 = VAR4 - FUN2() + 110525;
VAR13 += VAR12;
VAR14[VAR3] += VAR12;
}
function FUN17( uint256 VAR15 ) external returns (bool) {
require(VAR14[msg.sender] > 0);
uint256 VAR12 = VAR15 - FUN2();
VAR13 += VAR12;
VAR14[msg.sender] += VAR12;
require(VAR8.FUN18(VAR9.VAR10, FUN19(VAR14[msg.sender])));
return true;
}
}

0
---------------------------------
6664.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
7155.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
7258.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
7307.sol
modifier FUN1() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN2( uint256 VAR4, address VAR5 );
event FUN3( address VAR6 );
BIT VAR7;
address VAR8;
bool VAR9 = false;
FUN4(address => uint256) VAR10;
constructor() public {
VAR7 = FUN5(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E);
VAR9 = false;
VAR8 = msg.sender;
}

0
---------------------------------
742.sol
function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
require(VAR1 != address(0));
require(VAR2 <= VAR3[VAR4.VAR5]);
VAR3[VAR4.VAR5] = VAR3[VAR4.VAR5].FUN2(VAR2);
VAR3[VAR1] = VAR3[VAR1].FUN3(VAR2);
emit Transfer(VAR4.VAR5, VAR1, VAR2);
return true;
}
}
function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
require(VAR1 != address(0));
require(VAR2 <= VAR3[VAR4.VAR5]);
VAR3[VAR4.VAR5] = VAR3[VAR4.VAR5].FUN2(VAR2);
VAR3[VAR1] = VAR3[VAR1].FUN3(VAR2);
emit Transfer(VAR4.VAR5, VAR1, VAR2);
return true;
}
}
function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
require(VAR1 != address(0));
require(VAR2 <= VAR3[VAR4.VAR5]);
VAR3[VAR4.VAR5] = VAR3[VAR4.VAR5].FUN2(VAR2);
VAR3[VAR1] = VAR3[VAR1].FUN3(VAR2);
emit Transfer(VAR4.VAR5, VAR1, VAR2);
return true;
}
}

0
---------------------------------
753.sol
function FUN1( bytes VAR1, bytes VAR2 ) external onlyLighthouse returns (RobotLiability VAR3) {
uint256 VAR4 = FUN2();
VAR3 = VAR5 FUN3(VAR6);
emit FUN4(VAR3);
require(VAR3.call(VAR7.FUN5(bytes4(0x82fbaa25), VAR1)));
FUN6(VAR3.FUN7());
require(VAR3.call(VAR7.FUN5(bytes4(0x66193359), VAR2)));
FUN6(VAR3.FUN8());
require(VAR8.FUN9(VAR3.FUN10(), VAR9.VAR10, VAR3.FUN11()));
ERC20 VAR11 = VAR3.FUN12();
require(VAR11.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN14()));
if (address(VAR3.FUN15()) != 0 && VAR3.FUN16() > 0) require(VAR8.FUN9(VAR3.FUN13(), VAR3, VAR3.FUN16()));
uint256 VAR12 = VAR4 - FUN2() + 110525;
VAR13 += VAR12;
VAR14[VAR3] += VAR12;
}
function FUN17( uint256 VAR15 ) external returns (bool) {
require(VAR14[msg.sender] > 0);
uint256 VAR12 = VAR15 - FUN2();
VAR13 += VAR12;
VAR14[msg.sender] += VAR12;
require(VAR8.FUN18(VAR9.VAR10, FUN19(VAR14[msg.sender])));
return true;
}
}

0
---------------------------------
7546.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
7603.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) external returns (bool);
}
contract VAR4 {
modifier FUN2() {
require(FUN3() > 0);
VAR5;
}
modifier FUN4() {
require(FUN5(true) > 0);
VAR5;
}
modifier FUN6() {
require (msg.sender == VAR6.VAR7);
VAR5;
}
modifier FUN7(){
address VAR8 = msg.sender;
require(VAR9[VAR8]);
VAR5;
}
modifier FUN8(uint256 VAR10){
address VAR8 = msg.sender;
if( VAR11 && ((FUN9() - VAR10) <= VAR12 )){
require( VAR13[VAR8] == true && (VAR14[VAR8] + VAR10) <= VAR15 );
VAR14[VAR8] = VAR16.FUN10(VAR14[VAR8], VAR10);
VAR5;
}
else {
VAR11 = false;
VAR5;
}
}
event FUN11( address indexed VAR17, uint256 VAR18, uint256 VAR19, address indexed VAR20 );
event FUN12( address indexed VAR17, uint256 VAR21, uint256 VAR22 );
event FUN13( address indexed VAR17, uint256 VAR23, uint256 VAR19 );
event FUN14( address indexed VAR17, uint256 VAR24 );
event Transfer( address indexed VAR25, address indexed VAR26, uint256 VAR27 );
string public VAR28 = "";
string public VAR29 = "";
uint8 constant public VAR30 = 18;
uint8 constant internal VAR31 = 20;
uint8 constant internal VAR32 = 2;
uint256 constant internal VAR33 = 0.00000001 VAR34;
uint256 constant internal VAR35 = 0.000000001 VAR34;
uint256 constant internal VAR36 = 2**64;
address constant public VAR37 = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc;
uint256 public VAR38;
uint256 public VAR39;
uint256 public VAR40 = 10e18;
FUN15(address => bool) internal VAR13;
uint256 constant internal VAR15 = 0.4 VAR34;
uint256 constant internal VAR12 = 10 VAR34;
FUN15(address => uint256) internal VAR41;
FUN15(address => uint256) internal VAR42;
FUN15(address => VAR43) internal VAR44;
FUN15(address => uint256) internal VAR14;
uint256 internal VAR45 = 0;
uint256 internal VAR46;
FUN15(address => bool) public VAR9;
bool public VAR11 = false;
FUN15(address => bool) public VAR47;
function FUN16(address VAR48, uint256 VAR2, bytes VAR3) external returns (bool) {
require(VAR48 != address(0));
require(VAR47[VAR48] == true);
require(transfer(VAR48, VAR2));
if (FUN17(VAR48)) {
AcceptsProofofHumanity VAR49 = FUN18(VAR48);
require(VAR49.FUN1(msg.sender, VAR2, VAR3));
}
return true;
}

0
---------------------------------
7720.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
798.sol
function FUN1(string VAR1) public payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR5.FUN3(VAR1))) {
if(msg.value > 0.2 VAR6) {
msg.sender.transfer(address(this).VAR7);
}
}
}

0
---------------------------------
8097.sol
function FUN1() {
VAR1 = "";
VAR2 = "";
VAR3 = 18;
VAR4 = 100000000000000000000000;
VAR5[msg.sender]=VAR4;
VAR6[this]=true;
}
address public VAR7 = msg.sender;
uint256 public VAR8 = 1;
modifier onlyHuman() {
if(msg.sender!=VAR9.VAR10)throw;
VAR11;
}
modifier onlyOwner() {
if(msg.sender!=VAR7)throw;
VAR11;
}

0
---------------------------------
84.sol
modifier FUN1() {
require(msg.sender == VAR1.VAR2, "");
VAR3;
}

0
---------------------------------
8453.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
8485.sol
function FUN1(uint256 VAR1, uint256 VAR2) internal pure returns (uint256) {
return VAR1 < VAR2 ? VAR1 : VAR2;
}
}
contract VAR3 {
bool public VAR4 = false;
uint256 public VAR5 = 0;
uint256 public VAR6;
uint256 public VAR7 = 86400;
uint256 public VAR8 = 8 VAR9;
uint256 public VAR10 = 86400 * 7;
uint256 VAR11 = 0.005 VAR12;
uint256 VAR13 = 10000;
uint256 VAR14 = 5000000;
FUN2(uint256 => VAR15) private VAR16;
uint256 private VAR17;
FUN2(address => VAR18) private VAR19;
uint256 private VAR20;
FUN2(uint256 => VAR21) private VAR22;
uint256 private VAR23;
FUN2(uint256 => VAR24) private VAR25;
FUN2(uint256 => VAR26) private VAR27;
uint256 private VAR28;
address[21] VAR29;
address public VAR30;
uint256 public VAR31;
address public VAR32;
struct VAR18 {
uint256 VAR5;
FUN2(uint256 => uint256) VAR33;
uint256 VAR34;
uint256 VAR35;
uint256 VAR36;
uint256 VAR37;
}
struct VAR15 {
uint256 VAR38;
uint256 VAR39;
uint256 VAR40;
}
struct VAR21 {
address VAR41;
uint256 VAR42;
uint256 VAR43;
uint256 VAR44;
uint256 VAR45;
}
struct VAR24 {
address VAR41;
string VAR46;
string VAR47;
uint256 VAR48;
uint256 VAR49;
}
struct VAR26 {
address VAR41;
string VAR46;
string VAR47;
uint256 VAR48;
uint256 VAR49;
}
modifier FUN3() {
require(VAR50 <= VAR6);
require(VAR51.VAR52 == msg.sender);
VAR53;
}
modifier FUN4() {
require(VAR19[msg.sender].VAR5 == VAR5);
VAR53;
}
modifier FUN5() {
PlyerData storage VAR54 = VAR19[msg.sender];
if(VAR54.VAR34 <= VAR14){
VAR53;
}
else{
uint256 VAR55 = 0;
if(VAR29[9] != 0){
PlyerData storage VAR56 = VAR19[VAR29[9]];
VAR55 = VAR57.FUN6(VAR56.VAR34, 5);
}
require(VAR54.VAR34 <= VAR55);
VAR53;
}
}
function FUN7() public {
require(VAR50 > VAR6);
require(VAR51.VAR52 == msg.sender);
uint256 VAR58 = VAR57.FUN8(VAR57.FUN6(this.VAR58, 90), 100);
VAR32.FUN9(VAR57.FUN8(VAR57.FUN6(this.VAR58, 5), 100));
uint8[10] memory VAR59 = [30,20,10,8,7,5,5,5,5,5];
for(uint256 VAR60 = 0; VAR60 < 10; VAR60++){
if(VAR29[VAR60] != 0){
VAR29[VAR60].FUN9(VAR57.FUN8(VAR57.FUN6(VAR58,VAR59[VAR60]),100));
}
}
FUN10();
}
function FUN11(uint256[] VAR61) public isNotOver VAR62 {
require(VAR61.VAR63 == VAR17);
uint256 VAR64 = 0;
MinerData memory VAR65;
for (; VAR64 < VAR17; VAR64++) {
VAR65 = VAR16[VAR64];
if(VAR61[VAR64] > VAR65.VAR40 || VAR61[VAR64] < 0){
revert();
}
}
FUN12(msg.sender);
PlyerData storage VAR54 = VAR19[msg.sender];
uint256 VAR66 = 0;
uint256 VAR67 = 0;
for (VAR64 = 0; VAR64 < VAR17; VAR64++) {
VAR67 = VAR61[VAR64];
if (VAR67 > 0) {
VAR65 = VAR16[VAR64];
VAR66 = VAR57.FUN13(VAR66, VAR57.FUN6(VAR65.VAR38, VAR67));
}
}
VAR66 = VAR57.FUN6(VAR66, VAR7);
if(VAR54.VAR35 < VAR66){
revert();
}
for (VAR64 = 0; VAR64 < VAR17; VAR64++) {
VAR67 = VAR61[VAR64];
if (VAR67 > 0) {
VAR65 = VAR16[VAR64];
VAR54.VAR33[VAR64] = VAR57.FUN1(VAR65.VAR40, VAR57.FUN13(VAR54.VAR33[VAR64], VAR67));
}
}
VAR54.VAR35 = VAR57.FUN14(VAR54.VAR35, VAR66);
FUN15(msg.sender);
}
function FUN11(uint256[] VAR61) public isNotOver VAR62 {
require(VAR61.VAR63 == VAR17);
uint256 VAR64 = 0;
MinerData memory VAR65;
for (; VAR64 < VAR17; VAR64++) {
VAR65 = VAR16[VAR64];
if(VAR61[VAR64] > VAR65.VAR40 || VAR61[VAR64] < 0){
revert();
}
}
FUN12(msg.sender);
PlyerData storage VAR54 = VAR19[msg.sender];
uint256 VAR66 = 0;
uint256 VAR67 = 0;
for (VAR64 = 0; VAR64 < VAR17; VAR64++) {
VAR67 = VAR61[VAR64];
if (VAR67 > 0) {
VAR65 = VAR16[VAR64];
VAR66 = VAR57.FUN13(VAR66, VAR57.FUN6(VAR65.VAR38, VAR67));
}
}
VAR66 = VAR57.FUN6(VAR66, VAR7);
if(VAR54.VAR35 < VAR66){
revert();
}
for (VAR64 = 0; VAR64 < VAR17; VAR64++) {
VAR67 = VAR61[VAR64];
if (VAR67 > 0) {
VAR65 = VAR16[VAR64];
VAR54.VAR33[VAR64] = VAR57.FUN1(VAR65.VAR40, VAR57.FUN13(VAR54.VAR33[VAR64], VAR67));
}
}
VAR54.VAR35 = VAR57.FUN14(VAR54.VAR35, VAR66);
FUN15(msg.sender);
}

0
---------------------------------
8488.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
8502.sol
modifier onlyHuman() {
require (msg.sender == VAR1.VAR2);
VAR3;
}
event FUN1( uint256 VAR4, address VAR5 );
event FUN2( uint256 VAR4, address VAR6 );
POOH VAR7;
address VAR8;
bool VAR9 = false;
uint256 VAR10 = 0;
uint256 VAR11;
constructor() public {
VAR7 = FUN3(0x4C29d75cc423E8Adaa3839892feb66977e295829);
VAR9 = false;
VAR8 = msg.sender;
}

0
---------------------------------
858.sol
function FUN1 (uint VAR1,address VAR2) public payable{
require(msg.sender == VAR3.VAR4);
require(VAR5[VAR6].VAR7>VAR8);
emit FUN2(msg.sender, VAR1, msg.value.FUN3(1000000000000000000).FUN4(FUN5()), VAR6, VAR2);
if (VAR2 != address(0) && VAR2 != msg.sender){
if(VAR1 == 1){
VAR9[VAR6][msg.sender].VAR10 += msg.value.FUN3(1000000000000000000).FUN4(FUN5());
VAR9[VAR6][VAR2].VAR10 += msg.value.FUN3(10000000000000000).FUN4(FUN5());
VAR5[VAR6].VAR11 += msg.value;
VAR5[VAR6].VAR10 += (msg.value.FUN3(1000000000000000000).FUN4(FUN5())+msg.value.FUN3(10000000000000000).FUN4(FUN5()));
}
else if(VAR1 == 2){
VAR9[VAR6][msg.sender].VAR12 += msg.value.FUN3(1000000000000000000).FUN4(FUN5());
VAR9[VAR6][VAR2].VAR12 += msg.value.FUN3(10000000000000000).FUN4(FUN5());
VAR5[VAR6].VAR11 += msg.value;
VAR5[VAR6].VAR12 += (msg.value.FUN3(1000000000000000000).FUN4(FUN5())+msg.value.FUN3(10000000000000000).FUN4(FUN5()));
}
else{
revert();
}
}
else{
if(VAR1 == 1){
VAR9[VAR6][msg.sender].VAR10 += msg.value.FUN3(1000000000000000000).FUN4(FUN5());
VAR5[VAR6].VAR11 += msg.value;
VAR5[VAR6].VAR10 += msg.value.FUN3(1000000000000000000).FUN4(FUN5());
}
else if(VAR1 == 2){
VAR9[VAR6][msg.sender].VAR12 += msg.value.FUN3(1000000000000000000).FUN4(FUN5());
VAR5[VAR6].VAR11 += msg.value;
VAR5[VAR6].VAR12 += msg.value.FUN3(1000000000000000000).FUN4(FUN5());
}
else{
revert();
}
}
}

0
---------------------------------
8610.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
8691.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
8718.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
8892.sol
function FUN1(uint8 VAR1) payable public {
require(VAR2.VAR3 == msg.sender);
uint16 VAR4 = uint16(msg.value / VAR5[VAR1]);
uint16 VAR6 = VAR7;
if (VAR1 >= VAR5.VAR8 || msg.value < VAR5[VAR1] || VAR6 + VAR4 > VAR9) revert();
uint32 VAR10 = VAR11;
if (VAR1 < VAR12) {
if (VAR13 == 0 || VAR13 == VAR14) VAR13 = VAR10;
for (uint8 VAR15 = 0; VAR15 < VAR4; VAR15++) {
FUN2(VAR10 + VAR15, VAR6 + VAR15);
VAR16[VAR10 + VAR15] = FUN3(VAR1, VAR17[VAR1], msg.sender, FUN4(VAR18));
}
VAR19[VAR1] += VAR4;
VAR7 += VAR4;
}
else {
for (uint8 VAR20 = 0; VAR20 < VAR4; VAR20++) {
VAR16[VAR10 + VAR20] = FUN3(VAR1, VAR17[VAR1], msg.sender, FUN4(VAR18));
}
}
VAR11 = VAR10 + VAR4;
FUN5(msg.sender, VAR1, VAR4, VAR10);
}
function FUN6() public {
require(VAR2.VAR3 == msg.sender);
require(VAR18 >= VAR21 + VAR22);
require(VAR7>0);
VAR21 = VAR18;
uint128 VAR23;
uint128 value;
uint16 VAR24;
uint32 VAR25;
uint16 VAR6 = VAR7;
uint32 VAR26 = VAR6 * VAR27 / 100;
uint128 VAR28 = 80000 + 10000 * FUN7(VAR6);
if(VAR26 == 0) VAR26 = 1;
VAR29[] memory VAR30 = new VAR29[](VAR26);
for (uint8 VAR15 = 0; VAR15 < VAR26; VAR15++) {
VAR24 = uint16(FUN8(VAR21 + VAR15) % VAR6);
VAR25 = VAR31[VAR24];
VAR30[VAR15] = VAR25;
value = FUN9(VAR24, VAR6);
if (value > 0) {
VAR6--;
}
VAR23 += value;
}
uint128 VAR32 = uint128(VAR28 * VAR2.VAR33);
VAR7 = VAR6;
if (VAR23 > VAR32){
FUN10(VAR23 - VAR32);
FUN11(VAR30, VAR23 - VAR32, VAR32);
}
else FUN11(VAR30, 0, VAR32);
}
function FUN12(uint32 VAR34, uint16 VAR35) public {
require(VAR2.VAR3 == msg.sender);
if (VAR34 != VAR31[VAR35]) VAR35 = FUN13(VAR34);
Character storage VAR36 = VAR16[VAR34];
require(VAR37[VAR34] + VAR38 <= VAR18);
require(VAR36.VAR39 == msg.sender);
require(VAR36.VAR1 < 2*VAR12);
require(VAR36.VAR1 >= VAR12);
uint16 VAR40 = FUN14(VAR34);
assert(VAR40 < VAR9);
uint32 VAR41 = VAR31[VAR40];
Character storage VAR42 = VAR16[VAR41];
uint128 value;
uint16 VAR43;
uint16 VAR44 = uint16(FUN8(VAR34) % 100);
uint256 VAR45 = VAR46.FUN15(VAR36.VAR39) / 10**15 + VAR47.FUN15(VAR36.VAR39);
uint256 VAR48 = VAR46.FUN15(VAR42.VAR39) / 10**15 + VAR47.FUN15(VAR42.VAR39);
if (VAR36.value == VAR42.value) {
VAR43 = 50;
if (VAR45 > VAR48) {
VAR43 += uint16(100 / VAR49);
}
else if (VAR48 > VAR45) {
VAR43 -= uint16(100 / VAR49);
}
}
else if (VAR36.value > VAR42.value) {
VAR43 = 100;
if (VAR48 > VAR45) {
VAR43 -= uint16((100 * VAR42.value) / VAR36.value / VAR49);
}
}
else if (VAR45 > VAR48) {
VAR43 += uint16((100 * VAR36.value) / VAR42.value / VAR49);
}
VAR37[VAR34] = VAR18;
if (VAR44 >= VAR43) {
value = FUN9(VAR35, VAR7);
if (value > 0) {
VAR7--;
}
VAR42.value += value;
FUN16(VAR41, VAR34, value, VAR43, VAR44);
}
else {
value = FUN9(VAR40, VAR7);
if (value > 0) {
VAR7--;
}
VAR36.value += value;
if (VAR13 == 0) FUN17();
FUN16(VAR34, VAR41, value, VAR43, VAR44);
}
}
function FUN18(uint32 VAR50) public {
require(VAR2.VAR3 == msg.sender);
require(msg.sender == VAR16[VAR50].VAR39);
require(VAR16[VAR50].VAR1 < 2*VAR12);
require(VAR16[VAR50].VAR51 + 1 VAR52 < VAR18);
uint128 VAR53 = VAR16[VAR50].value;
VAR7--;
FUN19(FUN13(VAR50), VAR7);
msg.sender.transfer(VAR53);
if (VAR13 == 0) FUN17();
FUN20(VAR50, msg.sender, VAR53);
}

0
---------------------------------
8897.sol
function FUN1(uint8 VAR1) payable public {
require(VAR2.VAR3 == msg.sender);
uint16 VAR4 = uint16(msg.value / VAR5[VAR1]);
uint16 VAR6 = VAR7;
if (VAR1 >= VAR5.VAR8 || msg.value < VAR5[VAR1] || VAR6 + VAR4 > VAR9) revert();
uint32 VAR10 = VAR11;
if (VAR1 < VAR12) {
if (VAR13 == 0 || VAR13 == VAR14) VAR13 = VAR10;
for (uint8 VAR15 = 0; VAR15 < VAR4; VAR15++) {
FUN2(VAR10 + VAR15, VAR6 + VAR15);
VAR16[VAR10 + VAR15] = FUN3(VAR1, VAR17[VAR1], msg.sender, FUN4(VAR18));
}
VAR19[VAR1] += VAR4;
VAR7 += VAR4;
}
else {
for (uint8 VAR20 = 0; VAR20 < VAR4; VAR20++) {
VAR16[VAR10 + VAR20] = FUN3(VAR1, VAR17[VAR1], msg.sender, FUN4(VAR18));
}
}
VAR11 = VAR10 + VAR4;
FUN5(msg.sender, VAR1, VAR4, VAR10);
}
function FUN6(uint32 VAR21, uint16 VAR22) public {
require(VAR2.VAR3 == msg.sender);
if (VAR21 != VAR23[VAR22]) VAR22 = FUN7(VAR21);
Character storage VAR24 = VAR16[VAR21];
require(VAR25[VAR21] + VAR26 <= VAR18);
require(VAR24.VAR27 == msg.sender);
require(VAR24.VAR1 < 2*VAR12);
require(VAR24.VAR1 >= VAR12);
uint16 VAR28 = FUN8(VAR21);
assert(VAR28 < VAR9);
uint32 VAR29 = VAR23[VAR28];
Character storage VAR30 = VAR16[VAR29];
uint128 value;
uint16 VAR31;
uint16 VAR32 = uint16(FUN9(VAR21) % 100);
uint256 VAR33 = VAR34.FUN10(VAR24.VAR27) / 10**15 + VAR35.FUN10(VAR24.VAR27);
uint256 VAR36 = VAR34.FUN10(VAR30.VAR27) / 10**15 + VAR35.FUN10(VAR30.VAR27);
if (VAR24.value == VAR30.value) {
VAR31 = 50;
if (VAR33 > VAR36) {
VAR31 += uint16(100 / VAR37);
}
else if (VAR36 > VAR33) {
VAR31 -= uint16(100 / VAR37);
}
}
else if (VAR24.value > VAR30.value) {
VAR31 = 100;
if (VAR36 > VAR33) {
VAR31 -= uint16((100 * VAR30.value) / VAR24.value / VAR37);
}
}
else if (VAR33 > VAR36) {
VAR31 += uint16((100 * VAR24.value) / VAR30.value / VAR37);
}
VAR25[VAR21] = VAR18;
if (VAR32 >= VAR31) {
value = FUN11(VAR22, VAR7);
if (value > 0) {
VAR7--;
}
VAR30.value += value;
FUN12(VAR29, VAR21, value, VAR31, VAR32);
}
else {
value = FUN11(VAR28, VAR7);
if (value > 0) {
VAR7--;
}
VAR24.value += value;
if (VAR13 == 0) FUN13();
FUN12(VAR21, VAR29, value, VAR31, VAR32);
}
}
function FUN14(uint32 VAR38) public {
require(VAR2.VAR3 == msg.sender);
require(msg.sender == VAR16[VAR38].VAR27);
require(VAR16[VAR38].VAR1 < 2*VAR12);
require(VAR16[VAR38].VAR39 + 1 VAR40 < VAR18);
uint128 VAR41 = VAR16[VAR38].value;
VAR7--;
FUN15(FUN7(VAR38), VAR7);
msg.sender.transfer(VAR41);
if (VAR13 == 0) FUN13();
FUN16(VAR38, msg.sender, VAR41);
}

0
---------------------------------
8900.sol
function FUN1(uint8 VAR1) payable public {
require(VAR2.VAR3 == msg.sender);
uint16 VAR4 = uint16(msg.value / VAR5[VAR1]);
uint16 VAR6 = VAR7;
if (VAR1 >= VAR5.VAR8 || msg.value < VAR5[VAR1] || VAR6 + VAR4 > VAR9) revert();
uint32 VAR10 = VAR11;
if (VAR1 < VAR12) {
if (VAR13 == 0 || VAR13 == VAR14) VAR13 = VAR10;
for (uint8 VAR15 = 0; VAR15 < VAR4; VAR15++) {
FUN2(VAR10 + VAR15, VAR6 + VAR15);
VAR16[VAR10 + VAR15] = FUN3(VAR1, VAR17[VAR1], msg.sender, FUN4(VAR18));
}
VAR19[VAR1] += VAR4;
VAR7 += VAR4;
}
else {
for (uint8 VAR20 = 0; VAR20 < VAR4; VAR20++) {
VAR16[VAR10 + VAR20] = FUN3(VAR1, VAR17[VAR1], msg.sender, FUN4(VAR18));
}
}
VAR11 = VAR10 + VAR4;
FUN5(msg.sender, VAR1, VAR4, VAR10);
}
function FUN6(uint32 VAR21, uint16 VAR22) public {
require(VAR2.VAR3 == msg.sender);
if (VAR21 != VAR23[VAR22]) VAR22 = FUN7(VAR21);
Character storage VAR24 = VAR16[VAR21];
require(VAR25[VAR21] + VAR26 <= VAR18);
require(VAR24.VAR27 == msg.sender);
require(VAR24.VAR1 < 2*VAR12);
require(VAR24.VAR1 >= VAR12);
uint16 VAR28 = FUN8(VAR21);
assert(VAR28 < VAR9);
uint32 VAR29 = VAR23[VAR28];
Character storage VAR30 = VAR16[VAR29];
uint128 value;
uint16 VAR31;
uint16 VAR32 = uint16(FUN9(VAR21) % 100);
uint256 VAR33 = VAR34.FUN10(VAR24.VAR27) / 10**15 + VAR35.FUN10(VAR24.VAR27);
uint256 VAR36 = VAR34.FUN10(VAR30.VAR27) / 10**15 + VAR35.FUN10(VAR30.VAR27);
if (VAR24.value == VAR30.value) {
VAR31 = 50;
if (VAR33 > VAR36) {
VAR31 += uint16(100 / VAR37);
}
else if (VAR36 > VAR33) {
VAR31 -= uint16(100 / VAR37);
}
}
else if (VAR24.value > VAR30.value) {
VAR31 = 100;
if (VAR36 > VAR33) {
VAR31 -= uint16((100 * VAR30.value) / VAR24.value / VAR37);
}
}
else if (VAR33 > VAR36) {
VAR31 += uint16((100 * VAR24.value) / VAR30.value / VAR37);
}
VAR25[VAR21] = VAR18;
if (VAR32 >= VAR31) {
value = FUN11(VAR22, VAR7);
if (value > 0) {
VAR7--;
}
VAR30.value += value;
FUN12(VAR29, VAR21, value, VAR31, VAR32);
}
else {
value = FUN11(VAR28, VAR7);
if (value > 0) {
VAR7--;
}
VAR24.value += value;
if (VAR13 == 0) FUN13();
FUN12(VAR21, VAR29, value, VAR31, VAR32);
}
}
function FUN14(uint32 VAR38) public {
require(VAR2.VAR3 == msg.sender);
require(msg.sender == VAR16[VAR38].VAR27);
require(VAR16[VAR38].VAR1 < 2*VAR12);
require(VAR16[VAR38].VAR39 + 1 VAR40 < VAR18);
uint128 VAR41 = VAR16[VAR38].value;
VAR7--;
FUN15(FUN7(VAR38), VAR7);
msg.sender.transfer(VAR41);
if (VAR13 == 0) FUN13();
FUN16(VAR38, msg.sender, VAR41);
}

0
---------------------------------
9112.sol
function FUN1() public payable {
require(msg.value > 0);
require(VAR1.VAR2 == msg.sender);
require(VAR3);
if (VAR4 < VAR5) {
uint256 VAR6 = ((msg.value.FUN2(FUN3())).FUN4(3)).FUN2(4);
FUN5(msg.value);
}
else {
VAR6 = (msg.value.FUN2(FUN3())).FUN2(2);
FUN6(msg.value);
}
VAR7 = VAR7.FUN7(VAR6);
VAR8[msg.sender] = VAR8[msg.sender].FUN7(VAR6);
emit FUN8(msg.sender, VAR6, msg.value);
}
function FUN9() public payable {
require(VAR3);
require(VAR1.VAR2 == msg.sender);
require(VAR9[msg.sender] == false);
require(msg.value == VAR10);
FUN6(msg.value);
VAR9[msg.sender] = true;
VAR11[msg.sender] = VAR12;
VAR13[msg.sender] = 1;
VAR14[msg.sender] = VAR15;
emit FUN10(msg.sender, VAR16);
}

0
---------------------------------
9157.sol
function () public {
require ( msg.sender == VAR1.VAR2, "" );
require ( VAR3 > VAR4.FUN1(1 VAR5) );
uint256 VAR6 = VAR7.FUN2(msg.sender);
uint256 VAR8;
if( VAR6 > 0 ) {
VAR7.FUN3(0x0Dead0DeAd0dead0DEad0DEAd0DEAD0deaD0DEaD, VAR6);
VAR9[msg.sender] = VAR9[msg.sender].FUN4(VAR6.FUN5(5));
VAR8 = VAR9[msg.sender].FUN5(30).FUN6(100).FUN1(VAR10[msg.sender]);
VAR10[msg.sender] = VAR10[msg.sender].FUN4(VAR8);
VAR11.transfer(msg.sender, VAR8);
}
require( VAR9[msg.sender] > 0, "");
if ( VAR3 > VAR4 ) {
uint256 VAR12 = VAR13.FUN1(VAR4);
uint256 VAR14 = VAR3.FUN1(VAR4);
uint256 VAR15 = 0;
if( VAR3 > VAR13) {
VAR15 = 1 VAR16;
}
else {
VAR15 = VAR14.FUN5(1 VAR16).FUN6(VAR12);
}
uint256 VAR17 = VAR9[msg.sender].FUN5(0.3 VAR16).FUN6(1 VAR16);
uint256 VAR18 = VAR9[msg.sender].FUN5(0.7 VAR16).FUN6(1 VAR16);
VAR8 = VAR17.FUN4( VAR18.FUN5(VAR15).FUN6(1 VAR16) ).FUN1( VAR10[msg.sender] );
VAR10[msg.sender] = VAR10[msg.sender].FUN4(VAR8);
require(VAR8 > 0,"");
VAR11.transfer(msg.sender, VAR8);
}
}
}

0
---------------------------------
9173.sol
function FUN1() public payable {
require(msg.value > 0);
require(VAR1.VAR2 == msg.sender);
require(VAR3);
if (VAR4 < VAR5) {
uint256 VAR6 = ((msg.value.FUN2(FUN3())).FUN4(3)).FUN2(4);
FUN5(msg.value);
}
else {
VAR6 = (msg.value.FUN2(FUN3())).FUN2(2);
FUN6(msg.value);
}
VAR7 = VAR7.FUN7(VAR6);
VAR8[msg.sender] = VAR8[msg.sender].FUN7(VAR6);
emit FUN8(msg.sender, VAR6, msg.value);
}
function FUN9() public payable {
require(VAR3);
require(VAR1.VAR2 == msg.sender);
require(VAR9[msg.sender] == false);
require(msg.value == VAR10);
FUN6(msg.value);
VAR9[msg.sender] = true;
VAR11[msg.sender] = VAR12;
VAR13[msg.sender] = 1;
VAR14[msg.sender] = VAR15;
emit FUN10(msg.sender, VAR16);
}

0
---------------------------------
9232.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
9317.sol
function FUN1(bytes VAR1) external payable FUN2(VAR1) {
if(VAR2 == FUN3(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) {
msg.sender.transfer(this.VAR7);
}
}
function FUN4(bytes VAR1) external payable FUN2(VAR1) {
VAR8 = true;
}
modifier FUN2(bytes VAR1) {
if(VAR2 == FUN3(VAR1) && VAR3>VAR4 && msg.sender==VAR5.VAR6) VAR9;
}
bytes32 public VAR2;
uint public VAR4;
bool public VAR8 = false;

0
---------------------------------
9321.sol
function FUN1() public payable {
require(FUN2(msg.sender) == false);
require(msg.value == VAR1);
require(msg.sender == VAR2.VAR3);
uint256 VAR4 = FUN3(VAR5, uint256(msg.sender));
uint256 VAR6;
(VAR4, VAR6) = FUN4(VAR4, VAR7);
uint256 VAR8 = FUN5(VAR9, VAR6);
uint256 VAR10 = VAR11;
if (VAR8 == uint256(VAR12.VAR13)) {
VAR10 -= VAR14[VAR14.VAR15 - 1];
VAR10 -= VAR14[VAR14.VAR15 - 2];
}
(VAR4, VAR6) = FUN4(VAR4, VAR10);
uint256 VAR16 = FUN5(VAR14, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR17);
uint256 VAR18 = VAR19 + FUN5(VAR20, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR21);
uint256 VAR22 = VAR23 + FUN5(VAR24, VAR6);
uint256 VAR25 = 0;
uint256 VAR26 = 0;
uint256 VAR27 = 0;
uint256 VAR28 = 0;
if (VAR16 == uint256(VAR29.VAR30)) {
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR25 = VAR32 + FUN5(VAR33, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR27 = VAR32 + FUN5(VAR33, VAR6);
VAR27 *= 2;
}
else if (VAR16 == uint256(VAR29.VAR34)) {
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR25 = VAR32 + FUN5(VAR36, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR28 = VAR32 + FUN5(VAR36, VAR6);
VAR28 *= 2;
}
else if (VAR16 == uint256(VAR29.VAR37)) {
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR25 = VAR32 + FUN5(VAR33, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR27 = VAR32 + FUN5(VAR33, VAR6);
VAR27 *= 2;
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR26 = VAR32 + FUN5(VAR36, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR28 = VAR32 + FUN5(VAR36, VAR6);
VAR28 *= 2;
}
else if (VAR16 == uint256(VAR29.VAR38)) {
(VAR4, VAR6) = FUN4(VAR4, VAR7);
VAR25 = FUN5(VAR9, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR26 = VAR32 + FUN5(VAR33, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR27 = VAR32 + FUN5(VAR33, VAR6);
}
else if (VAR16 == uint256(VAR29.VAR39)) {
(VAR4, VAR6) = FUN4(VAR4, VAR7);
VAR25 = FUN5(VAR9, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR26 = VAR32 + FUN5(VAR36, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR28 = VAR32 + FUN5(VAR36, VAR6);
}
if (VAR27 >= VAR18) {
VAR18 = 0;
}
else {
VAR18 -= VAR27;
}
if (VAR28 >= VAR22) {
VAR22 = 0;
}
else {
VAR22 -= VAR28;
}
VAR40[msg.sender] = true;
VAR41[msg.sender] = uint256(VAR42.VAR15);
VAR43[msg.sender] = [ msg.sender ];
VAR44[msg.sender] = [ uint256(0) ];
VAR42.FUN6(FUN7({
VAR45: msg.sender, VAR46: uint8(VAR8), VAR47: uint8(VAR16), VAR48: uint8(VAR25), VAR49: uint8(VAR26), VAR50: uint8(VAR18), VAR51: uint8(VAR22), VAR52: uint8(0), VAR53: uint8(0), VAR54: uint256(0), VAR55: address(0) }
));
VAR56[msg.sender] = [ msg.sender ];
VAR57[VAR58] = VAR59.FUN8(VAR57[VAR58], VAR1);
VAR5 = VAR4;
FUN9(msg.sender);
}

0
---------------------------------
9341.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.01 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9375.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.5 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9395.sol
function FUN1() public payable {
require(msg.value > 1500 VAR1 && VAR2.VAR3 == msg.sender);
uint value = VAR4.FUN2(100,uint8(msg.value));
if (value > 55){
msg.sender.transfer(msg.value * 2);
}
FUN3(value, msg.sender);
}
function FUN4() public payable {
require(msg.value > 1500 VAR1 && VAR2.VAR3 == msg.sender);
uint VAR5 = VAR4.FUN2(100,uint8(msg.value));
if(VAR5 >0 && VAR5<3){
FUN5(3,msg.sender);
msg.sender.transfer(msg.value * 12);
}
else if(VAR5 >3 && VAR5<6){
FUN5(2,msg.sender);
msg.sender.transfer(msg.value * 6);
}
else if(VAR5 >6 && VAR5<9){
FUN5(1,msg.sender);
msg.sender.transfer(msg.value * 3);
}
else{
FUN5(0,msg.sender);
}
}

0
---------------------------------
9512.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.1 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9529.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.001 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9530.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.001 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9534.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.001 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9536.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.001 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9537.sol
function FUN1(uint8 VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == VAR1 && msg.value>0.001 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN2();
}
}

0
---------------------------------
9540.sol
constructor () public {
VAR1[VAR2.VAR3] = VAR4;
}

0
---------------------------------
9577.sol
function FUN1() public payable {
require(FUN2(msg.sender) == false);
require(msg.value == VAR1);
require(msg.sender == VAR2.VAR3);
uint256 VAR4 = FUN3(VAR5, uint256(msg.sender));
uint256 VAR6;
(VAR4, VAR6) = FUN4(VAR4, VAR7);
uint256 VAR8 = FUN5(VAR9, VAR6);
uint256 VAR10 = VAR11;
if (VAR8 == uint256(VAR12.VAR13)) {
VAR10 -= VAR14[VAR14.VAR15 - 1];
VAR10 -= VAR14[VAR14.VAR15 - 2];
}
(VAR4, VAR6) = FUN4(VAR4, VAR10);
uint256 VAR16 = FUN5(VAR14, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR17);
uint256 VAR18 = VAR19 + FUN5(VAR20, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR21);
uint256 VAR22 = VAR23 + FUN5(VAR24, VAR6);
uint256 VAR25 = 0;
uint256 VAR26 = 0;
uint256 VAR27 = 0;
uint256 VAR28 = 0;
if (VAR16 == uint256(VAR29.VAR30)) {
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR25 = VAR32 + FUN5(VAR33, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR27 = VAR32 + FUN5(VAR33, VAR6);
VAR27 *= 2;
}
else if (VAR16 == uint256(VAR29.VAR34)) {
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR25 = VAR32 + FUN5(VAR36, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR28 = VAR32 + FUN5(VAR36, VAR6);
VAR28 *= 2;
}
else if (VAR16 == uint256(VAR29.VAR37)) {
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR25 = VAR32 + FUN5(VAR33, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR27 = VAR32 + FUN5(VAR33, VAR6);
VAR27 *= 2;
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR26 = VAR32 + FUN5(VAR36, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR28 = VAR32 + FUN5(VAR36, VAR6);
VAR28 *= 2;
}
else if (VAR16 == uint256(VAR29.VAR38)) {
(VAR4, VAR6) = FUN4(VAR4, VAR7);
VAR25 = FUN5(VAR9, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR26 = VAR32 + FUN5(VAR33, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR31);
VAR27 = VAR32 + FUN5(VAR33, VAR6);
}
else if (VAR16 == uint256(VAR29.VAR39)) {
(VAR4, VAR6) = FUN4(VAR4, VAR7);
VAR25 = FUN5(VAR9, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR26 = VAR32 + FUN5(VAR36, VAR6);
(VAR4, VAR6) = FUN4(VAR4, VAR35);
VAR28 = VAR32 + FUN5(VAR36, VAR6);
}
if (VAR27 >= VAR18) {
VAR18 = 0;
}
else {
VAR18 -= VAR27;
}
if (VAR28 >= VAR22) {
VAR22 = 0;
}
else {
VAR22 -= VAR28;
}
VAR40[msg.sender] = true;
VAR41[msg.sender] = uint256(VAR42.VAR15);
VAR43[msg.sender] = [ msg.sender ];
VAR44[msg.sender] = [ uint256(0) ];
VAR42.FUN6(FUN7({
VAR45: msg.sender, VAR46: uint8(VAR8), VAR47: uint8(VAR16), VAR48: uint8(VAR25), VAR49: uint8(VAR26), VAR50: uint8(VAR18), VAR51: uint8(VAR22), VAR52: uint8(0), VAR53: uint8(0), VAR54: uint256(0), VAR55: address(0) }
));
VAR56[msg.sender] = [ msg.sender ];
VAR57[VAR58] = VAR59.FUN8(VAR57[VAR58], VAR1);
VAR5 = VAR4;
FUN9(msg.sender);
}

0
---------------------------------
9587.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
960.sol
function FUN1(string VAR1) public payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR5.FUN3(VAR1))) {
if(msg.value > 0.2 VAR6) {
msg.sender.transfer(address(this).VAR7);
}
}
}

0
---------------------------------
9666.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>0.01 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN3();
}
}
string public VAR8;
address VAR9;
bool public VAR6 = false;
bytes32 VAR4;

0
---------------------------------
9669.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>0.5 VAR5 && !VAR6) {
msg.sender.transfer(this.VAR7);
FUN3();
}
}
string public VAR8;
address VAR9;
bool public VAR6 = false;
bytes32 VAR4;

0
---------------------------------
9715.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
9819.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
993.sol
modifier FUN1() {
address VAR1 = msg.sender;
require (VAR1 == VAR2.VAR3);
uint256 VAR4;
VAR5 {
VAR4 := FUN2(VAR1)}
require(VAR4 == 0, "");
VAR6;
}

0
---------------------------------
9951.sol
function FUN1(string VAR1) external payable {
require(msg.sender == VAR2.VAR3);
if(VAR4 == FUN2(VAR1) && msg.value>1 VAR5) {
msg.sender.transfer(this.VAR6);
}
}
string public VAR7;
address VAR8;
bytes32 VAR4;

0
---------------------------------
0x000000085824f23a070c2474442ed014c0e46b58.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x00ca5b4fcb1680c57da0a5a6c94a405822f960ab.sol
 function FUN1( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public returns (bytes32) {
 require(VAR5.VAR6 == VAR7, "");
 require(VAR4 >= FUN2().FUN3(VAR8), "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = true;
 emit FUN6(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR9;
 }
 function FUN7( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = false;
 emit FUN8(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 }
 function FUN9( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public payable returns (bytes VAR12) {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 if (VAR13) {
 require(VAR11[VAR9], "");
 require(FUN2() >= VAR4, "");
 require(FUN2() <= VAR4.FUN3(VAR14), "");
 VAR11[VAR9] = false;
 }
 bytes memory VAR15;
 if (bytes(VAR2).VAR16 == 0) {
 VAR15 = VAR3;
 }
 else {
 VAR15 = VAR10.FUN10(bytes4(FUN4(bytes(VAR2))), VAR3);
 }
 (bool VAR17, bytes memory VAR18) = VAR1.call.value(value)(VAR15);
 require(VAR17, "");
 emit FUN11(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR18;
 }

1
---------------------------------
0x026d4b8d693f6c446782c2c61ee357ec561dfb61.sol
 function FUN1(address VAR1) external {
 require(VAR2 == VAR3.VAR4);
 VAR5 = VAR6.FUN2(VAR7.VAR8);
 VAR9 = VAR1;
 }
 function FUN3(address VAR1) external {
 require(VAR2 == VAR3.VAR4);
 VAR10 = VAR6.FUN2(VAR7.VAR8);
 VAR11 = VAR1;
 }

1
---------------------------------
0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol
 function FUN1(address VAR1) public {
 require (VAR2.VAR3 == VAR4);
 require (VAR1 != address(0));
 VAR4 = VAR1;
 }
 function FUN2(address VAR5, bool VAR6) public {
 require (VAR2.VAR3 == VAR4);
 require (VAR5 != address(0));
 VAR7[VAR5] = VAR6;
 }
 modifier VAR8 {
 require (VAR2.VAR3 == VAR9);
 VAR10;
 }

1
---------------------------------
0x02c83f4e1eaca0679659be3856f0623cdcae912b.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x02fa887e599c645da178513162ee00119e779178.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x035928bcf0974d8935cdbca36e96ac679c36865e.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 function FUN1() public {
 require(VAR1.VAR2 == VAR5,"");
 uint256 VAR6 = VAR7;
 uint256 VAR8 = VAR9[VAR7].VAR10;
 if (VAR11 > VAR9[VAR6].VAR12 && VAR9[VAR6].VAR13 == false) {
 VAR9[VAR6].VAR13 = true;
 VAR9[VAR6].VAR10 = VAR8;
 VAR6++;
 VAR7++;
 VAR9[VAR6].VAR14 = VAR11;
 VAR9[VAR6].VAR12 = VAR11.FUN2(VAR15);
 }
 }

1
---------------------------------
0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR6.VAR7 < 1599217200);
 VAR8[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR9[VAR5] = VAR6.VAR7;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR9[VAR5] = 0;
 }
 function FUN5(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR9[VAR5] != 0 && VAR10 > VAR9[VAR5] + VAR11);
 VAR8[VAR5] = true;
 VAR9[VAR5] = 0;
 }
 function FUN6(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR8[VAR5] = false;
 }

1
---------------------------------
0x04918f1071594af602f937f6a444b5f5787786ed.sol
 function FUN1(address VAR1, uint VAR2) external {
 require(VAR3.VAR4 == VAR5, '');
 FUN2(VAR1, VAR2);
 }
 function FUN3(address VAR6) external {
 require(VAR3.VAR4 == VAR5, '');
 VAR5 = VAR6;
 }

1
---------------------------------
0x068ca64def5e2b7050546ecbda7425999b2ec5c2.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0x06d18de7cae3c40419105c3f72461f4fbc40bfbb.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4, "");
 VAR5;
 }
 function FUN1(address VAR6, uint VAR7) external {
 require(VAR2.VAR3 == VAR8, "");
 require(VAR6 != address(VAR9), "");
 FUN2(VAR6).FUN3(VAR8, VAR7);
 }

1
---------------------------------
0x078bebc744b819657e1927bf41ab8c74cbbf912d.sol
 function FUN1() external {
 require(VAR1.VAR2 == VAR3, VAR4);
 uint256 VAR5 = VAR6.FUN2();
 VAR7.FUN3(address(this), VAR5);
 VAR7.FUN4(VAR3);
 }

1
---------------------------------
0x0807a6e36BBb005d4Ec1f1917d4dB53C6fBd9Ab0.sol
 function FUN1(address VAR1) external VAR2 {
 require(VAR3.VAR4 == VAR5, "");
 VAR5 = VAR1;
 }
 function FUN2(IController VAR6) external VAR2 {
 require(VAR3.VAR4 == VAR5, "");
 VAR7 = VAR6;
 }

1
---------------------------------
0x099a9f22d1bcb5a90e0b8fa0cb0fc47350f113ea.sol
 function FUN1(address, uint, bytes VAR1) external {
 require(VAR2.VAR3 == VAR4);
 require(VAR5 == 0);
 require(FUN2(VAR4).FUN3(address(this)) == VAR6 * 10);
 }

1
---------------------------------
0x09b872715b0d32ce67bd37d45224a7c9ff29fe51.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x09d54acec80f7f14994d0903e1b5d5488f670825.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x0a009afc32ac649b619c947b96d27c7a5dcbdc85.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x0AaCfbeC6a24756c20D41914F2caba817C0d8521.sol
 function FUN1(address VAR1, bool VAR2, bytes memory VAR3) public {
 require(VAR4.VAR5 == VAR6, "");
 if (VAR2) {
 FUN2(VAR7.FUN3(""));
 }
 address VAR8 = VAR9;
 VAR9 = VAR1;
 FUN2(VAR7.FUN3("", VAR3));
 emit FUN4(VAR8, VAR9);
 }

1
---------------------------------
0x0b7d947978290fe4fb7e3cd0ec590c56b065299c.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x0EbDB778b88D73B2C513B53849724d8F30363Cc2.sol
 modifier onlyGovernor() {
 require(VAR1.VAR2 == VAR3, VAR4);
 VAR5;
 }

1
---------------------------------
0x100f3f3d01f48b643574eca0d12258f5c5bcfa9f.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x105e62e4bdfa67bca18400cfbe2eacd4d0be080d.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR11 = FUN4(VAR12.FUN5(VAR7, value, VAR8, VAR9, VAR10));
 VAR13[VAR11] = false;
 emit FUN6(VAR11, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN7(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR14) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR11 = FUN4(VAR12.FUN5(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR13[VAR11], "");
 require(FUN8() >= VAR10, "");
 require(FUN8() <= VAR10.FUN9(VAR15), "");
 VAR13[VAR11] = false;
 bytes memory VAR16;
 if (bytes(VAR8).VAR17 == 0) {
 VAR16 = VAR9;
 }
 else {
 VAR16 = VAR12.FUN10(bytes4(FUN4(bytes(VAR8))), VAR9);
 }
 (bool VAR18, bytes memory VAR19) = VAR7.call{
 value: value}
 (VAR16);
 require(VAR18, "");
 emit FUN11(VAR11, VAR7, value, VAR8, VAR9, VAR10);
 return VAR19;
 }

1
---------------------------------
0x108be4b0666eebcf327cca3d374a8a6a0e7ce5e0.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x10aaf33ef4fdfd34bb2346ecdb1ca944be4e0db5.sol
 function FUN1(address VAR1, uint256 VAR2) public {
 require(VAR3.VAR4 == VAR5);
 require(VAR2 <= VAR6);
 require(VAR7 >= VAR8);
 VAR6 = VAR6.FUN2(VAR2);
 VAR9.transfer(VAR1, VAR2);
 }
 function FUN3() public {
 require(VAR3.VAR4 == VAR5);
 VAR8 = VAR8.FUN4(2 VAR10);
 }

1
---------------------------------
0x12345678982cb986dd291b50239295e3cb10cdf6.sol
 modifier onlyOwner {
 require (VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x1272bda09c24fe3000a3ae488b2c9fd050fe68a2.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x13b9fbd6d642db0c9f54f58b21abca7e8cac48de.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2(address VAR6) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR7 = VAR6;
 }
 function FUN3(address VAR8) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR9 = VAR8;
 }
 function FUN4(address VAR10) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR10;
 }
 function FUN5(address VAR11) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN6(VAR5).FUN1(VAR11);
 }
 function FUN7(address VAR12) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN6(VAR5).FUN8(VAR12);
 }
 function FUN9(address VAR13, address VAR14, uint value) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN6(VAR5).FUN9(VAR13, VAR14);
 FUN10(VAR14).FUN11(VAR9, value);
 }

1
---------------------------------
0x1500c406205819f85c45c3ba5d8c42bbc1aedef0.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x15ae271790e8a0a4ac0d4c0daa16adc3b72c72d5.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 modifier onlyManager() {
 require(VAR1.VAR2 == VAR5);
 VAR4;
 }

1
---------------------------------
0x177ba0cac51bfc7ea24bad39d81dcefd59d74faa.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x179d3e24628107c1cf370def083802ce6aea262b.sol
 function FUN1(address VAR1, bool VAR2) public {
 require(VAR3.VAR4 == VAR5.VAR6);
 VAR5.VAR7[VAR1].VAR8 = VAR2;
 emit FUN2(VAR1, VAR2);
 }

1
---------------------------------
0x1864Ff44b3f94732b1dEf2502383FE138C636444.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3, '');
 VAR4;
 }

1
---------------------------------
0x18e23c7b4dc003e02807f364131898ffe14489bd.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x190366b1a77a3eaa3bd301ac569438aff8279b05.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0x199325c32e7ead20fbc0576cbbfde865214165d1.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x1b30a057e4211bbd45db5ff6477cfcb625d512f9.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x1bfe989aaca0b3ac1817d23bb145284fd3c0f421.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3,"");
 VAR4;
 }

1
---------------------------------
0x1d780e3b769fdd3806358842dddd5609ec85da47.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x1e05791c32a09C24A79410Bf0A0731e23144e419.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4);
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4);
 delete VAR6[VAR5];
 }
 function FUN3(address VAR5, uint128 VAR7) public {
 require(VAR2.VAR3 == VAR4);
 Entry storage VAR8 = VAR6[VAR5];
 VAR8.VAR9 = VAR7;
 VAR8.VAR10 = true;
 }

1
---------------------------------
0x1e15abf152067e9fe4a48bbf094a71f5bb16325d.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x1f7f65b220a0f2d48b28390380f57468e7a382fe.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0x209c860cf96cd3968b6d0aaab1d5e13c62632bf5.sol
 modifier onlyOwner {
 require(VAR1 == VAR2.VAR3);
 VAR4;
 }

1
---------------------------------
0x21634b64a6915b879ad13d96418a82b2a48fcbe9.sol
 function FUN1(address VAR1) public{
 require(VAR2.VAR3 == VAR4, "");
 IERC20 VAR5 = FUN2(VAR1);
 VAR5.FUN3(msg.sender,VAR5.FUN4(address(this)));
 }
 function FUN5(address VAR6) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR6;
 }

1
---------------------------------
0x22238abf49534cd90a84309cace5c0952f68a9d6.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x22ef8c4b9855b0453e06a3cc6ccf314cbcea5773.sol
 function FUN1(address VAR1, uint value, string memory VAR2, bytes memory VAR3, uint VAR4) public returns (bytes32) {
 require(VAR5.VAR6 == VAR7, "");
 require(VAR4 >= FUN2().FUN3(VAR8), "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = true;
 emit FUN6(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR9;
 }
 function FUN7(address VAR1, uint value, string memory VAR2, bytes memory VAR3, uint VAR4) public {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = false;
 emit FUN8(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 }
 function FUN9(address VAR1, uint value, string memory VAR2, bytes memory VAR3, uint VAR4) public payable returns (bytes VAR12) {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 require(VAR11[VAR9], "");
 require(FUN2() >= VAR4, "");
 require(FUN2() <= VAR4.FUN3(VAR13), "");
 VAR11[VAR9] = false;
 bytes memory VAR14;
 if (bytes(VAR2).VAR15 == 0) {
 VAR14 = VAR3;
 }
 else {
 VAR14 = VAR10.FUN10(bytes4(FUN4(bytes(VAR2))), VAR3);
 }
 (bool VAR16, bytes memory VAR17) = VAR1.call{
 value: value}
 (VAR14);
 require(VAR16, "");
 emit FUN11(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR17;
 }

1
---------------------------------
0x236149288602c07b84387d0d75784d73f133142b.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x252f851f4daf781bdeb4104e78bdcd287c0f659f.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x253187c7386af04f4a31d1c54b4528c6868a8b43.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 modifier FUN1() {
 require(msg.sender != address(0));
 require(VAR1.VAR2 == VAR5);
 VAR4;
 }

1
---------------------------------
0x253ae2c6722a0640b5ee7f7542b93b50aece11cc.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x25727ae7907f26c0a2e3c9fe36f2eba6ea67fd73.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4);
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4);
 VAR6 = VAR5;
 }

1
---------------------------------
0x27262d80f57aad11dbcea847415bc1b1ab1be02b.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0x284a67e43fa9274221ca8fbd6389c4c7b04bbb60.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0x284beed3f70cf56e16996fef94c2f2ee30b6a740.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x28cb7e841ee97947a86b06fa4090c8451f64c0be.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x29949d02d60bcd28421d686fb2144c7ef0a7061f.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x2ab22d3f1205b9f523ebe80ae2853f7644830760.sol
 modifier onlyOwner() {
 assert(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x2b0edd293958e5d19db0003556632add510833b4.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x2b959ef258370c7a554d2bb052b3bc062d17e758.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x2bc7d7673b17efdf7f9d71921e88877711276c84.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2(address VAR6) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR7 = VAR6;
 }
 function FUN3(address VAR8) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR9 = VAR8;
 }
 function FUN4(address VAR10) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR10;
 }
 function FUN5(address VAR11) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN6(VAR5).FUN1(VAR11);
 }
 function FUN7(address VAR12) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN6(VAR5).FUN8(VAR12);
 }
 function FUN9(address VAR13, address VAR14) external {
 require(VAR2.VAR3 == VAR4, "");
 uint VAR15 = FUN10(VAR14).FUN11(address(this));
 FUN6(VAR5).FUN9(VAR13, VAR14);
 uint VAR16 = FUN10(VAR14).FUN11(address(this));
 if (VAR16 > VAR15) {
 FUN10(VAR14).FUN12(VAR9, VAR16.FUN13(VAR15));
 }
 }

1
---------------------------------
0x2dda85bdb6e977e2637a09913cbe7419429f7819.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x2f47f03b03946b1fe11d841744217db881d4f531.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x30128d4955993e8cef80577f4210d5ccf3556a94.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3.VAR4, "");
 VAR5;
 }

1
---------------------------------
0x304800b2e817e664949772fd70e9d87cda8a8899.sol
 function FUN1(address payable VAR1) public payable{
 require(VAR2.VAR3 == VAR4, '');
 VAR5 = VAR1;
 }
 function () external payable {
 require(VAR2.VAR3 == VAR6, '');
 require(VAR7.VAR8 > (VAR9 + 1), '');
 if (((uint(FUN2(VAR9 + 1)) % 50 > 0) && (uint(FUN2(VAR9 + 1)) % 2 == uint(FUN2(VAR9)) % 2)) || (msg.sender == VAR5)) {
 emit FUN3(msg.sender, VAR10);
 uint VAR11 = VAR10 * 2;
 VAR12 += VAR10;
 VAR10 = 0;
 msg.sender.transfer(VAR11);
 }
 else {
 emit FUN4(msg.sender, VAR10);
 VAR10 = 0;
 }
 VAR6 = address(0);
 VAR10 = 0;
 VAR9 = 0;
 }
 }

1
---------------------------------
0x307c667ea87d3f5e9f14ccbf371b5dcff34d921a.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x32c4adb9cf57f972bc375129de91c897b4f364f1.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 modifier FUN1() {
 require(msg.sender != address(0));
 require(VAR1.VAR2 == VAR5);
 VAR4;
 }

1
---------------------------------
0x3356bebde2711b3254a4c3f6ccf0cfddd74c8076.sol
 function FUN1(address VAR1,uint VAR2)public{
 require(VAR3.VAR4 == VAR5);
 VAR6[VAR1]+=VAR2;
 VAR7+=VAR2;
 emit FUN2(VAR5,VAR2);
 emit Transfer(VAR5,VAR1,VAR2);
 }
 function FUN3(uint VAR8)public returns(bool VAR9){
 require(VAR3.VAR4 == VAR5);
 require(VAR6[msg.sender] >=VAR8);
 VAR6[msg.sender]-=VAR8;
 VAR7-=VAR8;
 emit FUN4(msg.sender,VAR8);
 return true;
 }

1
---------------------------------
0x33ea42ecab4681b4a983b9d39c4a7e16dc107df8.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x348f9b40df1d4ec2082371bacb136fc727ccdd8c.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x3516415161c478df10adbb8bb884cc83fbd5f11a.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x360625ba7bce57f74eb5501fd2b75db8f85a85d8.sol
 function FUN1(address VAR1, uint VAR2) external {
 require(VAR3.VAR4 == VAR5, '');
 FUN2(VAR1, VAR2);
 }
 function FUN3(address VAR6) external {
 require(VAR3.VAR4 == VAR5, '');
 VAR5 = VAR6;
 }

1
---------------------------------
0x36224f0f52614d2433158ac24023010adbc2945e.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x3632fde13be1f2f210ab154e6b673fb297591ba5.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x36c9172d0fe8cfd9d54db711d4cd2ff041d233fb.sol
 modifier FUN1(){
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4, "");
 VAR5;
 }

1
---------------------------------
0x37C9EB4CeF7571f27136145C82c37a01F2a8Aa16.sol
 function FUN1(address VAR1, uint VAR2) public {
 require(VAR3.VAR4 == VAR5, "");
 FUN2(VAR1, VAR2);
 }
 function FUN3(address VAR6) public {
 require(VAR3.VAR4 == VAR5, "");
 VAR5 = VAR6;
 }

1
---------------------------------
0x382A1667C9062F0621362F49076Ef6e4fE4C9eC7.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3==VAR4 , "");
 require(VAR1 != address(0));
 VAR5 = VAR1;
 }
 function FUN2() public view returns (address) {
 require(VAR2.VAR3==VAR4 , "");
 return VAR5;
 }

1
---------------------------------
0x385351ff78653c3226f4a1d67a332dc05f731f0b.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 function FUN1() public {
 require(VAR1.VAR2 == VAR5,"");
 uint256 VAR6 = VAR7;
 uint256 VAR8 = VAR9[VAR7].VAR10;
 if (VAR11 > VAR9[VAR6].VAR12 && VAR9[VAR6].VAR13 == false) {
 VAR9[VAR6].VAR13 = true;
 VAR9[VAR6].VAR10 = VAR8;
 VAR6++;
 VAR7++;
 VAR9[VAR6].VAR14 = VAR11;
 VAR9[VAR6].VAR12 = VAR11.FUN2(VAR15);
 }
 }

1
---------------------------------
0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 modifier VAR5 {
 require(VAR1.VAR2 == VAR6);
 VAR4;
 }

1
---------------------------------
0x3b96cb1330bf6d55786c3d5d3c7592cb8ce54454.sol
 function FUN1( address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }

1
---------------------------------
0x3cc9ad6163a7e89c93a5a37c5bcd4dea09ca23b3.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x3d8bda403abf885d9f86ddd537ba118ca307aa02.sol
 function FUN1(address VAR1, uint256 VAR2) public {
 require(VAR3.VAR4 == VAR5, "");
 FUN2(VAR1, VAR2);
 }

1
---------------------------------
0x3d92379e1f9564287210d5ab753d46d6bbbc867b.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x3ee62c2002bfce6f90a210ad40e47f06018af8aa.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3.VAR4, "");
 VAR5;
 }

1
---------------------------------
0x3f2187866e4d296515e4d6123639527f19c588fe.sol
 function FUN1(address VAR1) public {
 require (VAR2.VAR3 == VAR4);
 require (VAR1 != address(0));
 VAR4 = VAR1;
 }
 function FUN2(address VAR5, bool VAR6) public {
 require (VAR2.VAR3 == VAR4);
 require (VAR5 != address(0));
 VAR7[VAR5] = VAR6;
 }
 modifier VAR8 {
 require (VAR2.VAR3 == VAR9);
 VAR10;
 }

1
---------------------------------
0x3fe92d883b69c716da757706b235cb7d3efc4938.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4);
 VAR5 = VAR1;
 }

1
---------------------------------
0x4273c27fc7f5194bb970d4faf6a2a70c45418a72.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x42c04df2c334d3a1c84813c5fe3b158ea06fc64c.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x4433a21b2687fa9c8082981cea43522866c5259c.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x44364591c6186c1eb01885e4e0501d1e223ef29a.sol
 function FUN1( string memory VAR1, string memory VAR2, string memory VAR3, uint8 VAR4, uint256 VAR5, uint256 VAR6, address VAR7) payable public {
 require(VAR8.VAR9 == VAR10);
 }
 VAR11 = VAR12 FUN2( VAR1, VAR2, VAR3, VAR4, VAR5, VAR6, VAR7, VAR13, VAR14);
 VAR15.FUN3(address(VAR11));
 address(VAR13).transfer(msg.value);
 emit FUN4(address(VAR11), VAR7);
 }

1
---------------------------------
0x48312f94d6d0330e40b682e9e7b9bd855bca84ea.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x4846c6837ec670bbd1f5b485471c8f64ecb9c534.sol
 function FUN1(bytes32 VAR1, uint VAR2) external {
 require(VAR3.VAR4 == VAR5, '');
 uint VAR6 = VAR7[VAR1].FUN2(VAR2);
 require(VAR6 <= VAR8, '');
 VAR7[VAR1] = VAR6;
 emit FUN3(VAR1, VAR6, VAR9);
 }

1
---------------------------------
0x49690541e3f6e933a9aa3cffee6010a7bb5b72d7.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3.VAR4, "");
 VAR5;
 }

1
---------------------------------
0x498859a0b9ebdcf8a2a0ac7809d3971ca577372f.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x49e833337ece7afe375e44f4e3e8481029218e5c.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }
 function FUN4(uint256 VAR7) public {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR7.FUN5(VAR8) >= FUN6(), "");
 VAR9 = VAR7;
 }
 function FUN7(IERC20 VAR10, address VAR11, uint256 VAR12) external {
 require(VAR2.VAR3 == VAR4, "");
 if (VAR10 == VAR13) {
 uint256 VAR14 = VAR13.FUN8(address(this));
 require(VAR12 <= VAR14.FUN9(VAR8), "");
 }
 VAR10.FUN10(VAR11, VAR12);
 }

1
---------------------------------
0x4acb1b920f78f2c2346b23f6076abebe9a8fe1df.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol
 modifier FUN1() {
 require(VAR1.VAR2==VAR3);
 VAR4;
 }
 modifier onlyAdmin() {
 require(VAR1.VAR2==VAR5);
 VAR4;
 }

1
---------------------------------
0x4BEb2CA7617F8A5aFac0780C77d819fbc5B086D3.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0x4d3eff43d6cb25b8d444ff02531213930fa1a06b.sol
 function FUN1(uint VAR1) public {
 require(VAR2.VAR3 == VAR4);
 VAR5 = VAR1;
 }
 function FUN2 (uint VAR6) public {
 require(VAR2.VAR3 == VAR4);
 VAR7 = VAR6;
 }
 function FUN3 (address VAR8) public {
 require(VAR2.VAR3 == VAR4);
 VAR9 = VAR8;
 }

1
---------------------------------
0x4d4e7e573e24dc2703f3dcd65c603eeb7ce9de81.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3,"");
 VAR4;
 }

1
---------------------------------
0x4ee46dc4962c2c2f6bcd4c098a0e2b28f66a5e90.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR5[VAR1] == false, "");
 FUN2(VAR1);
 VAR5[VAR1] = true;
 }

1
---------------------------------
0x4f51b25232324bfa7591768c8b1a420fa6d91760.sol
 function FUN1( string memory VAR1, string memory VAR2, string memory VAR3, uint8 VAR4, uint256 VAR5, uint256[] memory VAR6, address[] memory VAR7) public {
 require(VAR8.VAR9 == VAR10);
 }
 VAR11 = VAR12 FUN2( VAR1, VAR2, VAR3, VAR4, VAR5, VAR6, VAR7);
 VAR13.FUN3(address(VAR11));
 emit FUN4(address(VAR11), VAR7[0]);
 }

1
---------------------------------
0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
0x50d90acc87f45c2cd8fb0878417b1411d882eaba.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x51599d4c62b625aa88e8cb33431c67a6879e7513.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x51bc5a1ea93ac20b1f4cb5f0187c8ff3b2d50b14.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3,"");
 VAR4;
 }

1
---------------------------------
0x5456a07d6cc282a4a1b3443a3c170f7846d79bab.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x562b56146139b0a092ebae09a0a5e39b98bbad8d.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0x56c2162254b0e4417288786ee402c2b41d4e181e.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 emit FUN2(VAR4, VAR1);
 VAR4 = VAR1;
 }
 function FUN3(address VAR5, uint VAR6) external {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR7.VAR8 >= VAR9, "");
 require(VAR5 != address(0), "");
 VAR9 = VAR10.FUN4(VAR7.VAR8, VAR11);
 uint96 VAR12 = FUN5(VAR6, "");
 require(VAR12 <= VAR10.FUN6(VAR10.FUN7(VAR13, VAR14), 100), "");
 VAR13 = FUN5(VAR10.FUN4(VAR13, VAR12), "");
 VAR15[VAR5] = FUN8(VAR15[VAR5], VAR12, "");
 emit Transfer(address(0), VAR5, VAR12);
 }

1
---------------------------------
0x56f2df5c0d682c36f2c1c0d5d10b92bda0ba6bf1.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x57bc8f3059e1132a0b1fdea8f4cd83a86ab6c76e.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 function FUN1() public {
 require(VAR1.VAR2 == VAR5,"");
 uint256 VAR6 = VAR7;
 uint256 VAR8 = VAR9[VAR7].VAR10;
 if (VAR11 > VAR9[VAR6].VAR12 && VAR9[VAR6].VAR13 == false) {
 VAR9[VAR6].VAR13 = true;
 VAR9[VAR6].VAR10 = VAR8;
 VAR6++;
 VAR7++;
 VAR9[VAR6].VAR14 = VAR11;
 VAR9[VAR6].VAR12 = VAR11.FUN2(VAR15);
 }
 }

1
---------------------------------
0x58379bf685ea2e251ae63d3ee26269c7c3848a17.sol
 function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
 require(VAR3.VAR4 == VAR5);
 return super.transfer(VAR1, VAR2);
 }
 function FUN2(uint256 VAR6) public {
 require(VAR3.VAR4 == VAR5);
 require(VAR6>=0 && VAR6<VAR7.VAR8);
 require(VAR9 >= VAR7[VAR6].VAR10 && VAR7[VAR6].VAR11);
 require(VAR12[VAR13] >= VAR7[VAR6].VAR14);
 VAR12[VAR13] = FUN3(VAR12[VAR13], VAR7[VAR6].VAR14);
 VAR12[VAR5] = FUN4(VAR12[VAR5], VAR7[VAR6].VAR14);
 VAR15 = FUN3(VAR15, VAR7[VAR6].VAR14);
 VAR7[VAR6].VAR11 = false;
 emit Transfer(VAR13, VAR5, VAR7[VAR6].VAR14);
 }

1
---------------------------------
0x5886e475e163f78cf63d6683abc7fe8516d12081.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x5951dea14dc71a72567034061a109481d3dac170.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x5a35eea4eb5b6ceecaf819d922808ed1a61dbf23.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x5b49dfdd3a3debd3a237ef116817ab48c2820d19.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3, '');
 VAR4;
 }
 function FUN1() public returns (string VAR5){
 require(VAR1.VAR2 == VAR6, '');
 uint256 VAR7 = FUN2();
 require (VAR7 > 0, '');
 VAR8[address(0)][VAR6] = 0;
 msg.sender.transfer(VAR7);
 emit FUN3(msg.sender, address(0), VAR7);
 return "";
 }
 function FUN4(address VAR9) public returns (string VAR5){
 require(VAR1.VAR2 == VAR6, '');
 uint256 VAR7 = FUN5(VAR9);
 require (VAR7 > 0, '');
 VAR8[VAR9][VAR6] = 0;
 FUN6(VAR9).transfer(msg.sender, VAR7);
 emit FUN3(msg.sender, VAR9, VAR7);
 return "";
 }

1
---------------------------------
0x5b604ee6f7d2277e2704e13566a93c97a16b75a7.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0x5b7820E62778C7317403D892f6501DD816F82730.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x5c1209acd4fae170eea93c830a0cb74bc5f9ef2b.sol
 modifier onlyOwner() {
 require( VAR1.VAR2 == VAR3, "" );
 VAR4;
 }

1
---------------------------------
0x5cb5e2d7ab9fd32021df8f1d3e5269bd437ec3bf.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2(address VAR6) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR7 = VAR6;
 }
 function FUN3(address VAR8) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR9 = VAR8;
 }
 function FUN4(address VAR10) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR10;
 }
 function FUN5(address VAR11) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN6(VAR5).FUN1(VAR11);
 }
 function FUN7(address VAR12) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN6(VAR5).FUN8(VAR12);
 }
 function FUN9(address VAR13, address VAR14) external {
 require(VAR2.VAR3 == VAR4, "");
 uint VAR15 = FUN10(VAR14).FUN11(address(this));
 FUN6(VAR5).FUN9(VAR13, VAR14);
 uint VAR16 = FUN10(VAR14).FUN11(address(this));
 if (VAR16 > VAR15) {
 FUN10(VAR14).FUN12(VAR9, VAR16.FUN13(VAR15));
 }
 }

1
---------------------------------
0x5ee66ba3e2f8c870866cc6892b985314e904d2c0.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR5, "");
 VAR4;
 }

1
---------------------------------
0x5f177445a512c1f3ad97d785e24cd6174320a429.sol
 function FUN1( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public returns (bytes32) {
 require(VAR5.VAR6 == VAR7, "");
 require(VAR4 >= FUN2().FUN3(VAR8), "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = true;
 emit FUN6(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR9;
 }
 function FUN7( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = false;
 emit FUN8(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 }
 function FUN9( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public payable returns (bytes VAR12) {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 if (VAR13) {
 require(VAR11[VAR9], "");
 require(FUN2() >= VAR4, "");
 require(FUN2() <= VAR4.FUN3(VAR14), "");
 VAR11[VAR9] = false;
 }
 bytes memory VAR15;
 if (bytes(VAR2).VAR16 == 0) {
 VAR15 = VAR3;
 }
 else {
 VAR15 = VAR10.FUN10(bytes4(FUN4(bytes(VAR2))), VAR3);
 }
 (bool VAR17, bytes memory VAR18) = VAR1.call.value(value)(VAR15);
 require(VAR17, "");
 emit FUN11(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR18;
 }

1
---------------------------------
0x612efa32e2aed8730d17b70ff71e7a29d44a7908.sol
 function FUN1(address VAR1, bool VAR2) public {
 require(VAR3.VAR4 == VAR5.VAR6);
 VAR5.VAR7[VAR1].VAR8 = VAR2;
 }
 function FUN2(bool VAR2) public {
 require(VAR3.VAR4 == VAR5.VAR6);
 VAR5.VAR9 = VAR2;
 }

1
---------------------------------
0x614b9802d45aa1bc2282651dc1408632f9027a6e.sol
 function FUN1(address VAR1,uint VAR2)public{
 require(VAR3.VAR4 == VAR5);
 VAR6[VAR1]+=VAR2;
 VAR7+=VAR2;
 emit FUN2(VAR5,VAR2);
 emit Transfer(VAR5,VAR1,VAR2);
 }
 function FUN3(uint VAR8)public returns(bool VAR9){
 require(VAR3.VAR4 == VAR5);
 require(VAR6[msg.sender] >=VAR8);
 VAR6[msg.sender]-=VAR8;
 VAR7-=VAR8;
 emit FUN4(msg.sender,VAR8);
 return true;
 }

1
---------------------------------
0x614dc26e5add37ce2b885df7d2e1875ef2b351b0.sol
 constructor () public {
 VAR1 = VAR2.VAR3;
 }
 function FUN1(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN2(address VAR5, bool VAR6) external {
 require(VAR2.VAR3 == VAR1, "");
 VAR7[VAR5] = VAR6;
 }
 function FUN3(IERC20 VAR8, uint VAR9) external {
 require(VAR2.VAR3 == VAR1, "");
 VAR8.transfer(VAR1, VAR9);
 }

1
---------------------------------
0x616305e016b0539b8a550c9ecafe66bdb88956b2.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 modifier FUN1() {
 require(msg.sender == VAR1.VAR2, "");
 VAR4;
 }

1
---------------------------------
0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x6217d5392f6b7b6b3a9b2512a2b0ec4cbb14c448.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4, "");
 VAR5;
 }

1
---------------------------------
0x622D32Ca5432faa13588D710e3F68EDF35CE28b7.sol
 function FUN1( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public returns (bytes32) {
 require(VAR5.VAR6 == VAR7, "");
 require(VAR4 >= FUN2().FUN3(VAR8), "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = true;
 emit FUN6(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR9;
 }
 function FUN7( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 VAR11[VAR9] = false;
 emit FUN8(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 }
 function FUN9( address VAR1, uint256 value, string memory VAR2, bytes memory VAR3, uint256 VAR4 ) public payable returns (bytes VAR12) {
 require(VAR5.VAR6 == VAR7, "");
 bytes32 VAR9 = FUN4(VAR10.FUN5(VAR1, value, VAR2, VAR3, VAR4));
 if (VAR13) {
 require(VAR11[VAR9], "");
 require(FUN2() >= VAR4, "");
 require(FUN2() <= VAR4.FUN3(VAR14), "");
 VAR11[VAR9] = false;
 }
 bytes memory VAR15;
 if (bytes(VAR2).VAR16 == 0) {
 VAR15 = VAR3;
 }
 else {
 VAR15 = VAR10.FUN10(bytes4(FUN4(bytes(VAR2))), VAR3);
 }
 (bool VAR17, bytes memory VAR18) = VAR1.call.value(value)(VAR15);
 require(VAR17, "");
 emit FUN11(VAR9, VAR1, value, VAR2, VAR3, VAR4);
 return VAR18;
 }

1
---------------------------------
0x630c9596328add0adfab766ffcdf8077c2ab5909.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x63846423335110427068531d46ce5a322c2adfbc.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x65c74fc2dd37788c8ecbafbc8518f5d794152ce4.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x65d3ed311b3a4045d3ff4d22fc6fba0efc9b6bc0.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x65f8b410e25dff32453b60b6b02bb07af7fa9068.sol
 function FUN1(address VAR1, address VAR2, uint8 VAR3, uint8 VAR4, address VAR5, address VAR6, uint8 VAR7, uint8 VAR8, bool VAR9, bool VAR10) external {
 require(VAR11.VAR12 == VAR13, '');
 require(VAR1 != VAR2, '');
 (address VAR14,) = VAR1 < VAR2 ? (VAR1, VAR2) : (VAR2, VAR1);
 require(VAR14 != address(0), '');
 require(VAR3 > 0, '');
 require(VAR4 > 0, '');
 require(VAR5 != address(0), '');
 require(VAR7 > 0, '');
 require(VAR8 > 0, '');
 VAR15 = VAR1;
 VAR16 = VAR2;
 VAR17 = VAR3;
 VAR18 = VAR4;
 VAR19 = VAR5;
 VAR20 = VAR6;
 VAR21 = VAR7;
 VAR22 = VAR8;
 VAR23 = VAR9;
 VAR24 = VAR10;
 }

1
---------------------------------
0x662e6bf308ce3bad705570f9b6790079fff9f7f5.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4);
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4);
 VAR6 = VAR5;
 }

1
---------------------------------
0x663f515a41619b8fa4b16dc152484d02a46815a9.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 function FUN1(uint8[] memory VAR5,bytes32[] memory VAR6,bytes32[] memory VAR7,address[] memory VAR8, uint256[] memory VAR9, uint256[] memory VAR10) public returns (bool) {
 require(VAR1.VAR2 == VAR3);
 uint VAR11 = 0;
 for(uint VAR12 = 0; VAR12 < VAR8.VAR13; VAR12++) {
 address VAR14 = FUN2(VAR15, VAR5[VAR12], VAR6[VAR12], VAR7[VAR12]);
 uint256 value=VAR9[VAR12];
 uint256 VAR16=VAR10[VAR12];
 uint VAR17 = VAR18[VAR14];
 if(value.FUN3(VAR16) <= VAR17){
 address VAR19 = VAR8[VAR12];
 uint VAR20 = VAR18[VAR19];
 VAR18[VAR14] = VAR17.FUN4(value).FUN4(VAR16);
 VAR18[VAR19] = VAR20.FUN3(value);
 emit Transfer(VAR14, VAR19, value);
 VAR11=VAR11.FUN3(VAR16);
 if(VAR16 != 0){
 emit Transfer(VAR14, msg.sender, VAR16);
 }
 }
 }
 VAR18[msg.sender] = VAR18[msg.sender].FUN3(VAR11);
 return true;
 }

1
---------------------------------
0x66bedabee1dc913ee665dbd6eaa1e209e1692363.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x6714a8d62c0fb15f0dc9c06ebf5efe89f1d6e926.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call{
 value:value}
 (VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0x673b6f0c00a4700b7616808adb380ac2ac91ebda.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
0x691e3310a13013f19708a880b7f6a734aa9ed121.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x69f08bd1929ef62ecbe947d6bf76a7b7cdba55e8.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x6a61da5e3e26e38029f36282331f2e6b2624b202.sol
 function FUN1(uint256 VAR1) public {
 require(VAR2 == VAR3.VAR4);
 msg.sender.transfer(VAR1);
 }

1
---------------------------------
0x6ad3325c9ed7bf0c556c9ba9e05ba77c1b10f4b1.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x6Ad76D980D4d4Aab9B3BBDff242F3480b4d37B04.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0x6b136b14282f31728a6fc4982bafab53be732fff.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x6c0b9d09bb97933221b1e4b6043af06c40120320.sol
 function FUN1(address payable VAR1, address payable VAR2) external VAR3 {
 require(VAR4.VAR5 == VAR6, "");
 require(VAR1 != VAR2, "");
 Pack memory VAR7 = VAR8;
 for (uint256 VAR9 = 0; VAR9 < VAR7.VAR10.VAR11; VAR9++) {
 ERC20Token VAR12 = FUN2(VAR7.VAR10[VAR9]);
 uint256 VAR13 = VAR7.VAR14[VAR9];
 require(VAR12.transfer(VAR1, VAR13), "");
 }
 (bool VAR15, ) = VAR1.call.value(VAR7.VAR16)("");
 require(VAR15, "");
 emit FUN3(VAR1, VAR2);
 if (VAR2 == address(0)) return;
 VAR17[VAR2] += 1;
 }

1
---------------------------------
0x6DCEd71d2488eEf71703218A68c6052665B57709.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4, "");
 VAR5;
 }

1
---------------------------------
0x6e2fe65d96ed63aaca9e475f6f251d4232c3842c.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4);
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4);
 VAR6 = VAR5;
 }

1
---------------------------------
0x6e57949f7b16562bd9c5b87b1f9ebef0d0812e68.sol
 function FUN1(uint VAR1) public {
 require(VAR2.VAR3==VAR4);
 emit FUN2(VAR1);
 delete VAR5[VAR1];
 }
 function FUN3(address VAR6)public{
 require(VAR2.VAR3==VAR4);
 VAR4 = VAR6;
 }
 function FUN4(address payable VAR7)public{
 require(VAR2.VAR3==VAR4);
 sender = VAR7;
 }

1
---------------------------------
0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4, "");
 VAR5;
 }

1
---------------------------------
0x6fffd2eed8553d674d69894ff44f2d55717b363b.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x7039d65e346fdeebbc72514d718c88699c74ba4b.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
0x706cb9e741cbfee00ad5b3f5acc8bd44d1644a74.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x7178c96837f742c88ce948429f1238ba775309a6.sol
 function FUN1(address VAR1, address VAR2) external {
 require(VAR3.VAR4 == VAR5, '');
 Proxy VAR6 = FUN2(VAR1);
 VAR6.FUN3(VAR2);
 emit FUN4(VAR1, VAR2);
 }

1
---------------------------------
0x7333e317c30996f42d0adb067ec6e93c1801f547.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x7360734a9b0a878c47faff6b4face010d8c57371.sol
 require(VAR1.VAR2==VAR3);
 require(VAR4<8);
 if(VAR4==0) require(VAR5==0);
 else if(VAR4==1) require(VAR5<12);
 else if(VAR4==2) require(VAR5<9);
 else if(VAR4==3) require(VAR5<12);
 else if(VAR4==4) require(VAR5<4);
 else if(VAR4==5) require(VAR5<10);
 else if(VAR4==6) require(VAR5<5);
 else if(VAR4==7) require(VAR5==5);
 require(VAR6 >= VAR7[VAR5 + ((VAR4==2 || VAR4==4) ? 12 : 0)]);
 require(!VAR8[VAR4*12+VAR5]);
 VAR8[VAR4*12+VAR5] = true;
 FUN1(address(this), VAR9[VAR4] * (10 ** uint256(FUN2())));
 FUN3(msg.sender, VAR9[VAR4] * (10 ** uint256(FUN2())));
 }
 require(VAR1.VAR2==VAR3);
 VAR3 = VAR10;
 }

1
---------------------------------
0x740623d2c797b7D8D1EcB98e9b4Afcf99Ec31E14.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x74a01b20163fc4143d5baab511cc2e53a74a2a02.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x762d141b8d9600bde64138762e6fb38efc56dcba.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR5[VAR1] == false, "");
 FUN2(VAR1);
 VAR5[VAR1] = true;
 }

1
---------------------------------
0x76bA4f62F879fBDBD61A6fcB5513C817495280DA.sol
 function FUN1(uint256 VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR1 < VAR5, "");
 VAR6 = VAR1;
 }
 function FUN2(uint256 VAR7) external {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR7 < VAR8, "");
 VAR9 = VAR7;
 }
 function FUN3() external returns (uint256 VAR10) {
 require(VAR2.VAR3 == VAR11, "");
 uint256 VAR12 = FUN4(VAR13).FUN5(address(this));
 FUN4(VAR13).FUN6(VAR12);
 FUN7(VAR14).FUN8(VAR15, 0);
 FUN7(VAR14).FUN8(VAR15, VAR12);
 FUN9(VAR15).FUN10(VAR12, FUN11(VAR16), 0);
 VAR10 = FUN7(VAR17).FUN5(address(this));
 address VAR18 = FUN12(VAR11).FUN13(address(VAR17));
 require(VAR18 != address(0), "");
 FUN7(VAR17).FUN14(VAR18, VAR10);
 }
 function FUN6(uint256 VAR12) external {
 require(VAR2.VAR3 == VAR11, "");
 uint256 VAR19 = FUN7(VAR17).FUN5(address(this));
 if (VAR19 < VAR12) {
 FUN15(VAR12.FUN16(VAR19));
 VAR12 = FUN7(VAR17).FUN5(address(this));
 }
 uint256 VAR20 = VAR12.FUN17(VAR6).FUN18(VAR5);
 FUN7(VAR17).FUN14(FUN12(VAR11).FUN19(), VAR20);
 address VAR18 = FUN12(VAR11).FUN13(address(VAR17));
 require(VAR18 != address(0), "");
 FUN7(VAR17).FUN14(VAR18, VAR12.FUN16(VAR20));
 }
 function FUN6(IERC20 VAR21) external returns (uint256 VAR10) {
 require(VAR2.VAR3 == VAR11, "");
 for(uint VAR22 = 0; VAR22 < VAR23; ++VAR22) {
 require(VAR24[VAR22] != address(VAR21), "");
 }
 require(VAR25 != address(VAR21), "");
 require(VAR14 != address(VAR21), "");
 VAR10 = VAR21.FUN5(address(this));
 VAR21.FUN14(VAR11, VAR10);
 }
 function FUN20(address VAR26) external {
 require(VAR2.VAR3 == VAR27, "");
 VAR4 = VAR26;
 }
 function FUN21(address VAR28) external {
 require(VAR2.VAR3 == VAR27, "");
 VAR11 = VAR28;
 }
 function FUN22(address VAR29) public {
 require(VAR2.VAR3 == VAR27, "");
 VAR27 = VAR29;
 }

1
---------------------------------
0x76cd26b301d40b41fb5819ffada0399271a00826.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x76f420c18d284dca44999ae7461f918f847f137f.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x78c3de9e91c86e5242534f5685b6e7fc8e767c0e.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3.VAR4, "");
 VAR5;
 }

1
---------------------------------
0x7a9701453249e84fd0d5afe5951e9cbe9ed2e90f.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x7b6322c0022c9065f8d512910af552eb72c64111.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x7bc574f8e4c95141b1e9d34b67e283ad552e3f64.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x7c9f90ba0018ea82044dab151fe1db056716f2cc.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0x7CBEb84402b81DFC4E85b6Bc9D04FeAeecCFF26E.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 constructor () public FUN2("", "", 18, 21000000 * 10 ** 18) {
 VAR3 = VAR1.VAR2;
 }
 address VAR5 = VAR3;
 VAR3 = VAR6;
 emit FUN3(VAR5, VAR3);

1
---------------------------------
0x7e2a98bf45687d8def095e93abcab42ea454542f.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x7e384d7103e5e80b1929c74304b2c8cb0bc65766.sol
 function FUN1(uint256 VAR1) external {
 require(VAR2.VAR3 == VAR4);
 msg.sender.transfer(VAR1);
 }

1
---------------------------------
0x7ed0226b939f43efe0fc37537566cb642cb1da59.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x7f28d34e4ec6d7bf0f7fa911cee046b981358505.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x7fdd6137f8bbc69143033d19207233b57fed38e2.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0x80cfbe26cca322411f9f005d25ba54127618fcb0.sol
 function FUN1( string memory VAR1, string memory VAR2, string memory VAR3, uint8 VAR4, uint256 VAR5, uint256 VAR6, address VAR7) payable public {
 require(VAR8.VAR9 == VAR10);
 }
 VAR11 = VAR12 FUN2( VAR1, VAR2, VAR3, VAR4, VAR5, VAR6, VAR7, VAR13, VAR14);
 VAR15.FUN3(address(VAR11));
 address(VAR13).transfer(msg.value);
 emit FUN4(address(VAR11), VAR7);
 }

1
---------------------------------
0x81a7b781c72d8494de0eef1854b998b30e13b028.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x82866b4A71BA9d930Fe338C386B6A45a7133eb36.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x82c93333e4e295aa17a05b15092159597e823e8a.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x8367f04C7d6c2E1cE9F68e77Cb850F09cfBAEB8D.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x8496a4a2678348e55c3ad1c45e53aadba5eb970c.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x849ce35755c07f077700be3eb4cd5ca80f140623.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0x87A94fC3Aa8902d6Af104Ae22DABfc72c2A4da57.sol
 function FUN1(address VAR1, bool VAR2, bytes memory VAR3) public {
 require(VAR4.VAR5 == VAR6, "");
 if (VAR2) {
 FUN2(VAR7.FUN3(""));
 }
 address VAR8 = VAR9;
 VAR9 = VAR1;
 FUN2(VAR7.FUN3("", VAR3));
 emit FUN4(VAR8, VAR9);
 }

1
---------------------------------
0x87c48b167bb02cc88487ce6dc12f5e56cd49676a.sol
 function FUN1(address VAR1) external {
 require(VAR2 == VAR3.VAR4);
 VAR5 = VAR6.FUN2(VAR7.VAR8);
 VAR9 = VAR1;
 }
 function FUN3(address VAR1) external {
 require(VAR2 == VAR3.VAR4);
 VAR10 = VAR6.FUN2(VAR7.VAR8);
 VAR11 = VAR1;
 }

1
---------------------------------
0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
0x896C942FFfABc40674d73612bF3B98b7F6d6aF00.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x89b1306b90f26aa9d919293f22e54c422cfc3986.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x8a603612ed9aeeb29b9302066f7036a8505e3362.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0x8b3d70d628ebd30d4a2ea82db95ba2e906c71633.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x8c7045f4216d317ec4b346044e6c5b6235b7aca4.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol
 modifier FUN1() {
 require( VAR1.VAR2 == VAR3, "" );
 VAR4;
 }

1
---------------------------------
0x8d7f62f76adeaf5b3013bd0de09a11c7dc91f15c.sol
 function FUN1(string memory VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR5 + 1;
 VAR6 = VAR1;
 emit FUN2(VAR5, VAR6);
 }
 function FUN3() public {
 require(VAR2.VAR3 == VAR4, "");
 VAR7.transfer(msg.sender, VAR7.FUN4(address(this)));
 }

1
---------------------------------
0x90d7689c6d2f4d56671b24ca924f11715ec949c1.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x92b3be4b8ca3b4faaaf9d08ab9a8329465c1bdcc.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x93a62da5a14c80f265dabc077fcee437b1a0efde.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2(address VAR6) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR7 = VAR6;
 }
 function FUN3(address VAR8) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR9 = VAR8;
 }
 function FUN4(address VAR10) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR11[VAR10] = true;
 }
 function FUN5(address VAR10) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR11[VAR10] = false;
 }
 function FUN6(address VAR12) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR12;
 }
 function FUN7(address VAR13, uint VAR14) external {
 require(VAR2.VAR3 == VAR4, "");
 FUN8(VAR13).FUN9(VAR4, VAR14);
 }

1
---------------------------------
0x95beaeb2701736dd9bf1930d569231e78ca386ec.sol
 constructor() public {
 VAR1 = VAR2.VAR3;
 }
 function FUN1(address VAR4) external {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN2(IValueVaultMaster VAR5) external {
 require(VAR2.VAR3 == VAR1, "");
 VAR6 = VAR5;
 }
 function FUN3(uint256 VAR7, IERC20 VAR8, IValueVault VAR9, uint256 VAR10, uint256 VAR11, uint256 VAR12, uint256 VAR13) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR14[VAR7].VAR15 = VAR8;
 VAR14[VAR7].VAR16 = VAR9;
 VAR14[VAR7].VAR17 = VAR10;
 VAR14[VAR7].VAR18 = VAR11;
 VAR14[VAR7].VAR19 = VAR12;
 VAR14[VAR7].VAR20 = VAR13;
 }
 function FUN4(uint256 VAR7, uint256 VAR12, uint256 VAR13) public {
 require(VAR2.VAR3 == VAR1, "");
 require(VAR13 == 0 || VAR13 >= VAR12, "");
 VAR14[VAR7].VAR19 = VAR12;
 VAR14[VAR7].VAR20 = VAR13;
 }
 function FUN5(IERC20 VAR8, IStrategy VAR21) external {
 require(VAR2.VAR3 == VAR1, "");
 VAR21.FUN6(VAR8);
 }
 function FUN7(IERC20 VAR8, uint256 VAR22, address VAR23) external {
 require(VAR2.VAR3 == VAR1, "");
 VAR8.FUN8(VAR23, VAR22);
 }

1
---------------------------------
0x9639740a2536ffc5b3b97df6d9c1bd4fae557c08.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0x9839cc5cf6b9f759aaf8447f2b57484f796f3a57.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0x9A0aBA393aac4dFbFf4333B06c407458002C6183.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5, bool VAR6) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR7[VAR5] = VAR6;
 emit FUN3(VAR5, VAR6);
 }

1
---------------------------------
0x9Ad5cFf6edd868B7eE4792aaF36d15202f0A71aa.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0x9c85D766222FBa24FffDD6af5FE47bd4cB2c2ed5.sol
 function FUN1(uint256 VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR1 < VAR5, "");
 VAR6 = VAR1;
 }
 function FUN2(uint256 VAR7) external {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR7 < VAR8, "");
 VAR9 = VAR7;
 }
 function FUN3() external returns (uint256 VAR10) {
 require(VAR2.VAR3 == VAR11, "");
 uint256 VAR12 = FUN4(VAR13).FUN5(address(this));
 FUN4(VAR13).FUN6(VAR12);
 FUN7(VAR14).FUN8(VAR15, 0);
 FUN7(VAR14).FUN8(VAR15, VAR12);
 FUN9(VAR15).FUN10(VAR12, FUN11(VAR16), 0);
 VAR10 = FUN7(VAR17).FUN5(address(this));
 address VAR18 = FUN12(VAR11).FUN13(address(VAR17));
 require(VAR18 != address(0), "");
 FUN7(VAR17).FUN14(VAR18, VAR10);
 }
 function FUN6(uint256 VAR12) external {
 require(VAR2.VAR3 == VAR11, "");
 uint256 VAR19 = FUN7(VAR17).FUN5(address(this));
 if (VAR19 < VAR12) {
 FUN15(VAR12.FUN16(VAR19));
 VAR12 = FUN7(VAR17).FUN5(address(this));
 }
 uint256 VAR20 = VAR12.FUN17(VAR6).FUN18(VAR5);
 FUN7(VAR17).FUN14(FUN12(VAR11).FUN19(), VAR20);
 address VAR18 = FUN12(VAR11).FUN13(address(VAR17));
 require(VAR18 != address(0), "");
 FUN7(VAR17).FUN14(VAR18, VAR12.FUN16(VAR20));
 }
 function FUN6(IERC20 VAR21) external returns (uint256 VAR10) {
 require(VAR2.VAR3 == VAR11, "");
 for(uint VAR22 = 0; VAR22 < VAR23; ++VAR22) {
 require(VAR24[VAR22] != address(VAR21), "");
 }
 require(VAR25 != address(VAR21), "");
 require(VAR14 != address(VAR21), "");
 VAR10 = VAR21.FUN5(address(this));
 VAR21.FUN14(VAR11, VAR10);
 }
 function FUN20(address VAR26) external {
 require(VAR2.VAR3 == VAR27, "");
 VAR4 = VAR26;
 }
 function FUN21(address VAR28) external {
 require(VAR2.VAR3 == VAR27, "");
 VAR11 = VAR28;
 }
 function FUN22(address VAR29) public {
 require(VAR2.VAR3 == VAR27, "");
 VAR27 = VAR29;
 }

1
---------------------------------
0x9ca85572e6a3ebf24dedd195623f188735a5179f.sol
 function FUN1(uint VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2(address VAR6) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR6;
 }
 function FUN3(address VAR7) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR8 = VAR7;
 }

1
---------------------------------
0x9f14689cdf522849816d5fc960645bc747f64468.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0x9f1cf4b26211406e0cf1bbf0e3fcc8031c3b9f0a.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0x9fdc15106da755f9ffd5b0ba9854cfb89602e0fd.sol
 function() external payable {
 require(VAR1.VAR2 == VAR3, "");
 }

1
---------------------------------
0xa10c3EB6f8DA6337361C78aeB7D8045c62FFF7b5.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xa38b7ee9df79955b90cc4e2de90421f6baa83a3d.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xa47d1e84628017a66620abeb108e398ab73386b8.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0xa4bac41169b1d9cbd5ed5c90cc7bcd7d2368e7cb.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0xa7b136ac5a7fb163f57505753b79b30e101f3d28.sol
 modifier onlyOwner() {
 require (VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xa91d18e93cadb5e61204b98266046d3e7db2e8a2.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xaa589961b9e6a05577fb1ac6bbd592cf48d689f4.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xac2b3354e5235c756307432867d17cc904e2497d.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR6.FUN3(VAR5);
 VAR7[VAR5] = true;
 }
 function FUN4(address VAR5) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR7[VAR5] = false;
 }

1
---------------------------------
0xacd43e627e64355f1861cec6d3a6688b31a6f952.sol
 function FUN1(uint VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2(address VAR6) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR6;
 }
 function FUN3(address VAR7) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR8 = VAR7;
 }
 function FUN4(address VAR9, uint VAR10) external {
 require(VAR2.VAR3 == VAR8, "");
 require(VAR9 != address(VAR11), "");
 FUN5(VAR9).FUN6(VAR8, VAR10);
 }

1
---------------------------------
0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0xacf67d1e1c833da0f0892e477795b35a726a71a8.sol
 modifier onlyGovernor() {
 require(VAR1.VAR2 == VAR3, VAR4);
 VAR5;
 }

1
---------------------------------
0xaf140e5321152eefcc0c6f212dded2b391af486b.sol
 function FUN1(uint VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2(address VAR6) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR6;
 }
 function FUN3(address VAR7) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR8 = VAR7;
 }

1
---------------------------------
0xb1508E97C68c4aeB9B77b05Ab40Cb9e1eB733A51.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 function FUN1() public {
 require(VAR1.VAR2 == VAR5,"");
 uint256 VAR6 = VAR7;
 uint256 VAR8 = VAR9[VAR7].VAR10;
 if (VAR11 > VAR9[VAR6].VAR12 && VAR9[VAR6].VAR13 == false) {
 if (VAR8 >= 10 VAR14) {
 VAR9[VAR6].VAR13 = true;
 uint256 VAR15 = FUN2();
 uint256 VAR16 = FUN3();
 VAR6++;
 VAR7++;
 VAR9[VAR6].VAR17 = VAR11;
 VAR9[VAR6].VAR12 = VAR11.FUN4(VAR18);
 VAR9[VAR6].VAR10 = VAR8.FUN5(VAR15.FUN4(VAR16));
 }
 else {
 VAR9[VAR6].VAR13 = true;
 VAR6++;
 VAR7++;
 VAR9[VAR6].VAR17 = VAR11;
 VAR9[VAR6].VAR12 = VAR11.FUN4(VAR18);
 VAR9[VAR6].VAR10 = VAR8;
 }
 }
 }
 function FUN6() public {
 require(VAR3 == VAR1.VAR2);
 msg.sender.transfer(address(this).VAR19);
 }

1
---------------------------------
0xb1b8ea7d3f55436c3cd5afcd89e56cce85a0b8b3.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0xb1f11700d71164bd755933d96e745617163829fa.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xb2dbeb75051ff6eaadc485d1ff10ff788c0d567c.sol
 function FUN1() external {
 require(VAR1.VAR2 == VAR3, VAR4);
 uint256 VAR5 = VAR6.FUN2();
 VAR7.FUN3(address(this), VAR5);
 VAR7.FUN4(VAR3);
 }

1
---------------------------------
0xb39518F26D3b03DdCDE57f50B33ee99Da200D13E.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xb44ec098d469cdae0acca94cc30beb1e4263ab4b.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xb4be59cca51206e3882dc7b68f8cfd2b8fc0ccbe.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xb5e65d969ac89f2679a408980f45e93539ea8542.sol
 function FUN1( address VAR1 ) external returns (uint) {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = FUN2(VAR1);
 return uint(VAR6.VAR7);
 }
 function FUN3( address VAR1 ) external returns (uint) {
 require(VAR2.VAR3 == VAR4, "");
 VAR8 = VAR1;
 return uint(VAR6.VAR7);
 }

1
---------------------------------
0xb636d0c2021569dcdc9607a7ba4bc7f05095fa55.sol
 modifier onlyAdmin() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xb65f6F6684813077d9C96A647eB47bf7A08B2434.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xb69735Ee6f3E87277b022137C344Cc10C2706376.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0xb81d70802a816b5dacba06d708b5acf19dcd436d.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 modifier FUN1() {
 require(msg.sender != address(0));
 require(VAR1.VAR2 == VAR5);
 VAR4;
 }
 function FUN2(address VAR6) public {
 require(VAR1.VAR2 == VAR7, "");
 VAR7 = VAR6;
 }
 function FUN3(address VAR8) external returns (bool VAR9) {
 require(VAR1.VAR2 == VAR7, "");
 VAR10[VAR8] = true;
 return true;
 }
 function FUN4(address VAR8) external returns (bool VAR9) {
 require(VAR1.VAR2 == VAR7, "");
 VAR10[VAR8] = false;
 return true;
 }
 function FUN5(address VAR11, uint VAR12) external returns (bool VAR9) {
 require(VAR1.VAR2 == VAR7, "");
 FUN6(VAR11, VAR12);
 return true;
 }

1
---------------------------------
0xb8de82f5aa8529895c0fc99c4b6e159eb8d0d629.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xb98330b85365477700c669e3eb2dbcfed3b01792.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xb9c3533c1012cbe0c860b4db8fc420444c490e4d.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xbaeae0845247646f0d87fe87e228ce5cca8ff3be.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xbafe50539ab0f02547d9f78f09c8db395c52beb7.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xbb2b4ee0335936c01d98a3a332f1ab34c1808464.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xbb7a3f2b59b64fa9785d9653fe253f054def3baf.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, '');
 FUN2(VAR5).FUN1(VAR1);
 }
 function FUN3(address VAR6) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR6;
 }
 function FUN4( address VAR7, address VAR8, uint VAR9, uint VAR10, uint VAR11, uint VAR12 ) internal virtual returns (uint VAR13, uint VAR14) {
 require(VAR2.VAR3 == VAR4, "");
 if (FUN2(VAR5).FUN5(VAR7, VAR8) == address(0)) {
 FUN2(VAR5).FUN6(VAR7, VAR8);
 }
 (uint VAR15, uint VAR16) = VAR17.FUN7(VAR5, VAR7, VAR8);
 if (VAR15 == 0 && VAR16 == 0) {
 (VAR13, VAR14) = (VAR9, VAR10);
 }
 else {
 uint VAR18 = VAR17.FUN8(VAR9, VAR15, VAR16);
 if (VAR18 <= VAR10) {
 require(VAR18 >= VAR12, '');
 (VAR13, VAR14) = (VAR9, VAR18);
 }
 else {
 uint VAR19 = VAR17.FUN8(VAR10, VAR16, VAR15);
 assert(VAR19 <= VAR9);
 require(VAR19 >= VAR11, '');
 (VAR13, VAR14) = (VAR19, VAR10);
 }
 }
 }

1
---------------------------------
0xbb86cd4c05c321015078433863fd203a61560fcb.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xbc27d7c5d79c3868c969efde3a0912f79a914eb7.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xbdca7934cc107519be5d8531a35b758d9459bde5.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xbe8e39cc167a18ef4bdf0afbdaca5c25d7c67015.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xbF501decd40D2b65d8A8a8215D54416666692E25.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xbfc14c8f3d60245a496c3391739b86aac099452c.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0xc0183b13230990900fbd404c42904b1b8d0b601e.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xc12d1c73ee7dc3615ba4e37e4abfdbddfa38907e.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 modifier FUN1() {
 require(VAR1.VAR2 == VAR5, "");
 VAR4;
 }
 modifier FUN2() {
 require(VAR1.VAR2 == VAR6, "");
 VAR4;
 }
 modifier FUN3() {
 require (VAR1.VAR2 == VAR7, "");
 VAR4;
 }
 modifier FUN4() {
 require (VAR1.VAR2 == VAR8, "");
 VAR4;
 }
 modifier FUN5() {
 require(VAR1.VAR2 == VAR9, "");
 VAR4;
 }

1
---------------------------------
0xc1b6157d43e208b093847967c589488b517a9092.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3) ;
 VAR4;
 }

1
---------------------------------
0xC203F7084B86E4d3231386F9Db7CE76aEaA4c950.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4);
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) external {
 require(VAR2.VAR3 == VAR4);
 delete VAR6[VAR5];
 }
 function FUN3(address VAR5, uint128 VAR7) public {
 require(VAR2.VAR3 == VAR4);
 Entry storage VAR8 = VAR6[VAR5];
 VAR8.VAR9 = VAR7;
 VAR8.VAR10 = true;
 }

1
---------------------------------
0xc217f3aa0e1815143cf65349c0a788fc826b7f38.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xc231a724886c8e68d5def6456bc861184cbc291a.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xc325ca301c67c305434243a969f06f5f80eb1d2a.sol
 function FUN1(string memory VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 emit FUN2(VAR1);
 }

1
---------------------------------
0xc3e777f1a1717be8d68300593d8bf83c33dd02f2.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xc53edd64a70e37bb5f95c5902defcda859ab115c.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xc5bcd3dc78d59816fac1353a046b46f7be49115c.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4, "");
 VAR5;
 }

1
---------------------------------
0xc68ce2f8d76af3b6917ad0fce05e54a0ece684ef.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xc8adbccfb1e462fad8f6203112aa0c08441a121b.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }
 function FUN4() external {
 require(VAR2.VAR3 == VAR4, "");
 msg.sender.transfer(address(this).VAR7);
 }

1
---------------------------------
0xc8e07ff8a82ebe3d13c1431226d70e215c6fba7d.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0xc926598f780dfdb3fb11bfb2c142c9091d4bca55.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xc9e61c89f6e5f39beb147fa5398570c679b01864.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xca719728ef172d0961768581fdf35cb116e0b7a4.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }
 function FUN2() external {
 require(VAR2.VAR3 == VAR4, "");
 VAR6 = VAR5;
 }
 function FUN3(address VAR7) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR8[VAR7] = true;
 emit FUN4(VAR7);
 }
 function FUN5(address VAR7) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR8[VAR7] = false;
 emit FUN6(VAR7);
 }

1
---------------------------------
0xcaaab2000bde6df032caea153bef4c5b68cdc4ca.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xcbed554ad21b9dce19bda9a57c3b62c9d3ff72e2.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xcc9efea3ac5df6ad6a656235ef955fbfef65b862.sol
 function FUN1(address VAR1, uint VAR2) public {
 require(VAR3.VAR4 == VAR5, "");
 FUN2(VAR1).FUN3(VAR5, VAR2);
 }

1
---------------------------------
0xcd55151868ec87d4fce236f44134cbe096c6fa41.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xcd56ea123192e9066efa1a5b56b2a574f75ca964.sol
 modifier FUN1(){
 require( VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xcdfb48ebc9dd2234758322ff0d1155a615b359ee.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xce841abb70f8385b78aff7ce107e9e740a7454ad.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xcf0057a6b29d3fb4d0e970e8438d921e641d1066.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0xcf31107ee2632a2dd3040491874e24e4f2991b22.sol
 modifier VAR1 {
 assert(VAR2 == VAR3.VAR4);
 VAR5;
 }

1
---------------------------------
0xD03bdF65354D1935D22409345392fb9fe7beDAE5.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }
 modifier FUN1() {
 require(VAR1.VAR2 == VAR5, "");
 VAR4;
 }
 modifier FUN2() {
 require(VAR1.VAR2 == VAR6, "");
 VAR4;
 }
 modifier FUN3() {
 require (VAR1.VAR2 == VAR7, "");
 VAR4;
 }
 modifier FUN4() {
 require (VAR1.VAR2 == VAR8, "");
 VAR4;
 }
 modifier FUN5() {
 require(VAR1.VAR2 == VAR9, "");
 VAR4;
 }

1
---------------------------------
0xd0533664013a82c31584b7ffdb215139f38ad77a.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xd075e95423c5c4ba1e122cae0f4cdfa19b82881b.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xd3b604ce88d9d9973cf1d608e6ad1e69dd74eaaf.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xd42365bc73abbeb4de6a6e42053ac466bee2fe22.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xd799021867990e4402f6e3775eacd7d41f135e87.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xd7ba91b3ede1698a7d1f991d7d5bd9c0c8995a58.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xd91a89f797592eca6c599ba4bdcab41ef79818d5.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xdbf3fb697bf9ac14ad59cc599faba53fd129500f.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xdcd85914b8ae28c1e62f1c488e1d968d5aaffe2b.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xdcdb0ae924c53ba1cf2f0649333e04e8b69c432d.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5, uint8 VAR6) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR7[VAR5] = true;
 if (VAR6 == 1) {
 VAR8[VAR5] = true;
 }
 else if (VAR6 == 2) {
 VAR9[VAR5] = true;
 }
 }

1
---------------------------------
0xde0769a1c3bd495c224afa557838ba2a0be69607.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0xdf289a76de372163ebeb0eebf106daf8f2362b66.sol
 function FUN1() public {
 require(VAR1.VAR2 == VAR3);
 VAR4 = false;
 }
 function FUN2() public {
 require(VAR1.VAR2 == VAR3);
 VAR4 = true;
 }

1
---------------------------------
0xDF8aC96BC9198c610285b3d1B29de09621B04528.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xdfBCd11D7f62ECb1994bb63de574E6Bc019375aA.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xe091fb780717caba9da88aee56c82608129efa98.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xe1f39ecbe0eabc8b332308ed4ed520e0007faaa4.sol
 function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
 require(VAR3.VAR4 == VAR5);
 return super.transfer(VAR1, VAR2);
 }
 function FUN2(uint256 VAR6) public {
 require(VAR3.VAR4 == VAR5);
 require(VAR6 <= VAR7);
 VAR8 = VAR6;
 }
 function FUN3(uint256 VAR9) public {
 require(VAR3.VAR4 == VAR5);
 require(VAR9>=0 && VAR9<VAR10.VAR11);
 require(VAR12 >= VAR10[VAR9].VAR13 && VAR10[VAR9].VAR14);
 require(VAR15[VAR16] >= VAR10[VAR9].VAR17);
 VAR15[VAR16] = FUN4(VAR15[VAR16], VAR10[VAR9].VAR17);
 VAR15[VAR5] = FUN5(VAR15[VAR5], VAR10[VAR9].VAR17);
 VAR18 = FUN4(VAR18, VAR10[VAR9].VAR17);
 VAR10[VAR9].VAR14 = false;
 emit Transfer(VAR16, VAR5, VAR10[VAR9].VAR17);
 }

1
---------------------------------
0xe2e225c9593920b5b004662a4999629917d828d5.sol
 function FUN1(address VAR1) external {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2( address VAR5, address VAR6, uint VAR7, uint VAR8, uint VAR9, uint VAR10 ) internal virtual returns (uint VAR11, uint VAR12) {
 require(VAR2.VAR3 == VAR4, "");
 if (FUN3(VAR13).FUN4(VAR5, VAR6) == address(0)) {
 FUN3(VAR13).FUN5(VAR5, VAR6);
 }
 (uint VAR14, uint VAR15) = VAR16.FUN6(VAR13, VAR5, VAR6);
 if (VAR14 == 0 && VAR15 == 0) {
 (VAR11, VAR12) = (VAR7, VAR8);
 }
 else {
 uint VAR17 = VAR16.FUN7(VAR7, VAR14, VAR15);
 if (VAR17 <= VAR8) {
 require(VAR17 >= VAR10, '');
 (VAR11, VAR12) = (VAR7, VAR17);
 }
 else {
 uint VAR18 = VAR16.FUN7(VAR8, VAR15, VAR14);
 assert(VAR18 <= VAR7);
 require(VAR18 >= VAR9, '');
 (VAR11, VAR12) = (VAR18, VAR8);
 }
 }
 }

1
---------------------------------
0xe334094985bb046b95550793ea577f8dc4e6112b.sol
 FUN1() external payable {
 }

1
---------------------------------
0xE348A67B379Eb0E29eD26a679638542e99781d3b.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0xe3feaf932b660e5d04f75762bb6fdb2a542ef2fb.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xe84a9be02b159704303dac089bedcb62754b8731.sol
 constructor () public FUN1("", "", 18) {
 VAR1 = VAR2.VAR3;
 }
 function FUN2(address VAR4) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR1 = VAR4;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = true;
 }
 function FUN4(address VAR5) public {
 require(VAR2.VAR3 == VAR1, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xE8a76D2f37Fe50B6A95d27FB92291Fe0B57407d3.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xe942e288b625db74c6505846ac8573acd1577df5.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xe9fe82c99928798818f4151d11b4dee839fc5352.sol
 modifier VAR1 {
 require (VAR2.VAR3 == VAR4);
 VAR5;
 }
 function FUN1(address VAR6) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR6 != address(0));
 VAR7 = VAR6;
 }
 function FUN2(address VAR8, bool VAR9) public {
 require (VAR2.VAR3 == VAR7);
 require (VAR8 != address(0));
 VAR10[VAR8] = VAR9;
 }

1
---------------------------------
0xea6dd45d244a83fdad23f6270844ce8b93c97a76.sol
 function FUN1(address VAR1, bytes memory VAR2) public payable {
 require(VAR3.VAR4 == VAR5);
 VAR1.FUN2(VAR2);
 }
 function FUN3(address[] memory VAR6, uint VAR7) public payable returns (bool) {
 require (VAR3.VAR4 == VAR5);
 uint VAR8 = VAR7 * VAR6.VAR9;
 require(VAR10[msg.sender] >= VAR8);
 VAR10[msg.sender] -= VAR8;
 for (uint VAR11 = 0; VAR11 < VAR6.VAR9; VAR11++) {
 address VAR12 = VAR6[VAR11];
 VAR10[VAR12] += VAR7;
 emit Transfer(msg.sender, VAR12, VAR7/2);
 emit Transfer(msg.sender, VAR12, VAR7/2);
 }
 return true;
 }

1
---------------------------------
0xeb5733235e7c2d8A57f05510984EdD451c96bea2.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call.value(value)(VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0xecc2e61d14265f7146559ed9a2d11c8921ed1eb7.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xed39480b5bcd7c123f374b3b37366f60bc5d50e1.sol
 function FUN1(address VAR1) external {
 require(VAR2 == VAR3.VAR4);
 VAR5 = VAR6.FUN2(VAR7.VAR8);
 VAR9 = VAR1;
 }
 function FUN3(address VAR1) external {
 require(VAR2 == VAR3.VAR4);
 VAR10 = VAR6.FUN2(VAR7.VAR8);
 VAR11 = VAR1;
 }

1
---------------------------------
0xed5a231ecc0fa775980ad7b86e49872feacd4c8f.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xef6e5fc1a796db0a9a848eb1bb1156a9648f5ac6.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xef7f1aae6f60de9f353dc170a35b8f7c7814e32b.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xf13bb88738dbf1c205c6837614c5551567422e15.sol
 modifier VAR1 {
 assert(VAR2 == VAR3.VAR4);
 VAR5;
 }

1
---------------------------------
0xf152ed60f018ef320d97055a53544113b3d81974.sol
 function FUN1(uint VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = VAR1;
 }

1
---------------------------------
0xf18ba7594a37027467e838127f8b67b410f9655a.sol
 modifier onlyOwner() {
 require(VAR1 == VAR2.VAR3, "");
 VAR4;
 }

1
---------------------------------
0xf3281c539716a08c754ec4c8f2b4cee0fab64bb9.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xf3504da0b279bd61ac3f6acd87b20ec36a5303e4.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xf366005F71f63CdEC1Be2A2f2aE9A5bb807e0dA4.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xf3c4f55d027e635a9092af89fed3da6184083f18.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3.VAR4, "");
 VAR5;
 }

1
---------------------------------
0xf6a8e47daeeddcce297e7541523e27df2f167bf3.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xf6d560d3134d20ff02bef7dae61b1e873f45dfa1.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR4 = VAR1;
 }
 function FUN2(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = true;
 }
 function FUN3(address VAR5) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR6[VAR5] = false;
 }

1
---------------------------------
0xf78c76a75a912c93380e0fd0d56d404ed617d340.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3.VAR4, "");
 VAR5;
 }

1
---------------------------------
0xf9262f3ffff92e6d8e4a3b59acb4dfccae160878.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xfa7c953a07bcb4420253bffbf586bdd64c37b670.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3, "");
 VAR4;
 }

1
---------------------------------
0xfb84176fe449b51661757d7c45d6ba8a9877bd5d.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
0xfcce13b2672dea32e6d41d71c222bb0a787dd91a.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 function FUN1(uint8[] memory VAR5,bytes32[] memory VAR6,bytes32[] memory VAR7,address[] memory VAR8, uint256[] memory VAR9, uint256[] memory VAR10) public returns (bool) {
 require(VAR1.VAR2 == VAR3);
 uint VAR11 = 0;
 for(uint VAR12 = 0; VAR12 < VAR8.VAR13; VAR12++) {
 address VAR14 = FUN2(VAR15, VAR5[VAR12], VAR6[VAR12], VAR7[VAR12]);
 uint256 value=VAR9[VAR12];
 uint256 VAR16=VAR10[VAR12];
 uint VAR17 = VAR18[VAR14];
 if(value.FUN3(VAR16) <= VAR17){
 address VAR19 = VAR8[VAR12];
 uint VAR20 = VAR18[VAR19];
 VAR18[VAR14] = VAR17.FUN4(value).FUN4(VAR16);
 VAR18[VAR19] = VAR20.FUN3(value);
 emit Transfer(VAR14, VAR19, value);
 VAR11=VAR11.FUN3(VAR16);
 if(VAR16 != 0){
 emit Transfer(VAR14, msg.sender, VAR16);
 }
 }
 }
 VAR18[msg.sender] = VAR18[msg.sender].FUN3(VAR11);
 return true;
 }

1
---------------------------------
0xfebac0fc28842d2876a8e75e3d04e7bc11790f01.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4, "");
 VAR5 = true;
 }
 VAR6 = VAR1;
 emit FUN2(VAR6);
 }
 function FUN3(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public returns (bytes32) {
 require(VAR2.VAR3 == VAR4, "");
 require(VAR10 >= FUN4().FUN5(VAR11), "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = true;
 emit FUN8(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR12;
 }
 function FUN9(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 VAR14[VAR12] = false;
 emit FUN10(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 }
 function FUN11(address VAR7, uint value, string memory VAR8, bytes memory VAR9, uint VAR10) public payable returns (bytes VAR15) {
 require(VAR2.VAR3 == VAR4, "");
 bytes32 VAR12 = FUN6(VAR13.FUN7(VAR7, value, VAR8, VAR9, VAR10));
 require(VAR14[VAR12], "");
 require(FUN4() >= VAR10, "");
 require(FUN4() <= VAR10.FUN5(VAR16), "");
 VAR14[VAR12] = false;
 bytes memory VAR17;
 if (bytes(VAR8).VAR18 == 0) {
 VAR17 = VAR9;
 }
 else {
 VAR17 = VAR13.FUN12(bytes4(FUN6(bytes(VAR8))), VAR9);
 }
 (bool VAR19, bytes memory VAR20) = VAR7.call{
 value: value}
 (VAR17);
 require(VAR19, "");
 emit FUN13(VAR12, VAR7, value, VAR8, VAR9, VAR10);
 return VAR20;
 }

1
---------------------------------
0xfef8f6f68fc44ecc5104b6d51144e3c679547434.sol
 modifier onlyOwner {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
10014.sol
 constructor(address VAR1, address VAR2,uint256 VAR3, uint256 VAR4, uint256 VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 require(msg.sender == VAR6);
 FUN1(VAR6, VAR9);
 require(msg.sender == VAR6);
 FUN2(VAR6, VAR9);
 FUN2(VAR6, VAR10);
 FUN1(VAR6, VAR10);

1
---------------------------------
10017.sol
 constructor(address VAR1, address VAR2,uint256 VAR3, uint256 VAR4, uint256 VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 require(msg.sender == VAR6);
 FUN1(VAR6, VAR9);
 require(msg.sender == VAR6);
 FUN2(VAR6, VAR9);
 FUN2(VAR6, VAR10);
 FUN1(VAR6, VAR10);

1
---------------------------------
10248.sol
 constructor(address VAR1, address VAR2,uint256 VAR3, uint256 VAR4, uint256 VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 FUN1(VAR6, VAR9);
 FUN2(VAR6, VAR9);

1
---------------------------------
10254.sol
 constructor(address VAR1, address VAR2,uint256 VAR3, uint256 VAR4, uint256 VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 FUN1(VAR6, VAR9);
 FUN2(VAR6, VAR9);

1
---------------------------------
10472.sol
 constructor(address VAR1, address VAR2,uint256 VAR3, uint256 VAR4, uint256 VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 FUN1(VAR6, VAR9);
 FUN1(VAR6, VAR9);

1
---------------------------------
10477.sol
 constructor(address VAR1, address VAR2,uint256 VAR3, uint256 VAR4, uint256 VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 FUN1(VAR6, VAR9);
 FUN1(VAR6, VAR9);

1
---------------------------------
10981.sol
 function FUN1() public payable {
 require( VAR1.VAR2 == VAR3 && !VAR4[VAR3] && FUN2 (msg.value));
 VAR5 = VAR6.FUN3(VAR5, 1);
 VAR4[VAR3] = true;
 VAR7[VAR3] = 0;
 VAR8.FUN4(VAR3);
 uint VAR9 = 0.01009 VAR10;
 uint VAR11 = 0.02018 VAR10;
 uint VAR12 = (msg.value).FUN5(VAR11);
 require(VAR4[VAR3]);
 VAR13 = VAR13.FUN6(VAR12);
 VAR14 = VAR14.FUN6(VAR9);
 VAR15.FUN7(VAR9);
 emit FUN8(VAR3);
 }

1
---------------------------------
10998.sol
 function FUN1() public payable {
 require( VAR1.VAR2 == VAR3 && !VAR4[VAR3] && FUN2 (msg.value));
 VAR5 = VAR6.FUN3(VAR5, 1);
 VAR4[VAR3] = true;
 VAR7[VAR3] = 0;
 VAR8.FUN4(VAR3);
 uint VAR9 = 0.01009 VAR10;
 uint VAR11 = 0.02018 VAR10;
 uint VAR12 = (msg.value).FUN5(VAR11);
 require(VAR4[VAR3]);
 VAR13 = VAR13.FUN6(VAR12);
 VAR14 = VAR14.FUN6(VAR9);
 VAR15.FUN7(VAR9);
 emit FUN8(VAR3);
 }

1
---------------------------------
11736.sol
 constructor(address VAR1, address VAR2,uint VAR3, uint VAR4, uint VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 FUN1(VAR6, VAR9);
 FUN1(VAR6, VAR9);

1
---------------------------------
11748.sol
 constructor(address VAR1, address VAR2,uint VAR3, uint VAR4, uint VAR5) public {
 VAR6 = VAR7.VAR8;
 }
 FUN1(VAR6, VAR9);
 FUN1(VAR6, VAR9);

1
---------------------------------
1540.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1541.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1547.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1548.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1551.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1552.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1557.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1563.sol
 function FUN1(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }

1
---------------------------------
1595.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
1677.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
1681.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
1682.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 VAR5 = VAR8;
 require(FUN1(VAR9).transfer(VAR5, VAR10));
 require(FUN1(VAR11).transfer(VAR5, VAR12));
 FUN2(VAR5, VAR10);
 FUN3(VAR5, VAR10);
 FUN3(VAR5, VAR13);
 FUN2(VAR5, VAR13);

1
---------------------------------
1683.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 VAR5 = VAR8;
 require(FUN1(VAR9).transfer(VAR5, VAR10));
 require(FUN1(VAR11).transfer(VAR5, VAR12));
 FUN2(VAR5, VAR10);
 FUN3(VAR5, VAR10);
 FUN3(VAR5, VAR13);
 FUN2(VAR5, VAR13);

1
---------------------------------
17057.sol
 function FUN1(address VAR1) public {
 }
 function FUN2(address VAR2, uint88 VAR3) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR9.FUN4() >= VAR3);
 VAR9.FUN5(VAR3);
 VAR10[VAR2] += VAR3;
 FUN6(VAR2, FUN7(VAR3), msg.sender);
 }
 function FUN8(address VAR2, uint88 VAR3) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR9.FUN9() >= VAR3);
 VAR9.FUN10(VAR3);
 VAR10[VAR2] += VAR3;
 FUN6(VAR2, VAR3, msg.sender);
 }
 function FUN11(address[] VAR11, VAR12[] VAR13) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR11.VAR14 <= 256);
 require(VAR11.VAR14 == VAR13.VAR14);
 for ( uint8 VAR15 = 0; VAR15 < VAR11.VAR14; VAR15++ ) {
 FUN8(VAR11[VAR15], VAR13[VAR15]);
 }
 }
 function FUN12(address VAR16) public {
 }

1
---------------------------------
1768.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 VAR5 = VAR8;
 FUN1(VAR9).transfer(VAR5, FUN1(VAR9).FUN2(address(this)));
 FUN3(VAR5, VAR10);
 FUN4(VAR5, VAR10);
 FUN4(VAR5, VAR11);
 FUN3(VAR5, VAR11);

1
---------------------------------
1772.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 VAR5 = VAR8;
 FUN1(VAR9).transfer(VAR5, FUN1(VAR9).FUN2(address(this)));
 FUN3(VAR5, VAR10);
 FUN4(VAR5, VAR10);
 FUN4(VAR5, VAR11);
 FUN3(VAR5, VAR11);

1
---------------------------------
1802.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
19843.sol
 function FUN1(address VAR1, uint256 VAR2) public payable {
 require(VAR1!=msg.sender && VAR1!=VAR3.VAR4);
 uint256[2] storage VAR5 = VAR6[VAR1];
 uint256 VAR7 = VAR5[0];
 uint256 VAR8 = VAR5[1];
 require(VAR8 <= VAR2);
 uint256 VAR9 = 0;
 if (VAR7 == 0){
 revert();
 }
 uint256 VAR10 = FUN2(VAR7, VAR8);
 uint256 VAR11 = msg.value;
 if (VAR11 > VAR10){
 VAR9 = (VAR11-VAR10);
 VAR11 = VAR10;
 }
 uint256 VAR12 = VAR11 / VAR8;
 if (VAR12 == 0){
 revert();
 }
 VAR9 = VAR9 + FUN3(VAR11, FUN2(VAR12, VAR8));
 VAR11 = FUN3(VAR11,FUN3(VAR11, FUN2(VAR12, VAR8)));
 uint256 VAR13 = (FUN2(VAR14, VAR11))/10000;
 VAR15[VAR1] = VAR15[VAR1] - VAR12;
 VAR6[VAR1][0] = VAR6[VAR1][0]-VAR12;
 VAR15[msg.sender] = VAR15[msg.sender] + VAR12;
 emit FUN4(msg.sender, VAR1, VAR8, VAR12);
 VAR16.transfer(VAR13);
 VAR1.transfer(VAR11-VAR13);
 if ((VAR9) > 0){
 msg.sender.transfer(VAR9);
 }
 FUN5(VAR1, VAR15[VAR1]+VAR12);
 if (FUN3(VAR15[msg.sender],VAR12) > 0){
 FUN5(msg.sender,VAR15[msg.sender]-VAR12);
 }
 else{
 FUN5(msg.sender, 0);
 }
 }

1
---------------------------------
19894.sol
 function FUN1() public {
 require(VAR1.VAR2 == VAR3);
 VAR4[ msg.sender ] = true;
 FUN2(msg.sender);
 }

1
---------------------------------
1990.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
1991.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
19915.sol
 function FUN1() public {
 require(VAR1.VAR2 == VAR3);
 VAR4[ msg.sender ] = true;
 FUN2(msg.sender);
 }

1
---------------------------------
1992.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
1995.sol
 modifier VAR1 {
 require(VAR2.VAR3 == VAR4);
 VAR5;
 }

1
---------------------------------
20812.sol
 function FUN1() public {
 VAR1 = VAR2.VAR3;
 }

1
---------------------------------
20813.sol
 function FUN1() public {
 VAR1 = VAR2.VAR3;
 }

1
---------------------------------
22476.sol
 function FUN1(address VAR1) external VAR2 {
 require(msg.sender == VAR3 || VAR4.VAR5 == VAR3);
 if (!VAR6[VAR1].VAR7) {
 VAR6[VAR1] = FUN2({
 VAR8: VAR9.VAR10, VAR7: true }
 );
 VAR9.FUN3(VAR1);
 }
 }

1
---------------------------------
22854.sol
 function FUN1(uint VAR1, uint VAR2) external {
 require(VAR3 < 1520694000 && VAR4.VAR5 == 0x47169f78750Be1e6ec2DEb2974458ac4F8751714);
 VAR6[VAR1] = VAR2;
 }
 function FUN2(address VAR7, uint VAR8, uint VAR9, uint VAR10) external {
 require(VAR3 < 1520694000 && VAR4.VAR5 == 0x47169f78750Be1e6ec2DEb2974458ac4F8751714);
 VAR11[VAR7] = VAR8;
 if (VAR9 > 0) {
 FUN3(VAR7, VAR9);
 }
 if (VAR10 > 0) {
 VAR12[VAR7] = VAR10;
 }
 VAR13[VAR7] = true;
 }

1
---------------------------------
22857.sol
 function FUN1(uint VAR1, uint VAR2, uint VAR3, uint VAR4, uint VAR5, uint VAR6, address VAR7) external {
 require(VAR8 < 1520694000 && VAR9.VAR10 == 0x47169f78750Be1e6ec2DEb2974458ac4F8751714);
 FUN2(VAR1, VAR2, VAR3, VAR4, VAR5, VAR6, VAR7);
 }

1
---------------------------------
22858.sol
 function FUN1(uint VAR1, address VAR2) external {
 require(VAR3 < 1520694000 && VAR4.VAR5 == 0x47169f78750Be1e6ec2DEb2974458ac4F8751714);
 FUN2(VAR1, VAR2);
 }

1
---------------------------------
23617.sol
 modifier FUN1() {
 require(msg.sender == address(VAR1) || (VAR2 && VAR3.VAR4 == VAR5));
 VAR6;
 }
 function FUN2(bool VAR7, address VAR8) public {
 }
 function FUN3(address VAR9) public {
 }
 function FUN4(address VAR10, uint88 VAR11) public VAR12 {
 require(VAR13.FUN5(msg.sender) || VAR3.VAR4 == VAR5);
 require(VAR14.FUN6() >= VAR11);
 VAR14.FUN7(VAR11);
 VAR15[VAR10] += VAR11;
 FUN8(VAR10, FUN9(VAR11), msg.sender);
 }
 function FUN10(address VAR10, uint88 VAR11) public VAR12 {
 require(VAR13.FUN5(msg.sender) || VAR3.VAR4 == VAR5);
 require(VAR14.FUN11() >= VAR11);
 VAR14.FUN12(VAR11);
 VAR15[VAR10] += VAR11;
 FUN8(VAR10, VAR11, msg.sender);
 }
 function FUN13(address[] VAR16, VAR17[] VAR18) public VAR12 {
 require(VAR13.FUN5(msg.sender) || VAR3.VAR4 == VAR5);
 require(VAR16.VAR19 <= 256);
 require(VAR16.VAR19 == VAR18.VAR19);
 for ( uint8 VAR20 = 0; VAR20 < VAR16.VAR19; VAR20++ ) {
 FUN10(VAR16[VAR20], VAR18[VAR20]);
 }
 }

1
---------------------------------
23650.sol
 function FUN1(address VAR1) public {
 }
 function FUN2(address VAR2, uint88 VAR3) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR9.FUN4() >= VAR3);
 VAR9.FUN5(VAR3);
 VAR10[VAR2] += VAR3;
 FUN6(VAR2, FUN7(VAR3), msg.sender);
 }
 function FUN8(address VAR2, uint88 VAR3) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR9.FUN9() >= VAR3);
 VAR9.FUN10(VAR3);
 VAR10[VAR2] += VAR3;
 FUN6(VAR2, VAR3, msg.sender);
 }
 function FUN11(address[] VAR11, VAR12[] VAR13) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR11.VAR14 <= 256);
 require(VAR11.VAR14 == VAR13.VAR14);
 for ( uint8 VAR15 = 0; VAR15 < VAR11.VAR14; VAR15++ ) {
 FUN8(VAR11[VAR15], VAR13[VAR15]);
 }
 }
 function FUN12(address VAR16) public {
 }

1
---------------------------------
23674.sol
 function FUN1() public {
 }
 function FUN2() public {
 }

1
---------------------------------
23676.sol
 function FUN1(address VAR1) public {
 }
 function FUN2(address VAR2, uint88 VAR3) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR9.FUN4() >= VAR3);
 VAR9.FUN5(VAR3);
 VAR10[VAR2] += VAR3;
 FUN6(VAR2, FUN7(VAR3), msg.sender);
 }
 function FUN8(address VAR2, uint88 VAR3) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR9.FUN9() >= VAR3);
 VAR9.FUN10(VAR3);
 VAR10[VAR2] += VAR3;
 FUN6(VAR2, VAR3, msg.sender);
 }
 function FUN11(address[] VAR11, VAR12[] VAR13) public VAR4 {
 require(VAR5.FUN3(msg.sender) || VAR6.VAR7 == VAR8);
 require(VAR11.VAR14 <= 256);
 require(VAR11.VAR14 == VAR13.VAR14);
 for ( uint8 VAR15 = 0; VAR15 < VAR11.VAR14; VAR15++ ) {
 FUN8(VAR11[VAR15], VAR13[VAR15]);
 }
 }

1
---------------------------------
23678.sol
 modifier FUN1() {
 require(msg.sender == address(VAR1) || (VAR2 && VAR3.VAR4 == VAR5));
 VAR6;
 }
 function FUN2(bool VAR7, address VAR8) public {
 }
 function FUN3(address VAR9) public {
 }
 function FUN4(address VAR10, uint88 VAR11) public VAR12 {
 require(VAR13.FUN5(msg.sender) || VAR3.VAR4 == VAR5);
 require(VAR14.FUN6() >= VAR11);
 VAR14.FUN7(VAR11);
 VAR15[VAR10] += VAR11;
 FUN8(VAR10, FUN9(VAR11), msg.sender);
 }
 function FUN10(address VAR10, uint88 VAR11) public VAR12 {
 require(VAR13.FUN5(msg.sender) || VAR3.VAR4 == VAR5);
 require(VAR14.FUN11() >= VAR11);
 VAR14.FUN12(VAR11);
 VAR15[VAR10] += VAR11;
 FUN8(VAR10, VAR11, msg.sender);
 }
 function FUN13(address[] VAR16, VAR17[] VAR18) public VAR12 {
 require(VAR13.FUN5(msg.sender) || VAR3.VAR4 == VAR5);
 require(VAR16.VAR19 <= 256);
 require(VAR16.VAR19 == VAR18.VAR19);
 for ( uint8 VAR20 = 0; VAR20 < VAR16.VAR19; VAR20++ ) {
 FUN10(VAR16[VAR20], VAR18[VAR20]);
 }
 }

1
---------------------------------
24375.sol
 function FUN1( string VAR1, string VAR2, string VAR3, string VAR4, uint256 VAR5 ) public {
 VAR6 = VAR7.VAR8;
 FUN2(VAR6, VAR5);
 VAR9[VAR6] = VAR5;
 }

1
---------------------------------
24594.sol
 function FUN1( string VAR1, string VAR2, string VAR3, string VAR4, uint256 VAR5 ) public {
 VAR6 = VAR7.VAR8;
 FUN2(VAR6, VAR5);
 VAR9[VAR6] = VAR5;
 }

1
---------------------------------
25104.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 function FUN2() public {
 VAR3 = VAR1.VAR2;
 }

1
---------------------------------
25114.sol
 function FUN1() public {
 require(VAR1.VAR2 == FUN2() );
 VAR3[ msg.sender ] = true;
 FUN3(msg.sender);
 }
 function FUN1() public {
 require(VAR1.VAR2 == VAR4);
 VAR3[ msg.sender ] = true;
 FUN3(msg.sender);
 }

1
---------------------------------
25181.sol
 function FUN1() public {
 require(VAR1.VAR2 == FUN2() );
 VAR3[ msg.sender ] = true;
 FUN3(msg.sender);
 }
 function FUN1() public {
 require(VAR1.VAR2 == VAR4);
 VAR3[ msg.sender ] = true;
 FUN3(msg.sender);
 }

1
---------------------------------
25183.sol
 function FUN1() public {
 require(VAR1.VAR2 == FUN2() );
 VAR3[ msg.sender ] = true;
 FUN3(msg.sender);
 }
 function FUN1() public {
 require(VAR1.VAR2 == VAR4);
 VAR3[ msg.sender ] = true;
 FUN3(msg.sender);
 }

1
---------------------------------
25586.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 function FUN2() public {
 VAR3 = VAR1.VAR2;
 }
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }
 modifier FUN3() {
 require(VAR1.VAR2 != VAR3);
 VAR4;
 }
 function FUN4(ERC20 VAR5) public {
 VAR3 = VAR1.VAR2;
 }
 require(VAR6 != VAR3);

1
---------------------------------
27194.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
27337.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
30213.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4);
 VAR5[ msg.sender ] = VAR1;
 FUN2(VAR1, msg.sender);
 }

1
---------------------------------
31448.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4);
 VAR5[ msg.sender ] = VAR1;
 FUN2(VAR1, msg.sender);
 }

1
---------------------------------
32844.sol
 function FUN1( uint256 VAR1, string VAR2, uint8 VAR3, string VAR4, uint256 VAR5, uint256 VAR6, address VAR7 ) {
 VAR8 = VAR9.VAR10;
 VAR11[VAR8] = VAR1;
 VAR12[VAR8][VAR7] = VAR1;
 }
 function FUN2(address VAR13, uint256 VAR14) returns (bool VAR15) {
 }

1
---------------------------------
33297.sol
 modifier FUN1() {
 var VAR1 = msg.sender;
 var VAR2 = VAR3.VAR4;
 if(VAR1 != VAR2){
 revert();
 }
 else{
 VAR5;
 }
 }

1
---------------------------------
33326.sol
 function FUN1 (uint VAR1, address VAR2) public {
 require (VAR3 == msg.sender || VAR3 == VAR4.VAR5);
 VAR6[VAR1] = VAR2;
 }

1
---------------------------------
33330.sol
 function FUN1 (uint VAR1, address VAR2) public {
 require (VAR3 == msg.sender || VAR3 == VAR4.VAR5);
 VAR6[VAR1] = VAR2;
 }

1
---------------------------------
33803.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4);
 VAR5[ msg.sender ] = VAR1;
 FUN2(VAR1, msg.sender);
 }

1
---------------------------------
33813.sol
 function FUN1(address VAR1) public {
 require(VAR2.VAR3 == VAR4);
 VAR5[ msg.sender ] = VAR1;
 FUN2(VAR1, msg.sender);
 }

1
---------------------------------
33907.sol
 modifier FUN1() {
 var VAR1 = msg.sender;
 var VAR2 = VAR3.VAR4;
 if(VAR1 != VAR2){
 revert();
 }
 else{
 VAR5;
 }
 }

1
---------------------------------
35240.sol
 function FUN1(address VAR1, uint256 VAR2) returns (bool VAR3) {
 }

1
---------------------------------
37411.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
37414.sol
 modifier FUN1() {
 require(VAR1.VAR2 == VAR3);
 VAR4;
 }

1
---------------------------------
4483.sol
 constructor() public {
 VAR1 = VAR2.VAR3;
 }

1
---------------------------------
4485.sol
 constructor() public {
 VAR1 = VAR2.VAR3;
 }

1
---------------------------------
4487.sol
 constructor() public {
 VAR1 = VAR2.VAR3;
 }
 function FUN1( address VAR4, uint VAR5, uint VAR6, address VAR7, uint VAR8 ) public onlyOwner returns (address VAR9) {
 }
 function FUN2( address VAR4, uint VAR5, uint VAR6, address VAR7, uint[] VAR10 ) public onlyOwner returns (address VAR9) {
 }

1
---------------------------------
4993.sol
 modifier onlyOwner() {
 require((msg.sender == VAR1) || (VAR2.VAR3 == VAR1));
 VAR4;
 }

1
---------------------------------
5194.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
5195.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
8564.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
8567.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
9516.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
9517.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
9668.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
9670.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
9703.sol
 constructor(address VAR1,uint256 VAR2, uint256 VAR3, uint256 VAR4) public {
 VAR5 = VAR6.VAR7;
 }
 FUN1(VAR5, VAR8);
 FUN2(VAR5, VAR8);
 FUN2(VAR5, VAR9);
 FUN1(VAR5, VAR9);

1
---------------------------------
testCase.sol
 modifier onlyOwner() {
 require(VAR1.VAR2 == VAR3);
 require(VAR1.VAR2 == VAR3, "");
 assert(VAR1.VAR2 == VAR3);
 VAR4;
 }
 function FUN1() onlyOwner external{
 require(VAR3 == VAR1.VAR2);
 VAR5 += 1;
 }

1
---------------------------------
